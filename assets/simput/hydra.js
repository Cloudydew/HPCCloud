!function(){var e={files:["hydra-data.json","hydra.ctln"],help:{}},i=function(){function e(e){return null!=e&&""!==e}function i(t){return(Array.isArray(t)?t.map(i):t&&"object"==typeof t?Object.keys(t).filter(function(e){return t[e]}):[t]).filter(e).join(" ")}var t={};return t.merge=function n(i,t){if(1===arguments.length){for(var a=i[0],l=1;l<i.length;l++)a=n(a,i[l]);return a}var r=i["class"],s=t["class"];(r||s)&&(r=r||[],s=s||[],Array.isArray(r)||(r=[r]),Array.isArray(s)||(s=[s]),i["class"]=r.concat(s).filter(e));for(var o in t)"class"!=o&&(i[o]=t[o]);return i},t.joinClasses=i,t.cls=function(e,n){for(var a=[],l=0;l<e.length;l++)a.push(n&&n[l]?t.escape(i([e[l]])):i(e[l]));var r=i(a);return r.length?' class="'+r+'"':""},t.style=function(e){return e&&"object"==typeof e?Object.keys(e).map(function(i){return i+":"+e[i]}).join(";"):e},t.attr=function(e,i,n,a){return"style"===e&&(i=t.style(i)),"boolean"==typeof i||null==i?i?" "+(a?e:e+'="'+e+'"'):"":0==e.indexOf("data")&&"string"!=typeof i?(-1!==JSON.stringify(i).indexOf("&")&&console.warn("Since Jade 2.0.0, ampersands (`&`) in data attributes will be escaped to `&amp;`"),i&&"function"==typeof i.toISOString&&console.warn("Jade will eliminate the double quotes around dates in ISO form after 2.0.0")," "+e+"='"+JSON.stringify(i).replace(/'/g,"&apos;")+"'"):n?(i&&"function"==typeof i.toISOString&&console.warn("Jade will stringify dates in ISO form after 2.0.0")," "+e+'="'+t.escape(i)+'"'):(i&&"function"==typeof i.toISOString&&console.warn("Jade will stringify dates in ISO form after 2.0.0")," "+e+'="'+i+'"')},t.attrs=function(e,n){var a=[],l=Object.keys(e);if(l.length)for(var r=0;r<l.length;++r){var s=l[r],o=e[s];"class"==s?(o=i(o))&&a.push(" "+s+'="'+o+'"'):a.push(t.attr(s,o,!1,n))}return a.join("")},t.escape=function(e){var i=String(e).replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;");return i===""+e?e:i},t.rethrow=function a(e,i,t,n){if(!(e instanceof Error))throw e;if(!("undefined"==typeof window&&i||n))throw e.message+=" on line "+t,e;try{n=n||require("fs").readFileSync(i,"utf8")}catch(l){a(e,null,t)}var r=3,s=n.split("\n"),o=Math.max(t-r,0),u=Math.min(s.length,t+r),r=s.slice(o,u).map(function(e,i){var n=i+o+1;return(n==t?"  > ":"    ")+n+"| "+e}).join("\n");throw e.path=i,e.message=(i||"Jade")+":"+t+"\n"+r+"\n\n"+e.message,e},t}();e.help["velocityminmax.nstep"]="<p><b><i>nminmax</i></b> - Output min/max values of velocity every N<sub>minmax</sub> (integer, default=10) time steps.\n\n    <p><b>Note</b>: Set the interval to report the min/max values of the velocity to N<sub>minmax</sub>. The min/max values are normally written to the screen at run-time.",e.help["velocitydirichlet.setids"]="<p><b><i>setids</i></b> - One (or more) side-set(s) on which the boundary condition will be applied, <b>setId</b> (integer, required).",e.help["velocitydirichlet.load_curve"]="<p><b><i>load_curve</i></b>\n\n    <blockquote>\n\n    <p> A load curve allows for the specification of time-dependent boundary conditions. The load curve is defined as a list of time and factor pairs:\n        <ul>\n            <li>t<sub>i</sub> The time value\n            <li>v<sub>i</sub> The load factor\n        </ul>\n\n    <p><b><i>name</i></b> - A descriptive load curve name (string, default=null). <b>name</b> is not used in the derived control file. A unique id for each specific load curve is generated underneath the cover of the web interface. While providing a descriptive name is not required, these descriptive names clearly increase usability.</p>\n\n    <p><b><i>time and factor pairs</i></b> -\n       <blockquote>\n          t<sub>1</sub>, v<sub>1</sub><br>\n          t<sub>2</sub>, v<sub>2</sub><br>\n          ï¿¼t<sub>3</sub>, v<sub>3</sub><br>\n          ...<br>\n          t<sub>Npts</sub>, v<sub>Npts</sub><br>\n       </blockquote>\n       </blockquote>",e.help["velocitydirichlet.amplitude"]="<p><b><i>amplitude</i></b> - The vector values of the velocity boundary condition, <b>amplitude</b> (3 x float, required).",e.help["variables.html"]="<h2>Variables</h2>\n\n	<p>Hydra relies on output delegates to provide a rich suite of field and time-history output for visualization and post-simulation analysis.\n\n    <p>At run-time, a complete list of registered output delegates is provided so the user may select the appropriate output for field, statistical and time-history data. Requested output variables that are not available for a specific analysis are identified with a warning message.\n\n    <h3>Instantaneous Field Output</h3>\n\n	<p>Instantaneous field output may be requested at element, node or surface centering.\n\n<p><b><i>cfl</i></b> - (Element) Courant-Friedrichs-Levy number\n<p><b><i>density</i></b> - (Element, Node) Fluid density\n<p><b><i>dist</i></b> - (Element, Node) Normal distance from no-slip/no-penetration surfaces\n<p><b><i>div</i></b> - (Element) Velocity divergence (&nabla; &sdot; v)\n<p><b><i>enthalpy</i></b> - (Element, Node) Fluid specific enthalpy\n<p><b><i>enstrophy</i></b> - (Element, Node) Enstrophy (&omega; &sdot; &omega;/2)\n<p><b><i>helicity</i></b> - (Element, Node) Helicity (v &sdot; &omega;)\n<p><b><i>pressure</i></b> - (Element, Node) Fluid pressure\n<p><b><i>procid</i></b> - (Element, Node) Processor Id (MPI Rank)\n<p><b><i>temp</i></b> - (Element, Node) Fluid temperature\n<p><b><i>turbeps</i></b> - (Element, Node) Turbulent kinetic energy dissipation rate, (&epsilon;)\n<p><b><i>turbke</i></b> - (Element, Node) Turbulent kinetic energy (k)\n<p><b><i>turbnu</i></b> - (Element, Node) Turbulent eddy viscosity\n<p><b><i>u</i></b> - (Node) Nodal displacement vector for ALE computations\n<p><b><i>vel</i></b> - (Element, Node) Fluid velocity vector\n<p><b><i>vginv2</i></b> - (Element, Node) Q-criteria, i.e., 2nd invariant of velocity gradient\n<p><b><i>vorticity</i></b> - (Element, Node) Vorticity, i.e., curl of velocity (&nabla; x v)\n<p><b><i>ystar</i></b> - (Element) y<sup>*</sup> non-dimensional distance from walls\n<hr>\n<p><b><i>traction</i></b> - (Face) Traction force vector\n<p><b><i>straction</i></b> - (Face) Shear traction force vector\n<p><b><i>ntraction</i></b> - (Face) Normal traction force vector\n<p><b><i>wallshear</i></b> - (Face) Wall shear force\n<p><b><i>yplus</i></b> - (Face) y<sup>+</sup> at a wall\n<p><b><i>ystar</i></b> - (Face) y<sup>*</sup> at a wall\n<p><b><i>varyplus</i></b> - (Face) Spatial variation of y<sup>+</sup> at a wall\n<p><b><i>heatflux</i></b> - (Face) Heat flux vector at a wall\n<p><b><i>nheatflux</i></b> - (Face) Normal heat flux at a wall\n<p><b><i>surfarea</i></b> - (Face) Surface area (of each cell) at a wall\n\n    <h3>Statistics Output</h3>\n\n	<p>Statistics field output may be requested at element, node or surface centering. Statistics output requests should be used in conjunction with the statistics - end keyword block\n\n<p><b><i>&lt;density&gt;</i></b> - (Element, Node, Face) Mean density\n<p><b><i>&lt;pressure&gt;</i></b> - (Element, Node, Face) Mean pressure\n<p><b><i>&lt;velocity&gt;</i></b> - (Element, Node, Face) Mean velocity vector\n<p><b><i>&lt;temperature&gt;</i></b> - (Element, Node, Face) Mean temperature\n<hr>\n<p><b><i>&lt;enstrophy&gt;</i></b> - (Element, Node) Mean enstrophy\n<p><b><i>&lt;helicity&gt;</i></b> - (Element, Node) Mean helicity\n<p><b><i>&lt;vorticity&gt;</i></b> - (Element, Node) Mean vorticity\n<p><b><i>&lt;turbnu&gt;</i></b> - (Element) Mean turbulent viscosity\n<hr>\n<p><b><i>&lt;heatflux&gt;</i></b> - (Face) Mean heat flux vector\n<p><b><i>&lt;straction&gt;</i></b> - (Face) Mean shear traction force vector\n<p><b><i>&lt;ntraction&gt;</i></b> - (Face) Mean normal traction force vector\n<p><b><i>&lt;traction&gt;</i></b> - (Face) Mean traction force vector\n<p><b><i>&lt;wallshear&gt;</i></b> - (Face) Mean wall shear force\n<hr>\n<p><b><i>&lt;pressure', pressure'&gt;</i></b> - (Element, Node, Face) Pressure variance\n<p><b><i>&lt;temp', temp'&gt;</i></b> - (Element, Node, Face) Temperature variance\n<p><b><i>&lt;density', pressure'&gt;</i></b> - (Element, Node, Face) Density-pressure covariance\n<p><b><i>&lt;pressure', velocity'&gt;</i></b> - (Element, Node) Pressure-velocity covariance\n<p><b><i>rms-pressure</i></b> - (Element, Node, Face) Root-Mean-Square pressure\n<p><b><i>rms-temp</i></b> - (Element, Node, Face) Root-Mean-Square temperature\n<p><b><i>tke</i></b> - (Element, Node) Turbulent kinetic energy\n<p><b><i>reynoldsstress</i></b> - (Element, Node) Reynolds stress tensor\n\n   <h3>Time-History Output</h3>\n\n<p><b><i>&lt;density&gt;</i></b> - (Element) Mean density\n<p><b><i>density</i></b> - (Element) Fluid density\n<p><b><i>div</i></b> - (Element) Velocity divergence (&nabla; &sdot; v)\n<p><b><i>enstrophy</i></b> - (Element) Enstrophy, i.e., square of vorticity\n<p><b><i>enthalpy</i></b> - (Element) Fluid specific enthalpy\n<p><b><i>helicity</i></b> - (Element) Helicity, i.e., dot product of velocity and vorticity\n<p><b><i>pressure</i></b> - (Element) Fluid pressure\n<p><b><i>temp</i></b> - (Element) Fluid temperature\n<p><b><i>turbeps</i></b> - (Element) Turbulent dissipation rate (&epsilon;)\n<p><b><i>turbke</i></b> - (Element) Turbulent kinetic energy (k)\n<p><b><i>turbnu</i></b> - (Element) Turbulent eddy viscosity\n<p><b><i>vel</i></b> - (Element) Fluid velocity vector\n<p><b><i>vorticity</i></b> - (Element) Vorticity, i.e., curl of velocity (&nabla; x v)\n<hr>\n<p><b><i>avgpress</i></b> - (Surface) Average pressure for a surface\n<p><b><i>avgtemp</i></b> - (Surface) Average temperature for a surface\n<p><b><i>avgvel</i></b> - (Surface) Average velocity vector for a surface\n<p><b><i>force</i></b> - (Surface) Integral force acting on a surface\n<p><b><i>fvol</i></b> - (Surface) Integrated volume of fluid that has crossed a surface\n<p><b><i>heatflow</i></b> - (Surface) Heat flow rate crossing a surface\n<p><b><i>massflow</i></b> - (Surface) Mass flow rate crossing a surface\n<p><b><i>pressforce</i></b> - (Surface) Integral pressure force acting on a surface\n<p><b><i>surfarea</i></b> - (Surface) Surface area\n<p><b><i>viscforce</i></b> - (Surface) Integral viscous shear force acting on a surface\n<p><b><i>volumeflow</i></b> - (Surface) Volume flow rate crossing a surface\n",e.help["user-definedvelocity.setids"]="<p><b><i>setids</i></b> - One (or more) side-set(s) on which the boundary condition will be applied, <b>setId</b> (integer, required).",e.help["turbulencestatistics.svariables"]="<p><b><i>Face Variables</i></b> - Face variables that specifies plot output for statistics data.\n\n    <ul>\n<li><b><i>&lt;density&gt;</i></b> - Mean density\n<li><b><i>&lt;pressure&gt;</i></b> - Mean pressure\n<li><b><i>&lt;velocity&gt;</i></b> - Mean velocity vector\n<li><b><i>&lt;temperature&gt;</i></b> - Mean temperature\n<li><b><i>&lt;heatflux&gt;</i></b> - Mean heat flux vector\n<li><b><i>&lt;straction&gt;</i></b> - Mean shear traction force vector\n<li><b><i>&lt;ntraction&gt;</i></b> - Mean normal traction force vector\n<li><b><i>&lt;traction&gt;</i></b> - Mean traction force vector\n<li><b><i>&lt;wallshear&gt;</i></b> - Mean wall shear force\n<li><b><i>&lt;pressure', pressure'&gt;</i></b> - Pressure variance\n<li><b><i>&lt;temp', temp'&gt;</i></b> - Temperature variance\n<li><b><i>&lt;density', pressure'&gt;</i></b> - Density-pressure covariance\n<li><b><i>rms-pressure</i></b> - Root-Mean-Square pressure\n<li><b><i>rms-temp</i></b> - Root-Mean-Square temperature\n    </ul>",e.help["turbulencestatistics.starttime"]="<p><b><i>starttime</i></b> - Start time for collecting statistics, t<sub>start</sub> (float, default=0.0).",e.help["turbulencestatistics.plotwinsize"]="<p><b><i>plotwinsize</i></b> - Time window size for output of field statistics, size (float, default=0.1).",e.help["turbulencestatistics.nvariables"]="<p><b><i>Node Variables</i></b> - Node variables that specifies plot output for statistics data.\n\n    <ul>\n<li><b><i>&lt;density&gt;</i></b> - Mean density\n<li><b><i>&lt;pressure&gt;</i></b> - Mean pressure\n<li><b><i>&lt;velocity&gt;</i></b> - Mean velocity vector\n<li><b><i>&lt;temperature&gt;</i></b> - Mean temperature\n<li><b><i>&lt;enstrophy&gt;</i></b> - Mean enstrophy\n<li><b><i>&lt;helicity&gt;</i></b> - Mean helicity\n<li><b><i>&lt;vorticity&gt;</i></b> - Mean vorticity\n<li><b><i>&lt;pressure', pressure'&gt;</i></b> - Pressure variance\n<li><b><i>&lt;temp', temp'&gt;</i></b> - Temperature variance\n<li><b><i>&lt;density', pressure'&gt;</i></b> - Density-pressure covariance\n<li><b><i>&lt;pressure', velocity'&gt;</i></b> - Pressure-velocity covariance\n<li><b><i>rms-pressure</i></b> - Root-Mean-Square pressure\n<li><b><i>rms-temp</i></b> - Root-Mean-Square temperature\n<li><b><i>tke</i></b> - Turbulent kinetic energy\n<li><b><i>reynoldsstress</i></b> - Reynolds stress tensor\n    </ul>",e.help["turbulencestatistics.evariables"]="<p><b><i>Element Variables</i></b> - Element variables that specifies plot output for statistics data.\n\n    <ul>\n<li><b><i>&lt;density&gt;</i></b> - Mean density\n<li><b><i>&lt;pressure&gt;</i></b> - Mean pressure\n<li><b><i>&lt;velocity&gt;</i></b> - Mean velocity vector\n<li><b><i>&lt;temperature&gt;</i></b> - Mean temperature\n<li><b><i>&lt;enstrophy&gt;</i></b> - Mean enstrophy\n<li><b><i>&lt;helicity&gt;</i></b> - Mean helicity\n<li><b><i>&lt;vorticity&gt;</i></b> - Mean vorticity\n<li><b><i>&lt;turbnu&gt;</i></b> - Mean turbulent viscosity\n<li><b><i>&lt;pressure', pressure'&gt;</i></b> - Pressure variance\n<li><b><i>&lt;temp', temp'&gt;</i></b> - Temperature variance\n<li><b><i>&lt;density', pressure'&gt;</i></b> - Density-pressure covariance\n<li><b><i>&lt;pressure', velocity'&gt;</i></b> - Pressure-velocity covariance\n<li><b><i>rms-pressure</i></b> - Root-Mean-Square pressure\n<li><b><i>rms-temp</i></b> - Root-Mean-Square temperature\n<li><b><i>tke</i></b> - Turbulent kinetic energy\n<li><b><i>reynoldsstress</i></b> - Reynolds stress tensor\n    </ul>",e.help["turbulencestatistics.endtime"]="<p><b><i>endtime</i></b> - End time for collecting statistics, t<sub>end</sub> (float, default=1.0).",e.help["turbulence.turbulence"]="<p><b><i>turbulence</i></b> - The turbulence model (string, default=No Turbulence Model). The <b>turbulence</b> must be one of the following:\n                             <ul>\n                                 <li><b>No Turbulence Model</b> - No explicit turbulence model is used,\n                                 <li><b>RNG k-e Model</b> - Activate the RNG k-&epsilon; model,\n                                 <li><b>Smagorinsky Subgrid-Scale Model</b> - Use the Smagorinsky subgrid-scale model, or\n                                 <li><b>Wall-Adapted Large Eddy Subgrid-Scale Model</b> - Use the wall-adapted large eddy subgrid-scale model.\n                             </ul>",e.help["turbulence.tmodel"]="   <p><b><i>tmodel</i></b> - The turbulence model (string, default=No Turbulence Model). The <b>tmodel</b> must be one of the following:\n                             <ul>\n                                 <li><b>No Turbulence Model</b> - No explicit turbulence model is used,\n                                 <li><b>Spalart-Allmaras Model</b> - Activate the Spalart-Allmaras model,\n                                 <li><b>Detached-Eddy Spalart-Allmaras Model</b> - Activate the detached-eddy model based on Spalart-Allmaras,\n                                 <li><b>Smagorinsky Subgrid-Scale Model</b> - Use the Smagorinsky subgrid-scale model,\n                                 <li><b>Wall-Adapted Large Eddy Subgrid-Scale Model</b> - Use the wall-adapted large eddy subgrid-scale model,\n                                 <li><b>RNG k-e Model</b> - Activate the RNG k-&epsilon; model,\n                                 <li><b>SST k-w Model</b> - Activate the SST k-&omega; model (under development),\n                                 <li><b>ksgs Subgrid-Scale Model</b> - Use the k<sub>sgs</sub> subgrid-scale model (under development), or\n                                 <li><b>LDKM ksgs Subgrid-Scale Model</b> - Use the LDKM ksgs subgrid-scale model (under development).\n                             </ul>",e.help["turbulence.name"]="<p><b><i>name</i></b> - A descriptive turbulence model name (string, default=null). <b>name</b> is not used in the derived control file. A unique id for each specific turbulence model is generated underneath the cover of the web interface. While providing a descriptive name is not required, these descriptive names clearly increase usability.</p>",e.help["turbulence.html"]="<h2>Turbulence</h2>\n\n	<p>There are two ways to activate turbulence models. The first, <b>turbulence model</b>, presents a simplified way to specify a turbulence model, but does not permit the specification of any optional parameters for the model. All default values are used for the model parameter. The second approach, <b>turbulence</b>, permits the specification of optional parameters for a turbulence model.\n\n\n    <h3>Turbulence Model</h3>\n\n	<p>The turbulence model activates and selects the specific turbulence model. Default turbulence model parameters are used. The default turbulence model parameters are presented in the theoretical discussion for each turbulence model in the Hydra-TH theory manual.\n\n	<p><b><i>name</i></b> - A descriptive turbulence model name (string, default=null). <b>name</b> is not used in the derived control file. A unique id for each specific turbulence model is generated underneath the cover of the web interface. While providing a descriptive name is not required, these descriptive names clearly increase usability.</p>\n\n    <p><b><i>tmodel</i></b> - The turbulence model (string, default=No Turbulence Model). The <b>tmodel</b> must be one of the following:\n                             <ul>\n                                 <li><b>No Turbulence Model</b> - No explicit turbulence model is used,\n                                 <li><b>Spalart-Allmaras Model</b> - Activate the Spalart-Allmaras model,\n                                 <li><b>Detached-Eddy Spalart-Allmaras Model</b> - Activate the detached-eddy model based on Spalart-Allmaras,\n                                 <li><b>Smagorinsky Subgrid-Scale Model</b> - Use the Smagorinsky subgrid-scale model,\n                                 <li><b>Wall-Adapted Large Eddy Subgrid-Scale Model</b> - Use the wall-adapted large eddy subgrid-scale model,\n                                 <li><b>RNG k-e Model</b> - Activate the RNG k-&epsilon; model,\n                                 <li><b>SST k-w Model</b> - Activate the SST k-&omega; model (under development),\n                                 <li><b>ksgs Subgrid-Scale Model</b> - Use the k<sub>sgs</sub> subgrid-scale model (under development), or\n                                 <li><b>LDKM ksgs Subgrid-Scale Model</b> - Use the LDKM ksgs subgrid-scale model (under development).\n                             </ul>\n\n    <p> Turbulence activates and selects the specific turbulence model. It allows the end-user to specify model-specific parameters. At this time, only selected turbulence models and model-specific parameters may be specified.\n\n    <p><b><i>turbulence</i></b> - The turbulence model (string, default=No Turbulence Model). The <b>turbulence</b> must be one of the following:\n                             <ul>\n                                 <li><b>No Turbulence Model</b> - No explicit turbulence model is used,\n                                 <li><b>RNG k-e Model</b> - Activate the RNG k-&epsilon; model,\n                                 <li><b>Smagorinsky Subgrid-Scale Model</b> - Use the Smagorinsky subgrid-scale model, or\n                                 <li><b>Wall-Adapted Large Eddy Subgrid-Scale Model</b> - Use the wall-adapted large eddy subgrid-scale model.\n                             </ul>\n\n    <h3>Turbulence RNG k-&epsilon;</h3>\n\n    <p>Presents the RNG k-&epsilon; model-specific parameters.\n\n    <p><b><i>timescale_limiter</i></b> - Enable/disable time-scale limiting to control the over-production of turbulent kinetic energy in stagnation flows, <b>timescale_limiter</b> (string, default=off).\n\n        <ul>\n            <li>on - Enable time-scale limiter, or\n            <li>off - Disable time-scale limiter.\n        </ul>\n\n    <h3>Turbulence Smagorinsky</h3>\n\n    <p>Presents the Smagorinsky model-specific parameters.\n\n    <p><b><i>c_s</i></b> - Smagorinsky model constant, <b>C<sub>s</sub></b> (float, default=0.18).\n\n    <p><b><i>prandtl</i></b> - Turbulent Prandtl number, <b>P<sub>r<sub>t</sub></sub></b> (float, default=0.8889).\n\n    <p><b><i>schmidt</i></b> - Turbulent Schmidt number, <b>S<sub>c<sub>t</sub></sub></b> (float, default=1.0).\n\n    <h3>Turbulence Wall-Adapted Large Eddy</h3>\n\n    <p>Presents the Smagorinsky model-specific parameters.\n\n    <p><b><i>c_w</i></b> - WALE model constant, <b>C<sub>w</sub></b> (float, default=0.5).\n\n    <p><b><i>prandtl</i></b> - Turbulent Prandtl number, <b>P<sub>r<sub>t</sub></sub></b> (float, default=0.8889).\n\n    <p><b><i>schmidt</i></b> - Turbulent Schmidt number, <b>S<sub>c<sub>t</sub></sub></b> (float, default=1.0).\n",e.help["turbulence-wale.schmidt"]="<p><b><i>schmidt</i></b> - Turbulent Schmidt number, <b>S<sub>c<sub>t</sub></sub></b> (float, default=1.0).",e.help["turbulence-wale.prandtl"]="<p><b><i>prandtl</i></b> - Turbulent Prandtl number, <b>P<sub>r<sub>t</sub></sub></b> (float, default=0.8889).",e.help["turbulence-wale.c_w"]="<p><b><i>c_w</i></b> - WALE model constant, <b>C<sub>w</sub></b> (float, default=0.5).",e.help["turbulence-rng_ke.timescale_limiter"]="<p><b><i>timescale_limiter</i></b> - Enable/disable time-scale limiting to control the over-production of turbulent kinetic energy in stagnation flows, <b>timescale_limiter</b> (string, default=off).\n\n        <ul>\n            <li>on - Enable time-scale limiter, or\n            <li>off - Disable time-scale limiter.\n        </ul>",e.help["tubulence-smagorinsky.schmidt"]="<p><b><i>schmidt</i></b> - Turbulent Schmidt number, <b>S<sub>c<sub>t</sub></sub></b> (float, default=1.0).",e.help["tubulence-smagorinsky.prandtl"]="<p><b><i>prandtl</i></b> - Turbulent Prandtl number, <b>P<sub>r<sub>t</sub></sub></b> (float, default=0.8889).",e.help["tubulence-smagorinsky.c_s"]="<p><b><i>c_s</i></b> - Smagorinsky model constant, <b>C<sub>s</sub></b> (float, default=0.18).",e.help["transportsolver.type"]="<p><b><i>type</i></b> - Specifies the preconditioner - Krylov solver combination, <b>type</b> (string, default=FGMRES). Values can be one of the following:\n                             <ul>\n                                 <li><b>FGMRES</b> - Flexible generalized minimum residual method,\n                                 <li><b>ILUFGMRES</b> - ILU-preconditoned FGMRES,\n                                 <li><b>GMRES</b> - Generalized minimum residual method, or\n                                 <li><b>ILUGMRES</b> - ILU-preconditioned GMRES.\n                             </ul>",e.help["transportsolver.nrestart"]="<p><b><i>nrestart</i></b> - Specifies the number of restart vectors used with GMRES/FGMRES, <b>N<sub>restart</sub></b> (int, default=30).",e.help["transportsolver.nitmax"]="<p><b><i>nitmax</i></b> - Set the maximum number of iterations, <b>N<sub>itmax</sub></b> (int, default=500).",e.help["transportsolver.nitchk"]="<p><b><i>nitchk</i></b> - Set the number of iterations to take before checking convergence criteria, <b>N<sub>itchk</sub></b> (int, default=2).",e.help["transportsolver.html"]="<h2>Transport Solver</h2>\n\n	<p>Define the attributes of the solver used for auxiliary transport equations. This includes the energy equation, and transport equations associated with turbulence models.\n\n    <p><b><i>type</i></b> - Specifies the preconditioner - Krylov solver combination, <b>type</b> (string, default=FGMRES). Values can be one of the following:\n                             <ul>\n                                 <li><b>FGMRES</b> - Flexible generalized minimum residual method,\n                                 <li><b>ILUFGMRES</b> - ILU-preconditoned FGMRES,\n                                 <li><b>GMRES</b> - Generalized minimum residual method, or\n                                 <li><b>ILUGMRES</b> - ILU-preconditioned GMRES.\n                             </ul>\n\n    <p><b><i>nrestart</i></b> - Specifies the number of restart vectors used with GMRES/FGMRES, <b>N<sub>restart</sub></b> (int, default=30).\n\n    <p><b><i>nitmax</i></b> - Set the maximum number of iterations, <b>N<sub>itmax</sub></b> (int, default=500).\n\n    <p><b><i>nitchk</i></b> - Set the number of iterations to take before checking convergence criteria, <b>N<sub>itchk</sub></b> (int, default=2).\n\n    <p><b><i>eps</i></b> - Define the convergence criteria for linear solver, <b>&epsilon;</b> (float, default=1.0E-5).\n\n    <p><b><i>convergence</i></b> - Enable/disable the convergence metrics for the linear solver, <b>convergence</b> (string, default=Off).\n                             <ul>\n                                 <li><b>On</b> - Activate convergence output, or\n                                 <li><b>Off</b> - Suppress convergence output.\n                             </ul>\n\n    <p><b><i>diagnostics</i></b> - Enable/disable the diagnostic information from the linear solver, <b>diagnostics</b> (string, default=Off).\n                             <ul>\n                                 <li><b>On</b> - Activate diagnostic output, or\n                                 <li><b>Off</b> - Suppress diagnostic output.\n                             </ul>\n",e.help["transportsolver.eps"]="<p><b><i>eps</i></b> - Define the convergence criteria for linear solver, <b>&epsilon;</b> (float, default=1.0E-5).",e.help["transportsolver.diagnostics"]="<p><b><i>diagnostics</i></b> - Enable/disable the diagnostic information from the linear solver, <b>diagnostics</b> (string, default=Off).\n                             <ul>\n                                 <li><b>On</b> - Activate diagnostic output, or\n                                 <li><b>Off</b> - Suppress diagnostic output.\n                             </ul>",e.help["transportsolver.convergence"]="<p><b><i>convergence</i></b> - Enable/disable the convergence metrics for the linear solver, <b>convergence</b> (string, default=Off).\n                             <ul>\n                                 <li><b>On</b> - Activate convergence output, or\n                                 <li><b>Off</b> - Suppress convergence output.\n                             </ul>",e.help["timeintegration.type"]="<p><b><i>type</i></b> - Specifies the time-step control method, <b>type</b> (string, default=fixed_cfl). Valid values are the following:\n                             <ul>\n                                 <li><b>fixed_cfl</b> - Sets the time-step based on a fixed maximum CFL condition using <b>CFL<sub>max</sub></b>, or\n                                 <li><b>fixed_dt</b> - Uses a fixed time-step based on <b>&Delta;t<sub>max</sub></b>.\n                             </ul>\n\n<p><b>Note</b>: The fixed CFL time-step control uses the initial velocity field and with the initial CFL number <b>CFL<sub>0</sub></b> to estimate the time-step. For all subsequent time-steps, <b>CFL<sub>max</sub></b> is used estimate the time-step. When the time-step can increase based on <b>CFL<sub>max</sub></b>, the growth is based on the time-step scale factor <b>&alpha;</b>. An upper bound on the time-step is set with <b>&Delta;t<sub>max</sub></b>.",e.help["timeintegration.trimlast"]="<p><b><i>trimlast</i></b> - Enable/disable the use of an exact termination time, i.e., trimming the last time step to achieve an exact termination time,  <b>trimlast</b> (string, default=off).",e.help["timeintegration.thetaK"]="<p><b><i>thetaK</i></b> - Time-weight for the viscous/diffusive terms, <b>&Theta;K</b> (float, default=0.5). By default, the time-weight uses a second-order centering in time. For an explicit treatment, <b>&Theta;K</b>=0.0, and for an implicit treatment, <b>&Theta;K</b>=1.0.",e.help["timeintegration.thetaF"]="<p><b><i>thetaF</i></b> - Time-weight for source terms, <b>&Theta;F</b> (float, default=0.5). By default, the time-weight uses a second-order centering in time. For an explicit treatment, <b>&Theta;F</b>=0.0, and for an implicit treatment, <b>&Theta;F</b>=1.0.",e.help["timeintegration.thetaA"]="<p><b><i>thetaA</i></b> - Time-weight for the advective terms, <b>&Theta;A</b> (float, default=0.5). By default, the time-weight uses a second-order centering in time. For explicit advection, <b>&Theta;A</b>=0.0, and for an implicit treatment, <b>&Theta;A</b>=1.0.",e.help["timeintegration.dtscale"]="<p><b><i>dtscale</i></b> - Factor used to increase the time-step with the fixed CFL time-step control, <b>&alpha;</b> (float, default=1.025).",e.help["timeintegration.dtmax"]="<p><b><i>dtmax</i></b> - Set the maximum time step that can be used with the fixed CFL time-step control, <b>&Delta;t<sub>max</sub></b> (float, default=1.0).",e.help["timeintegration.CFLmax"]="<p><b><i>CFLmax</i></b> - Set the maximum CFL number to use with the fixed CFL time-step control, <b>CFL<sub>max</sub></b> (float, default=2.0).",e.help["timeintegration.CFLinit"]="<p><b><i>CFLinit</i></b> - Specifies the initial CFL number to use at startup with the fixed CFL time-step control, <b>CFL<sub>0</sub></b> (float, default=1.0). The initial CFL number may not exceed <b>CFL<sub>0</sub></b>=100.",e.help["timehistory.svariables"]="<p><b><i>Surface Variables</i></b> - Face variables that specifies plot output for statistics data.\n\n    <ul>\n<li><b><i>avgpress</i></b> - Average pressure for a surface\n<li><b><i>avgtemp</i></b> - Average temperature for a surface\n<li><b><i>avgvel</i></b> - Average velocity vector for a surface\n<li><b><i>force</i></b> - Integral force acting on a surface\n<li><b><i>fvol</i></b> - Integrated volume of fluid that has crossed a surface\n<li><b><i>heatflow</i></b> - Heat flow rate crossing a surface\n<li><b><i>massflow</i></b> - Mass flow rate crossing a surface\n<li><b><i>pressforce</i></b> - Integral pressure force acting on a surface\n<li><b><i>surfarea</i></b> - Surface area\n<li><b><i>viscforce</i></b> - Integral viscous shear force acting on a surface\n<li><b><i>volumeflow</i></b> - Volume flow rate crossing a surface\n    </ul>",e.help["timehistory.surfaceid"]="<p><b><i>surfaceid</i></b> - Surface ID (integer, required).",e.help["timehistory.nstep"]="<p><b><i>nstep</i></b> - Output Time-History data every N<sub>step</sub> (integer, default=1) time steps.",e.help["timehistory.evariables"]="    <p><b><i>Element Variables</i></b> - Element variables that specifies plot output for statistics data.\n\n    <ul>\n<li><b><i>&lt;density&gt;</i></b> - Mean density\n<li><b><i>density</i></b> - Fluid density\n<li><b><i>div</i></b> - Velocity divergence (&nabla; &sdot; v)\n<li><b><i>enstrophy</i></b> - Enstrophy, i.e., square of vorticity\n<li><b><i>enthalpy</i></b> -  Fluid specific enthalpy\n<li><b><i>helicity</i></b> - Helicity, i.e., dot product of velocity and vorticity\n<li><b><i>pressure</i></b> - Fluid pressure\n<li><b><i>temp</i></b> - Fluid temperature\n<li><b><i>turbeps</i></b> - Turbulent dissipation rate (&epsilon;)\n<li><b><i>turbke</i></b> - Turbulent kinetic energy (k)\n<li><b><i>turbnu</i></b> - Turbulent eddy viscosity\n<li><b><i>vel</i></b> - Fluid velocity vector\n<li><b><i>vorticity</i></b> - Vorticity, i.e., curl of velocity (&nabla; x v)\n    </ul>",e.help["timehistory.elementid"]="<p><b><i>elementid</i></b> - Element ID (integer, required).",e.help["time.term"]="<p><b><i>term</i></b> - Maximum number of time steps to take, <b>T<sub>f</sub></b> (float, default=1.0).\n\n    <p><b>Note</b>: The termination time, in units consistent with the problem definition. <b>T<sub>f</sub></b> and <b>n<sub>step</sub></b> both affect the the length of simulated time in Hydra. If the number of time steps specified using <b>n<sub>step</sub></b> would yield a simulation time greater than the termination time, the number of time steps is reduced to terminate the calculation according to <b>T<sub>f</sub></b>. Thus, <b>T<sub>f</sub></b> places a ceiling on the simulation termination time regardless of how many time steps have been specified by the <b>n<sub>step</sub></b>.",e.help["time.nstep"]="<p><b><i>nstep</i></b> - Maximum number of time steps to take, <b>n<sub>step</sub></b> (integer, default=10) time steps.",e.help["time.html"]="<h2>Time</h2>\n\n	<p>Set/modify the parameters associated with the time step and the associated time integration methods. For some physics, more extensive time-step control options are available in addition to or in lieu of the basic control provided here.\n\n	<p><b><i>nstep</i></b> - Maximum number of time steps to take, <b>n<sub>step</sub></b> (integer, default=10) time steps.\n\n	<p><b><i>term</i></b> - Maximum number of time steps to take, <b>T<sub>f</sub></b> (float, default=1.0).\n\n	<p><b>Note</b>: The termination time, in units consistent with the problem definition. <b>T<sub>f</sub></b> and <b>n<sub>step</sub></b> both affect the the length of simulated time in Hydra. If the number of time steps specified using <b>n<sub>step</sub></b> would yield a simulation time greater than the termination time, the number of time steps is reduced to terminate the calculation according to <b>T<sub>f</sub></b>. Thus, <b>T<sub>f</sub></b> places a ceiling on the simulation termination time regardless of how many time steps have been specified by the <b>n<sub>step</sub></b>.\n\n	<p><b><i>deltat</i></b> - The time step value, <b>&Delta;t</b> (float, default=0.01).\n\n	<p><b>Note</b>: <b>&Delta;t</b> may be over-ridden by physics specific constraints on the time step.\n\n	<h3>Time Integration</h3>\n\n	<p>Define the attributes of the time-integration method used to solve the Navier-Stokes equations. The time-step control may be either fixed time-step or using a time-step based on a fixed CFL condition.\n\n    <p><b><i>type</i></b> - Specifies the time-step control method, <b>type</b> (string, default=fixed_cfl). Valid values are the following:\n                             <ul>\n                                 <li><b>fixed_cfl</b> - Sets the time-step based on a fixed maximum CFL condition using <b>CFL<sub>max</sub></b>, or\n                                 <li><b>fixed_dt</b> - Uses a fixed time-step based on <b>&Delta;t<sub>max</sub></b>.\n                             </ul>\n\n    <p><b>Note</b>: The fixed CFL time-step control uses the initial velocity field and with the initial CFL number <b>CFL<sub>0</sub></b> to estimate the time-step. For all subsequent time-steps, <b>CFL<sub>max</sub></b> is used estimate the time-step. When the time-step can increase based on <b>CFL<sub>max</sub></b>, the growth is based on the time-step scale factor <b>&alpha;</b>. An upper bound on the time-step is set with <b>&Delta;t<sub>max</sub></b>.\n\n    <p><b><i>CFLinit</i></b> - Specifies the initial CFL number to use at startup with the fixed CFL time-step control, <b>CFL<sub>0</sub></b> (float, default=1.0). The initial CFL number may not exceed <b>CFL<sub>0</sub></b>=100.\n\n    <p><b><i>CFLmax</i></b> - Set the maximum CFL number to use with the fixed CFL time-step control, <b>CFL<sub>max</sub></b> (float, default=2.0).\n\n    <p><b><i>dtmax</i></b> - Set the maximum time step that can be used with the fixed CFL time-step control, <b>&Delta;t<sub>max</sub></b> (float, default=1.0).\n\n    <p><b><i>dtscale</i></b> - Factor used to increase the time-step with the fixed CFL time-step control, <b>&alpha;</b> (float, default=1.025).\n\n    <p><b><i>thetaA</i></b> - Time-weight for the advective terms, <b>&Theta;A</b> (float, default=0.5). By default, the time-weight uses a second-order centering in time. For explicit advection, <b>&Theta;A</b>=0.0, and for an implicit treatment, <b>&Theta;A</b>=1.0.\n\n    <p><b><i>thetaK</i></b> - Time-weight for the viscous/diffusive terms, <b>&Theta;K</b> (float, default=0.5). By default, the time-weight uses a second-order centering in time. For an explicit treatment, <b>&Theta;K</b>=0.0, and for an implicit treatment, <b>&Theta;K</b>=1.0.\n\n    <p><b><i>thetaF</i></b> - Time-weight for source terms, <b>&Theta;F</b> (float, default=0.5). By default, the time-weight uses a second-order centering in time. For an explicit treatment, <b>&Theta;F</b>=0.0, and for an implicit treatment, <b>&Theta;F</b>=1.0.\n\n    <p><b><i>trimlast</i></b> - Enable/disable the use of an exact termination time, i.e., trimming the last time step to achieve an exact termination time,  <b>trimlast</b> (string, default=off).\n",e.help["time.deltat"]="<p><b><i>deltat</i></b> - The time step value, <b>&Delta;t</b> (float, default=0.01).\n\n    <p><b>Note</b>: <b>&Delta;t</b> may be over-ridden by physics specific constraints on the time step.",e.help["symmetrydirichlet.setids"]="<p><b><i>setids</i></b> - One (or more) side-set(s) on which the boundary condition will be applied, <b>setId</b> (integer, required).",e.help["symmetrydirichlet.load_curve"]="    <p><b><i>load_curve</i></b>\n\n    <blockquote>\n\n    <p> A load curve allows for the specification of time-dependent boundary conditions. The load curve is defined as a list of time and factor pairs:\n        <ul>\n            <li>t<sub>i</sub> The time value\n            <li>v<sub>i</sub> The load factor\n        </ul>\n\n    <p><b><i>name</i></b> - A descriptive load curve name (string, default=null). <b>name</b> is not used in the derived control file. A unique id for each specific load curve is generated underneath the cover of the web interface. While providing a descriptive name is not required, these descriptive names clearly increase usability.</p>\n\n    <p><b><i>time and factor pairs</i></b> -\n       <blockquote>\n          t<sub>1</sub>, v<sub>1</sub><br>\n          t<sub>2</sub>, v<sub>2</sub><br>\n          ï¿¼t<sub>3</sub>, v<sub>3</sub><br>\n          ...<br>\n          t<sub>Npts</sub>, v<sub>Npts</sub><br>\n       </blockquote>\n       </blockquote>",e.help["symmetrydirichlet.amplitude"]="<p><b><i>amplitude</i></b> - The vector values of the symmetry velocity boundary condition, <b>amplitude</b> (3 x float, required).",e.help["solutionmethod.timestep_control"]="<p><b><i>timestep_control</i></b> - Activate time-step control in conjunction with the non-linear solution strategy, <b>timestep_control</b> (string, default=Off).\n                             <ul>\n                                 <li><b>On</b> - Enable automatic time-step growth/reduction, or\n                                 <li><b>Off</b> - Disable automatic time-step reduction and use a fixed number of iterations per time-step.\n                             </ul>",e.help["solutionmethod.subcycle"]="<p><b><i>subcycle</i></b> - Subcycle the pressure solves, i.e., ignore pressure up-dates if the pressure variable has already converged, <b>subcycle</b> (string, default=Off).\n                             <ul>\n                                 <li><b>On</b> - Enable pressure subcycling, or\n                                 <li><b>Off</b> - Disable pressure subcycling.\n                             </ul>",e.help["solutionmethod.strategy"]="<p><b><i>strategy</i></b> - Specifies the solution method, <b>strategy</b> (string, default=projection). Valid solution methods include:\n                             <ul>\n                                 <li><b>projection</b> - Activates the semi-implicit projection algorithm, or\n                                 <li><b>picard</b> - Activates the fully-implicit, projection-preconditioned, Picard algorithm.\n                             </ul>",e.help["solutionmethod.nvec"]="<p><b><i>nvec</i></b> - Defines the maximum number of vectors used for nonlinear Krylov acceleration (NKA) when using the picard solution method, <b>N<sub>vec</sub></b> (int, default=0).",e.help["solutionmethod.nitmax"]="<p><b><i>nitmax</i></b> - Defines the maximum number of non-linear iterations to be taken during each time step, <b>N<sub>itmax</sub></b> (int, default=5).",e.help["solutionmethod.html"]="<h2>Solution Method</h2>\n\n	<p>Set/modify the parameters associated with the solution strategy and control of non-linear iterations (when appropriate).\n\n    <p><b><i>strategy</i></b> - Specifies the solution method, <b>strategy</b> (string, default=projection). Valid solution methods include:\n                             <ul>\n                                 <li><b>projection</b> - Activates the semi-implicit projection algorithm, or\n                                 <li><b>picard</b> - Activates the fully-implicit, projection-preconditioned, Picard algorithm.\n                             </ul>\n\n    <p><b><i>nitmax</i></b> - Defines the maximum number of non-linear iterations to be taken during each time step, <b>N<sub>itmax</sub></b> (int, default=5).\n\n    <p><b><i>nvec</i></b> - Defines the maximum number of vectors used for nonlinear Krylov acceleration (NKA) when using the picard solution method, <b>N<sub>vec</sub></b> (int, default=0).\n\n    <p><b><i>error_norm</i></b> - When using the picard solution strategy for fully-implicit time integration, this option defines the non-linear convergence norm, <b>error_norm</b> (string, default=composite). Valid options for the error norm include:\n                             <ul>\n                                 <li><b>composite</b> - Composite RMS norm based on Gresho's norm definition, or\n                                 <li><b>max</b> - Use the largest dependent variable maximum norm.\n                             </ul>\n\n    <p><b><i>eps</i></b> - Define the convergence criteria for non-linear solver, <b>&epsilon;</b> (float, default=1.0E-4).\n\n    <p><b><i>eps_dist</i></b> - Convergence criteria for normal-distance function solved during initialization, <b>&epsilon;<sub>dist</sub></b> (float, default=1.0E-5).\n\n    <p><b><i>eps_p0</i></b> - Convergence criteria for initial div-free projection and initial pressure computation performed during initialization, <b>&epsilon;<sub>p0</sub></b> (float, default=1.0E-5).\n\n    <p><b><i>drop_tol</i></b> - Drop tolerance used when adding vectors to the nonlinear Krylov acceleration (NKA) subspace when using the picard solution method, <b>&epsilon;<sub>drop</sub></b> (float, default=1.0E-2).\n\n    <p><b><i>timestep_control</i></b> - Activate time-step control in conjunction with the non-linear solution strategy, <b>timestep_control</b> (string, default=Off).\n                             <ul>\n                                 <li><b>On</b> - Enable automatic time-step growth/reduction, or\n                                 <li><b>Off</b> - Disable automatic time-step reduction and use a fixed number of iterations per time-step.\n                             </ul>\n    <p><b><i>convergence</i></b> - Write information about the non-linear convergence history to the conv file when using the picard solution method, <b>convergence</b> (string, default=Off).\n                             <ul>\n                                 <li><b>On</b> - Enable writing the non-linear convergence history, or\n                                 <li><b>Off</b> - Disable writing the non-linear convergence history.\n                             </ul>\n    <p><b><i>subcycle</i></b> - Subcycle the pressure solves, i.e., ignore pressure up-dates if the pressure variable has already converged, <b>subcycle</b> (string, default=Off).\n                             <ul>\n                                 <li><b>On</b> - Enable pressure subcycling, or\n                                 <li><b>Off</b> - Disable pressure subcycling.\n                             </ul>\n    <p><b><i>diagnostics</i></b> - Write diagnostics information about the non-linear convergence history to the screen when using the picard solution method, <b>diagnostics</b> (string, default=Off).\n                             <ul>\n                                 <li><b>On</b> - Enable writing diagnostics during the non-linear iteration, or\n                                 <li><b>Off</b> - Disable writing diagnostics during the non-linear iteration.\n                             </ul>\n",e.help["solutionmethod.error_norm"]="<p><b><i>error_norm</i></b> - When using the picard solution strategy for fully-implicit time integration, this option defines the non-linear convergence norm, <b>error_norm</b> (string, default=composite). Valid options for the error norm include:\n                             <ul>\n                                 <li><b>composite</b> - Composite RMS norm based on Gresho's norm definition, or\n                                 <li><b>max</b> - Use the largest dependent variable maximum norm.\n                             </ul>",e.help["solutionmethod.eps_dist"]="<p><b><i>eps_dist</i></b> - Convergence criteria for normal-distance function solved during initialization, <b>&epsilon;<sub>dist</sub></b> (float, default=1.0E-5).",e.help["solutionmethod.eps"]="<p><b><i>eps</i></b> - Define the convergence criteria for non-linear solver, <b>&epsilon;</b> (float, default=1.0E-4).",e.help["solutionmethod.drop_tol"]="<p><b><i>drop_tol</i></b> - Drop tolerance used when adding vectors to the nonlinear Krylov acceleration (NKA) subspace when using the picard solution method, <b>&epsilon;<sub>drop</sub></b> (float, default=1.0E-2).",e.help["solutionmethod.diagnostics"]="<p><b><i>diagnostics</i></b> - Write diagnostics information about the non-linear convergence history to the screen when using the picard solution method, <b>diagnostics</b> (string, default=Off).\n                             <ul>\n                                 <li><b>On</b> - Enable writing diagnostics during the non-linear iteration, or\n                                 <li><b>Off</b> - Disable writing diagnostics during the non-linear iteration.\n                             </ul>",e.help["solutionmethod.convergence"]="<p><b><i>convergence</i></b> - Write information about the non-linear convergence history to the conv file when using the picard solution method, <b>convergence</b> (string, default=Off).\n                             <ul>\n                                 <li><b>On</b> - Enable writing the non-linear convergence history, or\n                                 <li><b>Off</b> - Disable writing the non-linear convergence history.\n                             </ul>",e.help["solutionmethid.eps_p0"]="<p><b><i>eps_p0</i></b> - Convergence criteria for initial div-free projection and initial pressure computation performed during initialization, <b>&epsilon;<sub>p0</sub></b> (float, default=1.0E-5).",e.help["scalardirichlet.setids"]="<p><b><i>setids</i></b> - One (or more) side-set(s) on which the boundary condition will be applied, <b>setId</b> (integer, required).",e.help["scalardirichlet.scalar"]="<p><b><i>scalar</i></b> - The scalar (string, default=pressure). The <b>scalar</b> must be one of the following:\n\n                             <ul>\n                                 <li><b><i>Enthalpy</i></b> - a scalar Dirichlet boundary condition for enthalpy, <b>h</b> (aka enthalpybc, ebc, enthalpy).\n                                 <li><b><i>Turbulent Kinetic Energy</i></b>  - a scalar Dirichlet boundary condition for turbulent kinetic energy, <b>k</b> (aka tkebc, tke).\n                                 <li><b><i>Turbulent Dissipation</i></b>   - a scalar Dirichlet boundary condition for turbulent dissipation, <b>&epsilon;</b> (aka epsbc, eps).\n                                 <li><b><i>Distance Function</i></b>   - a scalar Dirichlet boundary condition for distance function (aka distancebc, dist, distance).\n                                 <li><b><i>Hydrodynamic Pressure</i></b>   - a scalar Dirichlet boundary condition for hydrodynamic pressure, <b>p</b> (aka pressurebc, pbc, pressure).\n                                 <li><b><i>Temperature</i></b>   - a scalar Dirichlet boundary condition for temperature, <b>T</b> (aka temperaturebc, tbc, temperature).\n                                 <li><b><i>Turbulent Viscosity</i></b>  - a scalar Dirichlet boundary condition for turbulent viscosity, <b>&upsilon;</b> (aka turbnubc, turbnu).\n                             </ul>",e.help["scalardirichlet.load_curve"]="    <p><b><i>load_curve</i></b>\n\n    <blockquote>\n\n    <p> A load curve allows for the specification of time-dependent boundary conditions. The load curve is defined as a list of time and factor pairs:\n        <ul>\n            <li>t<sub>i</sub> The time value\n            <li>v<sub>i</sub> The load factor\n        </ul>\n\n    <p><b><i>name</i></b> - A descriptive load curve name (string, default=null). <b>name</b> is not used in the derived control file. A unique id for each specific load curve is generated underneath the cover of the web interface. While providing a descriptive name is not required, these descriptive names clearly increase usability.</p>\n\n    <p><b><i>time and factor pairs</i></b> -\n       <blockquote>\n          t<sub>1</sub>, v<sub>1</sub><br>\n          t<sub>2</sub>, v<sub>2</sub><br>\n          ï¿¼t<sub>3</sub>, v<sub>3</sub><br>\n          ...<br>\n          t<sub>Npts</sub>, v<sub>Npts</sub><br>\n       </blockquote>\n       </blockquote>",e.help["scalardirichlet.amplitude"]="<p><b><i>amplitude</i></b> - The scalar value of the boundary condition, <b>amplitude</b> (float, required).",e.help["pressuresolver.type"]="<p><b><i>type</i></b> - Specifies the preconditioner - Krylov solver combination, <b>type</b> (string, default=AMG). Values can be one of the following:\n                             <ul>\n                                 <li><b>AMG</b> - Algebraic multigrid with the conjugate gradient method,\n                                 <li><b>SSORCG</b> - Successive over-relaxation preconditioner with the conjugate gradient method, or\n                                 <li><b>JPCG</b> - Jacobi preconditioner with the conjugate gradient method.\n                             </ul>",e.help["pressuresolver.solver"]="<p><b><i>solver</i></b> - Specifies the underlying Krylov solver to be used with AMG, <b>solver</b> (string, default=CG). Values can be one of the following:\n                             <ul>\n                                 <li><b>CG</b> - Conjugate gradient method,\n                                 <li><b>BCGS</b> - Stabilized bi-conjugate gradient squared method, or\n                                 <li><b>FGMRES</b> - Flexible generalized minimum residual method.\n                             </ul>",e.help["pressuresolver.pre_smooth"]="<p><b><i>pre_smooth</i></b> - Set the number of pre-smoothing sweeps for AMG, <b>pre_smooth</b> (integer, default=1).",e.help["pressuresolver.post_smooth"]="<p><b><i>post_smooth</i></b> - Set the number of post-smoothing sweeps for AMG, <b>pre_smooth</b> (integer, default=1).",e.help["pressuresolver.pivot"]="<p><b><i>pivot</i></b> - Specify the value of a zero pivot for preconditioner, <b>pivot</b> (float, default=1.0E-16).",e.help["pressuresolver.nitmax"]="<p><b><i>nitmax</i></b> - Set the maximum number of iterations, <b>N<sub>itmax</sub></b> (int, default=500). In the case of AMG, this is the maximum number of V or W cycles.",e.help["pressuresolver.nitchk"]="<p><b><i>nitchk</i></b> - Set the number of iterations to take before checking convergence criteria, <b>N<sub>itchk</sub></b> (int, default=2).",e.help["pressuresolver.levels"]="<p><b><i>levels</i></b> - Set the maximum number of AMG levels to use in the multigrid cycle, <b>levels</b> (integer, default=20).",e.help["pressuresolver.hypre_type"]="<p><b><i>hypre_type</i></b> - Specifies the preconditioner sub-package for the Hypre/AMG solver, <b>hypre_type</b> (string, default=BOOMERAMG). Only effective if <b>type</b>=AMG and <b>amgpc</b>=HYPRE. Values can be one of the following:\n                             <ul>\n                                 <li><b>BOOMERAMG</b> - BoomerAMG preconditioner.\n                             </ul>",e.help["pressuresolver.html"]="<h2>Pressure Solver</h2>\n\n	<p>Define the attributes of the pressure-Poisson solver.\n\n    <p><b><i>type</i></b> - Specifies the preconditioner - Krylov solver combination, <b>type</b> (string, default=AMG). Values can be one of the following:\n                             <ul>\n                                 <li><b>AMG</b> - Algebraic multigrid with the conjugate gradient method,\n                                 <li><b>SSORCG</b> - Successive over-relaxation preconditioner with the conjugate gradient method, or\n                                 <li><b>JPCG</b> - Jacobi preconditioner with the conjugate gradient method.\n                             </ul>\n\n    <p><b><i>amgpc</i></b> - Specifies the preconditioner package for the AMG solver, <b>amgpc</b> (string, default=ML). Only effective if <b>type</b>=AMG. Values can be one of the following:\n                             <ul>\n                                 <li><b>ML</b> - Multilevel preconditioner package, or\n                                 <li><b>HYPRE</b> - Hypre preconditioner package.\n                             </ul>\n\n    <p><b><i>hypre_type</i></b> - Specifies the preconditioner sub-package for the Hypre/AMG solver, <b>hypre_type</b> (string, default=BOOMERAMG). Only effective if <b>type</b>=AMG and <b>amgpc</b>=HYPRE. Values can be one of the following:\n                             <ul>\n                                 <li><b>BOOMERAMG</b> - BoomerAMG preconditioner.\n                             </ul>\n\n    <p><b><i>cycle</i></b> - Specifies the type of AMG cycle, <b>cycle</b> (string, default=V). Values may be one of the following:\n                             <ul>\n                                 <li><b>V</b> - Use a V-cycle, or\n                                 <li><b>W</b> - Use a W-cycle.\n                             </ul>\n\n    <p><b><i>solver</i></b> - Specifies the underlying Krylov solver to be used with AMG, <b>solver</b> (string, default=CG). Values can be one of the following:\n                             <ul>\n                                 <li><b>CG</b> - Conjugate gradient method,\n                                 <li><b>BCGS</b> - Stabilized bi-conjugate gradient squared method, or\n                                 <li><b>FGMRES</b> - Flexible generalized minimum residual method.\n                             </ul>\n    <p><b><i>pre_smooth</i></b> - Set the number of pre-smoothing sweeps for AMG, <b>pre_smooth</b> (integer, default=1).\n    <p><b><i>post_smooth</i></b> - Set the number of post-smoothing sweeps for AMG, <b>pre_smooth</b> (integer, default=1).\n    <p><b><i>levels</i></b> - Set the maximum number of AMG levels to use in the multigrid cycle, <b>levels</b> (integer, default=20).\n\n    <p><b><i>nitmax</i></b> - Set the maximum number of iterations, <b>N<sub>itmax</sub></b> (int, default=500). In the case of AMG, this is the maximum number of V or W cycles.\n\n    <p><b><i>nitchk</i></b> - Set the number of iterations to take before checking convergence criteria, <b>N<sub>itchk</sub></b> (int, default=2).\n\n    <p><b><i>eps</i></b> - Define the convergence criteria for linear solver, <b>&epsilon;</b> (float, default=1.0E-5).\n    <p><b><i>pivot</i></b> - Specify the value of a zero pivot for preconditioner, <b>pivot</b> (float, default=1.0E-16).\n\n    <p><b><i>convergence</i></b> - Enable/disable the convergence metrics for the linear solver, <b>convergence</b> (string, default=Off).\n                             <ul>\n                                 <li><b>On</b> - Activate convergence output, or\n                                 <li><b>Off</b> - Suppress convergence output.\n                             </ul>\n\n    <p><b><i>diagnostics</i></b> - Enable/disable the diagnostic information from the linear solver, <b>diagnostics</b> (string, default=Off).\n                             <ul>\n                                 <li><b>On</b> - Activate diagnostic output, or\n                                 <li><b>Off</b> - Suppress diagnostic output.\n                             </ul>\n",e.help["pressuresolver.eps"]="<p><b><i>eps</i></b> - Define the convergence criteria for linear solver, <b>&epsilon;</b> (float, default=1.0E-5).",e.help["pressuresolver.diagnostics"]="<p><b><i>diagnostics</i></b> - Enable/disable the diagnostic information from the linear solver, <b>diagnostics</b> (string, default=Off).\n                             <ul>\n                                 <li><b>On</b> - Activate diagnostic output, or\n                                 <li><b>Off</b> - Suppress diagnostic output.\n                             </ul>",e.help["pressuresolver.cycle"]="<p><b><i>cycle</i></b> - Specifies the type of AMG cycle, <b>cycle</b> (string, default=V). Values may be one of the following:\n                             <ul>\n                                 <li><b>V</b> - Use a V-cycle, or\n                                 <li><b>W</b> - Use a W-cycle.\n                             </ul>",e.help["pressuresolver.convergence"]="<p><b><i>convergence</i></b> - Enable/disable the convergence metrics for the linear solver, <b>convergence</b> (string, default=Off).\n                             <ul>\n                                 <li><b>On</b> - Activate convergence output, or\n                                 <li><b>Off</b> - Suppress convergence output.\n                             </ul>",e.help["pressuresolver.amgpc"]="<p><b><i>amgpc</i></b> - Specifies the preconditioner package for the AMG solver, <b>amgpc</b> (string, default=ML). Only effective if <b>type</b>=AMG. Values can be one of the following:\n                             <ul>\n                                 <li><b>ML</b> - Multilevel preconditioner package, or\n                                 <li><b>HYPRE</b> - Hypre preconditioner package.\n                             </ul>",e.help["pressureoutflow.setids"]="<p><b><i>setids</i></b> - One (or more) side-set(s) on which the boundary condition will be applied, <b>setId</b> (integer, required).",e.help["porousdragforce.setids"]="<p><b><i>setids</i></b> - One (or more) side-set(s) on which the body force will be applied, <b>setId</b> (integer, required).",e.help["porousdragforce.load_curve"]="    <p><b><i>load_curve</i></b>\n\n    <blockquote>\n\n    <p> A load curve allows for the specification of time-dependent body forces. The load curve is defined as a list of time and factor pairs:\n        <ul>\n            <li>t<sub>i</sub> The time value\n            <li>v<sub>i</sub> The load factor\n        </ul>\n\n    <p><b><i>name</i></b> - A descriptive load curve name (string, default=null). <b>name</b> is not used in the derived control file. A unique id for each specific load curve is generated underneath the cover of the web interface. While providing a descriptive name is not required, these descriptive names clearly increase usability.</p>\n\n    <p><b><i>time and factor pairs</i></b> -\n       <blockquote>\n          t<sub>1</sub>, v<sub>1</sub><br>\n          t<sub>2</sub>, v<sub>2</sub><br>\n          ï¿¼t<sub>3</sub>, v<sub>3</sub><br>\n          ...<br>\n          t<sub>Npts</sub>, v<sub>Npts</sub><br>\n       </blockquote>\n       </blockquote>",e.help["porousdragforce.amplitude"]="    <p><b><i>amplitude</i></b> - The scalar value of the porous drag force, <b>amplitude</b> (float, default=1.0).",e.help["plot.svariables"]="<p><b><i>Face Variables</i></b> - Face variables that specifies plot output.\n\n    <ul>\n<li><b><i>traction</i></b> - Traction force vector\n<li><b><i>straction</i></b> - Shear traction force vector\n<li><b><i>ntraction</i></b> - Normal traction force vector\n<li><b><i>wallshear</i></b> - Wall shear force\n<li><b><i>yplus</i></b> - y<sup>+</sup> at a wall\n<li><b><i>ystar</i></b> - y<sup>*</sup> at a wall\n<li><b><i>varyplus</i></b> - Spatial variation of y<sup>+</sup> at a wall\n<li><b><i>heatflux</i></b> - Heat flux vector at a wall\n<li><b><i>nheatflux</i></b> - Normal heat flux at a wall\n<li><b><i>surfarea</i></b> - Surface area (of each cell) at a wall\n    </ul>",e.help["plot.pltype"]="<p><b><i>pltype</i></b> - Specifies the plot file format, <b>pltype</b> (string, default=exodusii). Valid values are the following:\n                             <ul>\n                                 <li><b>ASCII GMV</b> - Generates ASCII GMV files suitable for use with the GMV visualization tool,\n                                 <li><b>Exodus-II (CDF)</b> - generates Exodus-II (CDF) format plot files (By default, floating point results are represented with a 32-bit representation and is limited to mesh sizes below<b> </b>approximately 6 x 10<sup>6</sup> elements),\n                                 <li><b>Exodus-II (CDF) 64bit</b> - generates Exodus-II (CDF) format plot files (Floating point results are represented with a 64-bit representation and are limited to mesh sizes below approximately 6 x 10<sup>6</sup> elements),\n                                 <li><b>Exodus-II (CDF) HDF5</b> - generates Exodus-II (CDF) format plot files (By default, floating point results are represented with a 32-bit representation and allows for larger mesh sizes than the Exodus-II format),\n                                 <li><b>Exodus-II (CDF) HDF5 64bit</b> - generates Exodus-II (CDF) format plot files (Floating point results are represented with a 64-bit representation and allows for larger mesh sizes than the Exodus-II format), or\n                                 <li><b>ASCII VTK</b> - Generates ASCII VTK format plot files.\n                             </ul>\n\n     <p><b>Note</b>: The <b>pltype</b> selects the file format used for field output which includes both instantaneous state variables, and time-averaged statistical quantities. At this time, surface field variables associated with model side-sets is only available in the <code>exodusii</code> and <code>exodusii_hdf5</code> formats.",e.help["plot.nvariables"]="<p><b><i>Node Variables</i></b> - Node variables that specifies plot output.\n\n    <ul>\n<li><b><i>density</i></b> - Fluid density\n<li><b><i>dist</i></b> - Normal distance from no-slip/no-penetration surfaces\n<li><b><i>enthalpy</i></b> - Fluid specific enthalpy\n<li><b><i>enstrophy</i></b> - Enstrophy (&omega; &sdot; &omega;/2)\n<li><b><i>helicity</i></b> - Helicity (v &sdot; &omega;)\n<li><b><i>pressure</i></b> - Fluid pressure\n<li><b><i>procid</i></b> - Processor Id (MPI Rank)\n<li><b><i>temp</i></b> - Fluid temperature\n<li><b><i>turbeps</i></b> - Turbulent kinetic energy dissipation rate, (&epsilon;)\n<li><b><i>turbke</i></b> - Turbulent kinetic energy (k)\n<li><b><i>turbnu</i></b> - Turbulent eddy viscosity\n<li><b><i>u</i></b> - Nodal displacement vector for ALE computations\n<li><b><i>vel</i></b> - Fluid velocity vector\n<li><b><i>vginv2</i></b> - Q-criteria, i.e., 2nd invariant of velocity gradient\n<li><b><i>vorticity</i></b> - Vorticity, i.e., curl of velocity (&nabla; x v)\n    </ul>",e.help["plot.nplot"]="   <p><b><i>nplot</i></b> - Output plot files every N<sub>plot</sub> (integer, default=20) time steps.",e.help["plot.filetype"]=" <p><b><i>filetype</i></b> - Specifies the type of plot files, <b>filetype</b> (string, default=serial). Valid values are the following:\n                             <ul>\n                                 <li><b>Serial</b> - This file type is the default for serial calculations. For parallel calculations, this file type requires the serialization of data using a parallel fan-in procedure, but results in a single plot file.\n                                 <li><b>Distributed</b> - This file type results in one plot file per processor and is more scalable for problems where a large number of processors are used.\n                             </ul>",e.help["plot.evariables"]="    <p><b><i>Element Variables</i></b> - Element variables that specifies plot output.\n\n    <ul>\n<li><b><i>cfl</i></b> - Courant-Friedrichs-Levy number\n<li><b><i>density</i></b> - Fluid density\n<li><b><i>dist</i></b> - Normal distance from no-slip/no-penetration surfaces\n<li><b><i>div</i></b> - Velocity divergence (&nabla; &sdot; v)\n<li><b><i>enthalpy</i></b> - Fluid specific enthalpy\n<li><b><i>enstrophy</i></b> - Enstrophy (&omega; &sdot; &omega;/2)\n<li><b><i>helicity</i></b> - Helicity (v &sdot; &omega;)\n<li><b><i>pressure</i></b> - Fluid pressure\n<li><b><i>procid</i></b> - Processor Id (MPI Rank)\n<li><b><i>temp</i></b> - Fluid temperature\n<li><b><i>turbeps</i></b> - Turbulent kinetic energy dissipation rate, (&epsilon;)\n<li><b><i>turbke</i></b> - Turbulent kinetic energy (k)\n<li><b><i>turbnu</i></b> - Turbulent eddy viscosity\n<li><b><i>vel</i></b> - Fluid velocity vector\n<li><b><i>vginv2</i></b> - Q-criteria, i.e., 2nd invariant of velocity gradient\n<li><b><i>vorticity</i></b> - Vorticity, i.e., curl of velocity (&nabla; x v)\n<li><b><i>ystar</i></b> - y<sup>*</sup> non-dimensional distance from walls\n    </ul>",e.help["passiveoutflow.setids"]="<p><b><i>setids</i></b> - One (or more) side-set(s) on which the boundary condition will be applied, <b>setId</b> (integer, required).",e.help["output.html"]="<h2>Output</h2>\n\n    <p>The following commands are used to control the type of field and time-history output, plot files, and the intervals at which data is written to each type of file.\n\n	<h3>Dump</h3>\n\n    <p><b><i>ndump</i></b> - Output dump files every N<sub>dump</sub> (integer, default=0) time steps.\n\n    <p><b>Note</b>: Dump activates checkpoint-restart files, where a restart file will be written every N<sub>dump</sub> time steps. In addition, a restart file will be written at the termination of the calculation. A restart file may be read on a subsequent invocation of HYDRA with the \"<code>-r</code>\" command-line option.\n\n	<h3>Plot</h3>\n\n		<h4>Options</h4>\n\n	<p>Options for plot files.\n\n    <p><b><i>filetype</i></b> - Specifies the type of plot files, <b>filetype</b> (string, default=serial). Valid values are the following:\n                             <ul>\n                                 <li><b>Serial</b> - This file type is the default for serial calculations. For parallel calculations, this file type requires the serialization of data using a parallel fan-in procedure, but results in a single plot file.\n                                 <li><b>Distributed</b> - This file type results in one plot file per processor and is more scalable for problems where a large number of processors are used.\n                             </ul>\n    <p><b><i>pltype</i></b> - Specifies the plot file format, <b>pltype</b> (string, default=exodusii). Valid values are the following:\n                             <ul>\n                                 <li><b>ASCII GMV</b> - Generates ASCII GMV files suitable for use with the GMV visualization tool,\n                                 <li><b>Exodus-II (CDF)</b> - generates Exodus-II (CDF) format plot files (By default, floating point results are represented with a 32-bit representation and is limited to mesh sizes below<b> </b>approximately 6 x 10<sup>6</sup> elements),\n                                 <li><b>Exodus-II (CDF) 64bit</b> - generates Exodus-II (CDF) format plot files (Floating point results are represented with a 64-bit representation and are limited to mesh sizes below approximately 6 x 10<sup>6</sup> elements),\n                                 <li><b>Exodus-II (CDF) HDF5</b> - generates Exodus-II (CDF) format plot files (By default, floating point results are represented with a 32-bit representation and allows for larger mesh sizes than the Exodus-II format),\n                                 <li><b>Exodus-II (CDF) HDF5 64bit</b> - generates Exodus-II (CDF) format plot files (Floating point results are represented with a 64-bit representation and allows for larger mesh sizes than the Exodus-II format), or\n                                 <li><b>ASCII VTK</b> - Generates ASCII VTK format plot files.\n                             </ul>\n\n     <p><b>Note</b>: The <b>pltype</b> selects the file format used for field output which includes both instantaneous state variables, and time-averaged statistical quantities. At this time, surface field variables associated with model side-sets is only available in the <code>exodusii</code> and <code>exodusii_hdf5</code> formats.\n\n    <p><b><i>nplot</i></b> - Output plot files every N<sub>plot</sub> (integer, default=20) time steps.\n\n	<h4>Plot Variables</h4>\n\n	<p><b><i>Element Variables</i></b> - Element variables that specifies plot output.\n\n	<ul>\n<li><b><i>cfl</i></b> - Courant-Friedrichs-Levy number\n<li><b><i>density</i></b> - Fluid density\n<li><b><i>dist</i></b> - Normal distance from no-slip/no-penetration surfaces\n<li><b><i>div</i></b> - Velocity divergence (&nabla; &sdot; v)\n<li><b><i>enthalpy</i></b> - Fluid specific enthalpy\n<li><b><i>enstrophy</i></b> - Enstrophy (&omega; &sdot; &omega;/2)\n<li><b><i>helicity</i></b> - Helicity (v &sdot; &omega;)\n<li><b><i>pressure</i></b> - Fluid pressure\n<li><b><i>procid</i></b> - Processor Id (MPI Rank)\n<li><b><i>temp</i></b> - Fluid temperature\n<li><b><i>turbeps</i></b> - Turbulent kinetic energy dissipation rate, (&epsilon;)\n<li><b><i>turbke</i></b> - Turbulent kinetic energy (k)\n<li><b><i>turbnu</i></b> - Turbulent eddy viscosity\n<li><b><i>vel</i></b> - Fluid velocity vector\n<li><b><i>vginv2</i></b> - Q-criteria, i.e., 2nd invariant of velocity gradient\n<li><b><i>vorticity</i></b> - Vorticity, i.e., curl of velocity (&nabla; x v)\n<li><b><i>ystar</i></b> - y<sup>*</sup> non-dimensional distance from walls\n	</ul>\n\n	<p><b><i>Node Variables</i></b> - Node variables that specifies plot output.\n\n	<ul>\n<li><b><i>density</i></b> - Fluid density\n<li><b><i>dist</i></b> - Normal distance from no-slip/no-penetration surfaces\n<li><b><i>enthalpy</i></b> - Fluid specific enthalpy\n<li><b><i>enstrophy</i></b> - Enstrophy (&omega; &sdot; &omega;/2)\n<li><b><i>helicity</i></b> - Helicity (v &sdot; &omega;)\n<li><b><i>pressure</i></b> - Fluid pressure\n<li><b><i>procid</i></b> - Processor Id (MPI Rank)\n<li><b><i>temp</i></b> - Fluid temperature\n<li><b><i>turbeps</i></b> - Turbulent kinetic energy dissipation rate, (&epsilon;)\n<li><b><i>turbke</i></b> - Turbulent kinetic energy (k)\n<li><b><i>turbnu</i></b> - Turbulent eddy viscosity\n<li><b><i>u</i></b> - Nodal displacement vector for ALE computations\n<li><b><i>vel</i></b> - Fluid velocity vector\n<li><b><i>vginv2</i></b> - Q-criteria, i.e., 2nd invariant of velocity gradient\n<li><b><i>vorticity</i></b> - Vorticity, i.e., curl of velocity (&nabla; x v)\n	</ul>\n\n		<p><b><i>Face Variables</i></b> - Face variables that specifies plot output.\n\n	<ul>\n<li><b><i>traction</i></b> - Traction force vector\n<li><b><i>straction</i></b> - Shear traction force vector\n<li><b><i>ntraction</i></b> - Normal traction force vector\n<li><b><i>wallshear</i></b> - Wall shear force\n<li><b><i>yplus</i></b> - y<sup>+</sup> at a wall\n<li><b><i>ystar</i></b> - y<sup>*</sup> at a wall\n<li><b><i>varyplus</i></b> - Spatial variation of y<sup>+</sup> at a wall\n<li><b><i>heatflux</i></b> - Heat flux vector at a wall\n<li><b><i>nheatflux</i></b> - Normal heat flux at a wall\n<li><b><i>surfarea</i></b> - Surface area (of each cell) at a wall\n	</ul>\n\n	<h3>ASCII</h3>\n\n    <p><b><i>prtlev</i></b> - The amount of data to output, <b>prtlev</b> (string, default=param). Valid values are the following:\n                             <ul>\n                                 <li><b>Primary Code Options Only</b> - Suppresses all output except for a data echo of the primary code options,\n                                 <li><b>Mesh Coordinates and Topology</b> - Produces data echo of the mesh coordinates and topology, or\n                                 <li><b>Primitive Variables</b> - Produces a data echo of the primitive variables every N<sub>print</sub> time steps.\n                             </ul>\n\n    <p><b>Note</b>: Controls the amount of data written to the ASCII (human-readable) output file.\n\n    <p><b><i>nprint</i></b> - Output ASCII files every N<sub>print</sub> (integer, default=10) time steps.\n\n	<h3>Time-History</h3>\n\n	<h4>Time-History Variables</h4>\n\n	<p><b><i>elementid</i></b> - Element ID (integer, required).\n\n	<p><b><i>Element Variables</i></b> - Element variables that specifies plot output for statistics data.\n\n	<ul>\n<li><b><i>&lt;density&gt;</i></b> - Mean density\n<li><b><i>density</i></b> - Fluid density\n<li><b><i>div</i></b> - Velocity divergence (&nabla; &sdot; v)\n<li><b><i>enstrophy</i></b> - Enstrophy, i.e., square of vorticity\n<li><b><i>enthalpy</i></b> -  Fluid specific enthalpy\n<li><b><i>helicity</i></b> - Helicity, i.e., dot product of velocity and vorticity\n<li><b><i>pressure</i></b> - Fluid pressure\n<li><b><i>temp</i></b> - Fluid temperature\n<li><b><i>turbeps</i></b> - Turbulent dissipation rate (&epsilon;)\n<li><b><i>turbke</i></b> - Turbulent kinetic energy (k)\n<li><b><i>turbnu</i></b> - Turbulent eddy viscosity\n<li><b><i>vel</i></b> - Fluid velocity vector\n<li><b><i>vorticity</i></b> - Vorticity, i.e., curl of velocity (&nabla; x v)\n	</ul>\n\n		<p><b><i>surfaceid</i></b> - Surface ID (integer, required).\n\n		<p><b><i>Surface Variables</i></b> - Face variables that specifies plot output for statistics data.\n\n	<ul>\n<li><b><i>avgpress</i></b> - Average pressure for a surface\n<li><b><i>avgtemp</i></b> - Average temperature for a surface\n<li><b><i>avgvel</i></b> - Average velocity vector for a surface\n<li><b><i>force</i></b> - Integral force acting on a surface\n<li><b><i>fvol</i></b> - Integrated volume of fluid that has crossed a surface\n<li><b><i>heatflow</i></b> - Heat flow rate crossing a surface\n<li><b><i>massflow</i></b> - Mass flow rate crossing a surface\n<li><b><i>pressforce</i></b> - Integral pressure force acting on a surface\n<li><b><i>surfarea</i></b> - Surface area\n<li><b><i>viscforce</i></b> - Integral viscous shear force acting on a surface\n<li><b><i>volumeflow</i></b> - Volume flow rate crossing a surface\n	</ul>\n\n	<h4>Frequency</h4>\n\n    <p><b><i>nstep</i></b> - Output Time-History data every N<sub>step</sub> (integer, default=1) time steps.\n\n	<h3>Velocity Min/Max</h3>\n\n    <p><b><i>nminmax</i></b> - Output min/max values of velocity every N<sub>minmax</sub> (integer, default=10) time steps.\n\n    <p><b>Note</b>: Set the interval to report the min/max values of the velocity to N<sub>minmax</sub>. The min/max values are normally written to the screen at run-time.\n\n	<h3>Turbulence Statistics</h3>\n\n    <p>Collecting turbulence statistics, for physics that are relevant.\n\n	<h4>Statistics Variables</h4>\n\n	<p><b><i>Element Variables</i></b> - Element variables that specifies plot output for statistics data.\n\n	<ul>\n<li><b><i>&lt;density&gt;</i></b> - Mean density\n<li><b><i>&lt;pressure&gt;</i></b> - Mean pressure\n<li><b><i>&lt;velocity&gt;</i></b> - Mean velocity vector\n<li><b><i>&lt;temperature&gt;</i></b> - Mean temperature\n<li><b><i>&lt;enstrophy&gt;</i></b> - Mean enstrophy\n<li><b><i>&lt;helicity&gt;</i></b> - Mean helicity\n<li><b><i>&lt;vorticity&gt;</i></b> - Mean vorticity\n<li><b><i>&lt;turbnu&gt;</i></b> - Mean turbulent viscosity\n<li><b><i>&lt;pressure', pressure'&gt;</i></b> - Pressure variance\n<li><b><i>&lt;temp', temp'&gt;</i></b> - Temperature variance\n<li><b><i>&lt;density', pressure'&gt;</i></b> - Density-pressure covariance\n<li><b><i>&lt;pressure', velocity'&gt;</i></b> - Pressure-velocity covariance\n<li><b><i>rms-pressure</i></b> - Root-Mean-Square pressure\n<li><b><i>rms-temp</i></b> - Root-Mean-Square temperature\n<li><b><i>tke</i></b> - Turbulent kinetic energy\n<li><b><i>reynoldsstress</i></b> - Reynolds stress tensor\n	</ul>\n\n	<p><b><i>Node Variables</i></b> - Node variables that specifies plot output for statistics data.\n\n	<ul>\n<li><b><i>&lt;density&gt;</i></b> - Mean density\n<li><b><i>&lt;pressure&gt;</i></b> - Mean pressure\n<li><b><i>&lt;velocity&gt;</i></b> - Mean velocity vector\n<li><b><i>&lt;temperature&gt;</i></b> - Mean temperature\n<li><b><i>&lt;enstrophy&gt;</i></b> - Mean enstrophy\n<li><b><i>&lt;helicity&gt;</i></b> - Mean helicity\n<li><b><i>&lt;vorticity&gt;</i></b> - Mean vorticity\n<li><b><i>&lt;pressure', pressure'&gt;</i></b> - Pressure variance\n<li><b><i>&lt;temp', temp'&gt;</i></b> - Temperature variance\n<li><b><i>&lt;density', pressure'&gt;</i></b> - Density-pressure covariance\n<li><b><i>&lt;pressure', velocity'&gt;</i></b> - Pressure-velocity covariance\n<li><b><i>rms-pressure</i></b> - Root-Mean-Square pressure\n<li><b><i>rms-temp</i></b> - Root-Mean-Square temperature\n<li><b><i>tke</i></b> - Turbulent kinetic energy\n<li><b><i>reynoldsstress</i></b> - Reynolds stress tensor\n	</ul>\n\n		<p><b><i>Face Variables</i></b> - Face variables that specifies plot output for statistics data.\n\n	<ul>\n<li><b><i>&lt;density&gt;</i></b> - Mean density\n<li><b><i>&lt;pressure&gt;</i></b> - Mean pressure\n<li><b><i>&lt;velocity&gt;</i></b> - Mean velocity vector\n<li><b><i>&lt;temperature&gt;</i></b> - Mean temperature\n<li><b><i>&lt;heatflux&gt;</i></b> - Mean heat flux vector\n<li><b><i>&lt;straction&gt;</i></b> - Mean shear traction force vector\n<li><b><i>&lt;ntraction&gt;</i></b> - Mean normal traction force vector\n<li><b><i>&lt;traction&gt;</i></b> - Mean traction force vector\n<li><b><i>&lt;wallshear&gt;</i></b> - Mean wall shear force\n<li><b><i>&lt;pressure', pressure'&gt;</i></b> - Pressure variance\n<li><b><i>&lt;temp', temp'&gt;</i></b> - Temperature variance\n<li><b><i>&lt;density', pressure'&gt;</i></b> - Density-pressure covariance\n<li><b><i>rms-pressure</i></b> - Root-Mean-Square pressure\n<li><b><i>rms-temp</i></b> - Root-Mean-Square temperature\n	</ul>\n\n	<h4>Statistics</h4>\n\n	<p>Options for accumulating statistics of fluctuating variables.\n\n	<p><b><i>starttime</i></b> - Start time for collecting statistics, t<sub>start</sub> (float, default=0.0).\n\n	<p><b><i>endtime</i></b> - End time for collecting statistics, t<sub>end</sub> (float, default=1.0).\n\n	<p><b><i>plotwinsize</i></b> - Time window size for output of field statistics, size (float, default=0.1).\n",e.help["momentumsolver.type"]="<p><b><i>type</i></b> - Specifies the preconditioner - Krylov solver combination, <b>type</b> (string, default=FGMRES). Values can be one of the following:\n                             <ul>\n                                 <li><b>FGMRES</b> - Flexible generalized minimum residual method,\n                                 <li><b>ILUFGMRES</b> - ILU-preconditoned FGMRES,\n                                 <li><b>GMRES</b> - Generalized minimum residual method, or\n                                 <li><b>ILUGMRES</b> - ILU-preconditioned GMRES.\n                             </ul>",e.help["momentumsolver.nrestart"]="<p><b><i>nrestart</i></b> - Specifies the number of restart vectors used with GMRES/FGMRES, <b>N<sub>restart</sub></b> (int, default=30).",e.help["momentumsolver.nitmax"]="<p><b><i>nitmax</i></b> - Set the maximum number of iterations, <b>N<sub>itmax</sub></b> (int, default=500).",e.help["momentumsolver.nitchk"]="<p><b><i>nitchk</i></b> - Set the number of iterations to take before checking convergence criteria, <b>N<sub>itchk</sub></b> (int, default=2).",e.help["momentumsolver.html"]="<h2>Momentum Solver</h2>\n\n	<p>Define the attributes of the momentum solver.\n\n    <p><b><i>type</i></b> - Specifies the preconditioner - Krylov solver combination, <b>type</b> (string, default=FGMRES). Values can be one of the following:\n                             <ul>\n                                 <li><b>FGMRES</b> - Flexible generalized minimum residual method,\n                                 <li><b>ILUFGMRES</b> - ILU-preconditoned FGMRES,\n                                 <li><b>GMRES</b> - Generalized minimum residual method, or\n                                 <li><b>ILUGMRES</b> - ILU-preconditioned GMRES.\n                             </ul>\n\n    <p><b><i>nrestart</i></b> - Specifies the number of restart vectors used with GMRES/FGMRES, <b>N<sub>restart</sub></b> (int, default=30).\n\n    <p><b><i>nitmax</i></b> - Set the maximum number of iterations, <b>N<sub>itmax</sub></b> (int, default=500).\n\n    <p><b><i>nitchk</i></b> - Set the number of iterations to take before checking convergence criteria, <b>N<sub>itchk</sub></b> (int, default=2).\n\n    <p><b><i>eps</i></b> - Define the convergence criteria for linear solver, <b>&epsilon;</b> (float, default=1.0E-5).\n\n    <p><b><i>convergence</i></b> - Enable/disable the convergence metrics for the linear solver, <b>convergence</b> (string, default=Off).\n                             <ul>\n                                 <li><b>On</b> - Activate convergence output, or\n                                 <li><b>Off</b> - Suppress convergence output.\n                             </ul>\n\n    <p><b><i>diagnostics</i></b> - Enable/disable the diagnostic information from the linear solver, <b>diagnostics</b> (string, default=Off).\n                             <ul>\n                                 <li><b>On</b> - Activate diagnostic output, or\n                                 <li><b>Off</b> - Suppress diagnostic output.\n                             </ul>\n",e.help["momentumsolver.eps"]="<p><b><i>eps</i></b> - Define the convergence criteria for linear solver, <b>&epsilon;</b> (float, default=1.0E-5).",e.help["momentumsolver.diagnostics"]="<p><b><i>diagnostics</i></b> - Enable/disable the diagnostic information from the linear solver, <b>diagnostics</b> (string, default=Off).\n                             <ul>\n                                 <li><b>On</b> - Activate diagnostic output, or\n                                 <li><b>Off</b> - Suppress diagnostic output.\n                             </ul>",e.help["momentumsolver.convergence"]="<p><b><i>convergence</i></b> - Enable/disable the convergence metrics for the linear solver, <b>convergence</b> (string, default=Off).\n                             <ul>\n                                 <li><b>On</b> - Activate convergence output, or\n                                 <li><b>Off</b> - Suppress convergence output.\n                             </ul>",e.help["mlamg.smoother"]="<p><b><i>smoother</i></b> - Specifies the smoother for the ML AMG solver, <b>smoother</b> (string, default=ICC). Only effective if <b>type</b>=AMG and <b>amgpc</b>=ML. Values can be one of the following:\n                             <ul>\n                                 <li><b>ICC</b> - Incomplete Cholesky factorization with no-fill,\n                                 <li><b>ILU</b> - Incomplete LU factorization with no-fill,\n                                 <li><b>SSOR</b> - Successive over-relaxation, or\n                                 <li><b>CHEBYCHEV</b> - Chebychev polynomial smoother.\n                             </ul>",e.help["mlamg.html"]="<h2>ML AMG</h2>\n\n    <p><b><i>smoother</i></b> - Specifies the smoother for the ML AMG solver, <b>smoother</b> (string, default=ICC). Only effective if <b>type</b>=AMG and <b>amgpc</b>=ML. Values can be one of the following:\n                             <ul>\n                                 <li><b>ICC</b> - Incomplete Cholesky factorization with no-fill,\n                                 <li><b>ILU</b> - Incomplete LU factorization with no-fill,\n                                 <li><b>SSOR</b> - Successive over-relaxation, or\n                                 <li><b>CHEBYCHEV</b> - Chebychev polynomial smoother.\n                             </ul>\n",e.help["material.vel"]="<p><b><i>vel</i></b> - The x-, y-, and z-components of the rigid body velocity for native conjugate heat transfer, <b>vel</b>, {velx, vely, velz} (3 x float, default={0.0, 0.0, 0.0}).",e.help["material.type"]="<p><b><i>type</i></b> - The type of material set (string, default=Eulerian). The <b>type</b> must be one of the following:\n\n     <ul>\n         <li><b>Eulerian</b> - Use Eulerian coordinates for this material set,\n         <li><b>Lagrangian</b> - Use Lagrangian coordinates for this material set, or\n         <li><b>ALE</b> - Use an arbitrary Lagrangian-Eulerian description for this material set.\n     </ul>",e.help["material.tref"]="<p><b><i>Tref</i></b> - The material reference temperature, <b>T<sub>ref</sub></b> (float, default=0.0).",e.help["material.rigid"]="<p><b><i>rigid</i></b> - Rigid body material specification for native conjugate heat transfer, <b>rigid</b> flag (string, default=off). Valid values are the following:\n\n    <ul>\n        <li><b>off</b> - treat material as a fluid or deformable body, or\n        <li><b>on</b> - treat material as a rigid body.\n    </ul>",e.help["material.rho"]="<p><b><i>rho</i></b> - The material mass density, <b>&rho;<sub>ref</sub></b> (float, default=1.0).",e.help["material.name"]="<p><b><i>name</i></b> - A descriptive material name (string, default=null). <b>name</b> is not used in the derived control file. A unique id for each specific material is generated underneath the cover of the web interface. While providing a descriptive name is not required, these descriptive names clearly increase usability.</p>",e.help["material.mu"]="<p><b><i>mu</i></b> - The molecular viscosity, <b>&mu;</b> (float, default=1.0).",e.help["material.k"]="<p><b><i>k</i></b> -  The symmetric thermal conductivity tensor, <b>k</b>, {k<sub>11</sub>, k<sub>12</sub>, k<sub>13</sub>, k<sub>22</sub>, k<sub>23</sub>, k<sub>33</sub>} (6 x float, default=identity k<sub>ii</sub> = 1.0 or for i&ne;j k<sub>ij</sub> = 0.0). For fluid dynamics problems, this is the only thermal conductivity that is required.",e.help["material.html"]="<h2>Material</h2>\n\n	A material model contains the necessary material parameters to describe <b>material</b> behavior for a range of physics. Material sets describe what materials appear in various regions of the physical domain, i.e., what parts of the computational mesh are contained in a <b>material set</b>.\n\n	<p><b><i>name</i></b> - A descriptive material name (string, default=null). <b>name</b> is not used in the derived control file. A unique id for each specific material is generated underneath the cover of the web interface. While providing a descriptive name is not required, these descriptive names clearly increase usability.</p>\n\n    <p><b><i>rho</i></b> - The material mass density, <b>&rho;<sub>ref</sub></b> (float, default=1.0).\n\n    <p><b><i>Cp</i></b> - The constant-pressure specific heat, <b>C<sub>p</sub></b> (float, default=1.0).\n\n    <p><b><i>Cv</i></b> - The constant-pressure specific heat, <b>C<sub>v</sub></b> (float, default=1.0).\n\n    <p><b><i>k</i></b> -  The symmetric thermal conductivity tensor, <b>k</b>, {k<sub>11</sub>, k<sub>12</sub>, k<sub>13</sub>, k<sub>22</sub>, k<sub>23</sub>, k<sub>33</sub>} (6 x float, default=identity k<sub>ii</sub> = 1.0 or for i&ne;j k<sub>ij</sub> = 0.0). For fluid dynamics problems, this is the only thermal conductivity that is required.\n\n    <p><b><i>mu</i></b> - The molecular viscosity, <b>&mu;</b> (float, default=1.0).\n\n    <p><b><i>Tref</i></b> - The material reference temperature, <b>T<sub>ref</sub></b> (float, default=0.0).\n\n    <p><b><i>beta</i></b> - The material coefficient of thermal expansion, <b>&beta;</b> (float, default=0.0).\n\n    <p><b><i>rigid</i></b> - Rigid body material specification for native conjugate heat transfer, <b>rigid</b> flag (string, default=off). Valid values are the following:\n\n                             <ul>\n                                 <li><b>off</b> - treat material as a fluid or deformable body, or\n                                 <li><b>on</b> - treat material as a rigid body.\n                             </ul>\n\n    <p><b><i>vel</i></b> - The x-, y-, and z-components of the rigid body velocity for native conjugate heat transfer, <b>vel</b>, {velx, vely, velz} (3 x float, default={0.0, 0.0, 0.0}).\n\n    <p><b><i>blockids</i></b> - One (or more) element set(s) or block Id(s) for this material set, <b>blockId</b> (integer, required).\n\n    <p><b><i>type</i></b> - The type of material set (string, default=Eulerian). The <b>type</b> must be one of the following:\n\n                             <ul>\n                                 <li><b>Eulerian</b> - Use Eulerian coordinates for this material set,\n                                 <li><b>Lagrangian</b> - Use Lagrangian coordinates for this material set, or\n                                 <li><b>ALE</b> - Use an arbitrary Lagrangian-Eulerian description for this material set.\n                             </ul>\n",e.help["material.cv"]="<p><b><i>Cv</i></b> - The constant-pressure specific heat, <b>C<sub>v</sub></b> (float, default=1.0).",e.help["material.cp"]="<p><b><i>Cp</i></b> - The constant-pressure specific heat, <b>C<sub>p</sub></b> (float, default=1.0).",e.help["material.blockids"]="<p><b><i>blockids</i></b> - One (or more) element set(s) or block Id(s) for this material set, <b>blockId</b> (integer, required).",e.help["material.beta"]="<p><b><i>beta</i></b> - The material coefficient of thermal expansion, <b>&beta;</b> (float, default=0.0).",e.help["loadbalance.method"]="<p><b><i>method</i></b> -  Specifies the type load balancing, <b>method</b> (string, default=sfc_and_hg). The value must be one of the following:\n                             <ul>\n                                 <li><b>Recursive Coordinate Bisection</b> - Use recursive coordinate bisection for domain decomposition,\n                                 <li><b>Recursive Inertial Bisection</b> - Use recursive inertial bisection for domain decomposition,\n                                 <li><b>Space-Filling Curve</b> - Use a space-filling curve for domain decomposition,\n                                 <li><b>Hypergraph</b> - Use hypergraph domain decomposition, or\n                                 <li><b>Space-Filling Curve followed by Hypergraph</b> - Use a space-filling curve for the initial domain decomposition, followed by a hypergraph partitioning algorithm.\n                             </ul>",e.help["loadbalance.diagnostics"]="<p><b><i>diagnostics</i></b> - Specify the verbosity of load balance output, <b>diagnostics</b> (string, default=off). Valid values are the following:\n                             <ul>\n                                 <li><b>On</b> - Activate diagnostic output from the load-balancer, or\n                                 <li><b>Off</b> - Suppress diagnostic output from the load-balancer.\n                             </ul>",e.help["initial.turbnu"]="<p><b><i>turbnu</i></b> - The turbulent viscosity, <b>&upsilon;</b> (float, default=0.0) for Spalart-Allmaras and DES models.",e.help["initial.tke"]="<p><b><i>tke</i></b> - The turbulent kinetic energy, <b>k</b> (float, default=0.0) supporting k - &epsilon; and k - &omega; models.",e.help["initial.temperature"]="<p><b><i>temperature</i></b> - The temperature, <b>T</b> (float, default=0.0) (aka: temp).",e.help["initial.omega"]="<p><b><i>omega</i></b> - The inverse dissipation time scale, <b>&omega;</b> (float, default=0.0), which is used for k - &omega; models.",e.help["initial.int_energy"]="<p><b><i>int_energy</i></b> -  The internal energy, <b>e</b> (float, default=0.0).",e.help["initial.eps"]="<p><b><i>eps</i></b> - The turbulent dissipation rate, <b>&epsilon;</b> (float, default=0.0) with support for k - &epsilon; models.",e.help["initial.enthalpy"]="<p><b><i>enthalpy</i></b> - The enthalpy, <b>h</b> (float, default=0.0).",e.help["initial-conditions.html"]="<h2>Initial Conditions</h2>\n\n	For many CFD problems, a simplified specification of initial conditions is sufficient. Hydra-TH provides a simplified input mechanism for prescribing all initial conditions.\n\n	<p><b><i>tke</i></b> - The turbulent kinetic energy, <b>k</b> (float, default=0.0) supporting k - &epsilon; and k - &omega; models.\n\n    <p><b><i>eps</i></b> - The turbulent dissipation rate, <b>&epsilon;</b> (float, default=0.0) with support for k - &epsilon; models.\n\n    <p><b><i>omega</i></b> - The inverse dissipation time scale, <b>&omega;</b> (float, default=0.0), which is used for k - &omega; models.\n\n    <p><b><i>turbnu</i></b> - The turbulent viscosity, <b>&upsilon;</b> (float, default=0.0) for Spalart-Allmaras and DES models.\n\n    <p><b><i>temperature</i></b> - The temperature, <b>T</b> (float, default=0.0) (aka: temp).\n\n    <p><b><i>enthalpy</i></b> - The enthalpy, <b>h</b> (float, default=0.0).\n\n    <p><b><i>int_energy</i></b> -  The internal energy, <b>e</b> (float, default=0.0).\n",e.help["hypreboomeramg.trunc_factor"]="<p><b><i>trunc_factor</i></b> - Specify the truncation factor for the interpolation in Hypre/BoomerAMG, <b>trunc_factor</b> (float, default=0.0). Only effective if <b>type</b>=AMG and <b>amgpc</b>=HYPRE and <b>hypre_type</b>=BOOMERAMG.",e.help["hypreboomeramg.strong_threshold"]="<p><b><i>strong_threshold</i></b> - Specify the strength threshold for Hypre/BoomerAMG, <b>strong_threshold</b> (float, default=0.85). Only effective if <b>type</b>=AMG and <b>amgpc</b>=HYPRE and <b>hypre_type</b>=BOOMERAMG. For 2D Laplace operators 0.25 is a good value, for 3D Laplace operators 0.5 or 0.6 is a better value. For elasticity problems, a large strength threshold, such as 0.9, is often better.",e.help["hypreboomeramg.pmax_elements"]="<p><b><i>pmax_elements</i></b> - Set the maximum elements/row for the interpolation for Hypre/BoomerAMG, <b>pmax_elements</b> (integer, default=0). Only effective if <b>type</b>=AMG and <b>amgpc</b>=HYPRE and <b>hypre_type</b>=BOOMERAMG.",e.help["hypreboomeramg.max_rowsum"]="<p><b><i>max_rowsum</i></b> - Set a parameter to modify the definition of strength for diagonally dominant portions of the matrix for Hypre/BoomerAMG, <b>max_rowsum</b> (float, default=0.9). Only effective if <b>type</b>=AMG and <b>amgpc</b>=HYPRE and <b>hypre_type</b>=BOOMERAMG.",e.help["hypreboomeramg.interp"]="<p><b><i>interp</i></b> - Specifies the parallel interpolation operator for Hypre/BoomerAMG, <b>interp</b> (string, default=CLASSICAL). Only effective if <b>type</b>=AMG and <b>amgpc</b>=HYPRE and <b>hypre_type</b>=BOOMERAMG. Values can be one of the following:\n                             <ul>\n                                 <li><b>CLASSICAL</b> - Classical modified interpolation,\n                                 <li><b>DIRECT</b> - Direct interpolation (with separation of weights),\n                                 <li><b>MULTIPASS</b> - Multipass interpolation,\n                                 <li><b>MULTIPASS_WTS</b> - Multipass interpolation (with separation of weights),\n                                 <li><b>EXT+I</b> - Extended+i interpolation,\n                                 <li><b>EXT+I-CC</b> - Extended+i (if no common C neighbor) interpolation,\n                                 <li><b>STANDARD</b> - Standard interpolation,\n                                 <li><b>STANDARD_WTS</b> - Standard interpolation (with separation of weights),\n                                 <li><b>FF</b> - FF interpolation, or\n                                 <li><b>FF1</b> - FF1 interpolation.\n                             </ul>",e.help["hypreboomeramg.hypre_smoother_up"]="<p><b><i>hypre_smoother_up</i></b> - Specifies the smoother for the up cycles for Hypre/BoomerAMG, <b>hypre_smoother_up</b> (string, default=HYB_SGS). Only effective if <b>type</b>=AMG and <b>amgpc</b>=HYPRE and <b>hypre_type</b>=BOOMERAMG. Values can be one of the following:\n                             <ul>\n                                 <li><b>JACOBI</b> - Jacobi,\n                                 <li><b>SEQ_SGS</b> - Gauss-Seidel, sequential (very slow!),\n                                 <li><b>HYB_GS</b> - Hybrid Gauss-Seidel or SOR, forward solve,\n                                 <li><b>BACK_HYB_GS</b> - Hybrid Gauss-Seidel or SOR, backward solve,\n                                 <li><b>HYB_SGS</b> - Hybrid symmetric Gauss-Seidel or SSOR, or\n                                 <li><b>GE</b> - Gaussian elimination.\n                             </ul>",e.help["hypreboomeramg.hypre_smoother_dn"]="<p><b><i>hypre_smoother_dn</i></b> - Specifies the smoother for the down cycles for Hypre/BoomerAMG, <b>hypre_smoother_dn</b> (string, default=HYB_SGS). Only effective if <b>type</b>=AMG and <b>amgpc</b>=HYPRE and <b>hypre_type</b>=BOOMERAMG. Values can be one of the following:\n                             <ul>\n                                 <li><b>JACOBI</b> - Jacobi,\n                                 <li><b>SEQ_SGS</b> - Gauss-Seidel, sequential (very slow!),\n                                 <li><b>HYB_GS</b> - Hybrid Gauss-Seidel or SOR, forward solve,\n                                 <li><b>BACK_HYB_GS</b> - Hybrid Gauss-Seidel or SOR, backward solve,\n                                 <li><b>HYB_SGS</b> - Hybrid symmetric Gauss-Seidel or SSOR, or\n                                 <li><b>GE</b> - Gaussian elimination.\n                             </ul>",e.help["hypreboomeramg.hypre_smoother_co"]="<p><b><i>hypre_smoother_co</i></b> - Specifies the smoother for the coarsest level for Hypre/BoomerAMG, <b>hypre_smoother_co</b> (string, default=GE). Only effective if <b>type</b>=AMG and <b>amgpc</b>=HYPRE and <b>hypre_type</b>=BOOMERAMG. Values can be one of the following:\n                             <ul>\n                                 <li><b>JACOBI</b> - Jacobi,\n                                 <li><b>SEQ_SGS</b> - Gauss-Seidel, sequential (very slow!),\n                                 <li><b>HYB_GS</b> - Hybrid Gauss-Seidel or SOR, forward solve,\n                                 <li><b>BACK_HYB_GS</b> - Hybrid Gauss-Seidel or SOR, backward solve,\n                                 <li><b>HYB_SGS</b> - Hybrid symmetric Gauss-Seidel or SSOR, or\n                                 <li><b>GE</b> - Gaussian elimination.\n                             </ul>",e.help["hypreboomeramg.hypre_smoother"]="<p><b><i>hypre_smoother</i></b> - Specifies the smoother for both the up and down cycles for Hypre/BoomerAMG, <b>hypre_smoother</b> (string, default=HYB_SGS). Only effective if <b>type</b>=AMG and <b>amgpc</b>=HYPRE and <b>hypre_type</b>=BOOMERAMG. Values can be one of the following:\n                             <ul>\n                                 <li><b>JACOBI</b> - Jacobi,\n                                 <li><b>SEQ_SGS</b> - Gauss-Seidel, sequential (very slow!),\n                                 <li><b>HYB_GS</b> - Hybrid Gauss-Seidel or SOR, forward solve,\n                                 <li><b>BACK_HYB_GS</b> - Hybrid Gauss-Seidel or SOR, backward solve,\n                                 <li><b>HYB_SGS</b> - Hybrid symmetric Gauss-Seidel or SSOR, or\n                                 <li><b>GE</b> - Gaussian elimination.\n                             </ul>",e.help["hypreboomeramg.hypre_nodal"]="<p><b><i>hypre_nodal</i></b> - Enable/disable nodal systems coarsening for Hypre/BoomerAMG, <b>hypre_nodal</b> (string, default=Off). Only effective if <b>type</b>=AMG and <b>amgpc</b>=HYPRE and <b>hypre_type</b>=BOOMERAMG. Values may be one of the following:\n                             <ul>\n                                 <li><b>On</b> - Nodal systems coarsening, or\n                                 <li><b>Off</b> - Unknown-based coarsening.\n                             </ul>",e.help["hypreboomeramg.hypre_coarsen"]="<p><b><i>hypre_coarsen</i></b> - Specifies the parallel coarsening algorithm for Hypre/BoomerAMG, <b>hypre_coarsen</b> (string, default=FALGOUT). Only effective if <b>type</b>=AMG and <b>amgpc</b>=HYPRE and <b>hypre_type</b>=BOOMERAMG. Values can be one of the following:\n                             <ul>\n                                 <li><b>CLJP</b> - Cleary-Luby-Jones-Plassman (a parallel coarsening algorithm using independent sets),\n                                 <li><b>RUGE_STEUBEN</b> - Classical Ruge-Steuben on each processor, no boundary treatment (not recommended!),\n                                 <li><b>MODIFIED_RUGE_STEUBEN</b> - Classical Ruge-Steuben on each processor, followed by a third pass, which add coarse points on the boundaries,\n                                 <li><b>FALGOUT</b> - Falgout coarsening (uses RUGE_STEUBEN first, followed by CLJP using the interior coarse points generated by RUGE_STEUBEN as its first independent set),\n                                 <li><b>PMIS</b> - PMIS-coarsening (a parallel coarsening algorithm using independent sets, generating lower complexities than CLJP, might also lead to slower convergence), or\n                                 <li><b>HMIS</b> - HMIS-coarsening (uses one pass RUGE_STEUBEN on each processor independently, followed by PMIS using the interior C-points generated as its first independent set).\n                             </ul>",e.help["hypreboomeramg.html"]="<h2>Hypre/BoomerAMG</h2>\n\n    <p><b><i>hypre_coarsen</i></b> - Specifies the parallel coarsening algorithm for Hypre/BoomerAMG, <b>hypre_coarsen</b> (string, default=FALGOUT). Only effective if <b>type</b>=AMG and <b>amgpc</b>=HYPRE and <b>hypre_type</b>=BOOMERAMG. Values can be one of the following:\n                             <ul>\n                                 <li><b>CLJP</b> - Cleary-Luby-Jones-Plassman (a parallel coarsening algorithm using independent sets),\n                                 <li><b>RUGE_STEUBEN</b> - Classical Ruge-Steuben on each processor, no boundary treatment (not recommended!),\n                                 <li><b>MODIFIED_RUGE_STEUBEN</b> - Classical Ruge-Steuben on each processor, followed by a third pass, which add coarse points on the boundaries,\n                                 <li><b>FALGOUT</b> - Falgout coarsening (uses RUGE_STEUBEN first, followed by CLJP using the interior coarse points generated by RUGE_STEUBEN as its first independent set),\n                                 <li><b>PMIS</b> - PMIS-coarsening (a parallel coarsening algorithm using independent sets, generating lower complexities than CLJP, might also lead to slower convergence), or\n                                 <li><b>HMIS</b> - HMIS-coarsening (uses one pass RUGE_STEUBEN on each processor independently, followed by PMIS using the interior C-points generated as its first independent set).\n                             </ul>\n\n    <p><b><i>hypre_smoother</i></b> - Specifies the smoother for both the up and down cycles for Hypre/BoomerAMG, <b>hypre_smoother</b> (string, default=HYB_SGS). Only effective if <b>type</b>=AMG and <b>amgpc</b>=HYPRE and <b>hypre_type</b>=BOOMERAMG. Values can be one of the following:\n                             <ul>\n                                 <li><b>JACOBI</b> - Jacobi,\n                                 <li><b>SEQ_SGS</b> - Gauss-Seidel, sequential (very slow!),\n                                 <li><b>HYB_GS</b> - Hybrid Gauss-Seidel or SOR, forward solve,\n                                 <li><b>BACK_HYB_GS</b> - Hybrid Gauss-Seidel or SOR, backward solve,\n                                 <li><b>HYB_SGS</b> - Hybrid symmetric Gauss-Seidel or SSOR, or\n                                 <li><b>GE</b> - Gaussian elimination.\n                             </ul>\n\n    <p><b><i>hypre_smoother_dn</i></b> - Specifies the smoother for the down cycles for Hypre/BoomerAMG, <b>hypre_smoother_dn</b> (string, default=HYB_SGS). Only effective if <b>type</b>=AMG and <b>amgpc</b>=HYPRE and <b>hypre_type</b>=BOOMERAMG. Values can be one of the following:\n                             <ul>\n                                 <li><b>JACOBI</b> - Jacobi,\n                                 <li><b>SEQ_SGS</b> - Gauss-Seidel, sequential (very slow!),\n                                 <li><b>HYB_GS</b> - Hybrid Gauss-Seidel or SOR, forward solve,\n                                 <li><b>BACK_HYB_GS</b> - Hybrid Gauss-Seidel or SOR, backward solve,\n                                 <li><b>HYB_SGS</b> - Hybrid symmetric Gauss-Seidel or SSOR, or\n                                 <li><b>GE</b> - Gaussian elimination.\n                             </ul>\n\n    <p><b><i>hypre_smoother_up</i></b> - Specifies the smoother for the up cycles for Hypre/BoomerAMG, <b>hypre_smoother_up</b> (string, default=HYB_SGS). Only effective if <b>type</b>=AMG and <b>amgpc</b>=HYPRE and <b>hypre_type</b>=BOOMERAMG. Values can be one of the following:\n                             <ul>\n                                 <li><b>JACOBI</b> - Jacobi,\n                                 <li><b>SEQ_SGS</b> - Gauss-Seidel, sequential (very slow!),\n                                 <li><b>HYB_GS</b> - Hybrid Gauss-Seidel or SOR, forward solve,\n                                 <li><b>BACK_HYB_GS</b> - Hybrid Gauss-Seidel or SOR, backward solve,\n                                 <li><b>HYB_SGS</b> - Hybrid symmetric Gauss-Seidel or SSOR, or\n                                 <li><b>GE</b> - Gaussian elimination.\n                             </ul>\n\n    <p><b><i>hypre_smoother_co</i></b> - Specifies the smoother for the coarsest level for Hypre/BoomerAMG, <b>hypre_smoother_co</b> (string, default=GE). Only effective if <b>type</b>=AMG and <b>amgpc</b>=HYPRE and <b>hypre_type</b>=BOOMERAMG. Values can be one of the following:\n                             <ul>\n                                 <li><b>JACOBI</b> - Jacobi,\n                                 <li><b>SEQ_SGS</b> - Gauss-Seidel, sequential (very slow!),\n                                 <li><b>HYB_GS</b> - Hybrid Gauss-Seidel or SOR, forward solve,\n                                 <li><b>BACK_HYB_GS</b> - Hybrid Gauss-Seidel or SOR, backward solve,\n                                 <li><b>HYB_SGS</b> - Hybrid symmetric Gauss-Seidel or SSOR, or\n                                 <li><b>GE</b> - Gaussian elimination.\n                             </ul>\n\n    <p><b><i>interp</i></b> - Specifies the parallel interpolation operator for Hypre/BoomerAMG, <b>interp</b> (string, default=CLASSICAL). Only effective if <b>type</b>=AMG and <b>amgpc</b>=HYPRE and <b>hypre_type</b>=BOOMERAMG. Values can be one of the following:\n                             <ul>\n                                 <li><b>CLASSICAL</b> - Classical modified interpolation,\n                                 <li><b>DIRECT</b> - Direct interpolation (with separation of weights),\n                                 <li><b>MULTIPASS</b> - Multipass interpolation,\n                                 <li><b>MULTIPASS_WTS</b> - Multipass interpolation (with separation of weights),\n                                 <li><b>EXT+I</b> - Extended+i interpolation,\n                                 <li><b>EXT+I-CC</b> - Extended+i (if no common C neighbor) interpolation,\n                                 <li><b>STANDARD</b> - Standard interpolation,\n                                 <li><b>STANDARD_WTS</b> - Standard interpolation (with separation of weights),\n                                 <li><b>FF</b> - FF interpolation, or\n                                 <li><b>FF1</b> - FF1 interpolation.\n                             </ul>\n\n    <p><b><i>hypre_nodal</i></b> - Enable/disable nodal systems coarsening for Hypre/BoomerAMG, <b>hypre_nodal</b> (string, default=Off). Only effective if <b>type</b>=AMG and <b>amgpc</b>=HYPRE and <b>hypre_type</b>=BOOMERAMG. Values may be one of the following:\n                             <ul>\n                                 <li><b>On</b> - Nodal systems coarsening, or\n                                 <li><b>Off</b> - Unknown-based coarsening.\n                             </ul>\n    <p><b><i>trunc_factor</i></b> - Specify the truncation factor for the interpolation in Hypre/BoomerAMG, <b>trunc_factor</b> (float, default=0.0). Only effective if <b>type</b>=AMG and <b>amgpc</b>=HYPRE and <b>hypre_type</b>=BOOMERAMG.\n\n    <p><b><i>pmax_elements</i></b> - Set the maximum elements/row for the interpolation for Hypre/BoomerAMG, <b>pmax_elements</b> (integer, default=0). Only effective if <b>type</b>=AMG and <b>amgpc</b>=HYPRE and <b>hypre_type</b>=BOOMERAMG.\n    <p><b><i>agg_num_levels</i></b> - Set number of levels of aggressive coarsening for Hypre/BoomerAMG, <b>agg_num_levels</b> (integer, default=0). Only effective if <b>type</b>=AMG and <b>amgpc</b>=HYPRE and <b>hypre_type</b>=BOOMERAMG.\n    <p><b><i>agg_num_paths</i></b> - Set number of paths for aggressive coarsening for Hypre/BoomerAMG, <b>agg_num_paths</b> (integer, default=1). Only effective if <b>type</b>=AMG and <b>amgpc</b>=HYPRE and <b>hypre_type</b>=BOOMERAMG.\n    <p><b><i>strong_threshold</i></b> - Specify the strength threshold for Hypre/BoomerAMG, <b>strong_threshold</b> (float, default=0.85). Only effective if <b>type</b>=AMG and <b>amgpc</b>=HYPRE and <b>hypre_type</b>=BOOMERAMG. For 2D Laplace operators 0.25 is a good value, for 3D Laplace operators 0.5 or 0.6 is a better value. For elasticity problems, a large strength threshold, such as 0.9, is often better.\n\n    <p><b><i>max_rowsum</i></b> - Set a parameter to modify the definition of strength for diagonally dominant portions of the matrix for Hypre/BoomerAMG, <b>max_rowsum</b> (float, default=0.9). Only effective if <b>type</b>=AMG and <b>amgpc</b>=HYPRE and <b>hypre_type</b>=BOOMERAMG.\n",e.help["hypreboomeramg.agg_num_paths"]="<p><b><i>agg_num_paths</i></b> - Set number of paths for aggressive coarsening for Hypre/BoomerAMG, <b>agg_num_paths</b> (integer, default=1). Only effective if <b>type</b>=AMG and <b>amgpc</b>=HYPRE and <b>hypre_type</b>=BOOMERAMG.",e.help["hypreboomeramg.agg_num_levels"]="<p><b><i>agg_num_levels</i></b> - Set number of levels of aggressive coarsening for Hypre/BoomerAMG, <b>agg_num_levels</b> (integer, default=0). Only effective if <b>type</b>=AMG and <b>amgpc</b>=HYPRE and <b>hypre_type</b>=BOOMERAMG.",e.help["hydrostatic.setid"]="<p><b><i>setid</i></b> - One node set on which the hydrostatic pressure will be applied, <b>setId</b> (integer, required).",e.help["hydrostatic.load_curve"]="    <p><b><i>load_curve</i></b>\n\n    <blockquote>\n\n    <p> A load curve allows for the specification of time-dependent hydrostatic pressure. The load curve is defined as a list of time and factor pairs:\n        <ul>\n            <li>t<sub>i</sub> The time value\n            <li>v<sub>i</sub> The load factor\n        </ul>\n\n    <p><b><i>name</i></b> - A descriptive load curve name (string, required). <b>name</b> is not used in the derived control file. A unique id for each specific load curve is generated underneath the cover of the web interface. While providing a descriptive name is not required, these descriptive names clearly increase usability.</p>\n\n    <p><b><i>time and factor pairs</i></b> -\n       <blockquote>\n          t<sub>1</sub>, v<sub>1</sub><br>\n          t<sub>2</sub>, v<sub>2</sub><br>\n          ï¿¼t<sub>3</sub>, v<sub>3</sub><br>\n          ...<br>\n          t<sub>Npts</sub>, v<sub>Npts</sub><br>\n       </blockquote>\n       </blockquote>",e.help["hydrostatic.amplitude"]="<p><b><i>amplitude</i></b> - Prescribed hydrostatic pressure level, <b>amplitude</b> (float, required).",e.help["hydrostatic-pressure.html"]="<h2>Hydrostatic Pressure</h2>\n\n	<p>Prescribe the hydrostatic pressure. This may be used in conjunction with prescribed pressure boundary conditions, or by itself. When used by itself, it plays two roles.\n	      <ul>\n	          <li>It makes the pressure-Poisson equation non-singular and allows the pressure for the system to be uniquely determined.\n	          <li>When used with prescribed pressure boundary conditions, then it only specifies the unique hydrostatic pressure level for the system.\n	      </ul>\n	<p>In either case, the pressure time-history and field output is adjusted to reflect the specified hydrostatic pressure level.\n\n    <p><b><i>setid</i></b> - One node set on which the hydrostatic pressure will be applied, <b>setId</b> (integer, required).\n\n    <p><b><i>load_curve</i></b>\n\n    <blockquote>\n\n    <p> A load curve allows for the specification of time-dependent hydrostatic pressure. The load curve is defined as a list of time and factor pairs:\n        <ul>\n            <li>t<sub>i</sub> The time value\n            <li>v<sub>i</sub> The load factor\n        </ul>\n\n	<p><b><i>name</i></b> - A descriptive load curve name (string, required). <b>name</b> is not used in the derived control file. A unique id for each specific load curve is generated underneath the cover of the web interface. While providing a descriptive name is not required, these descriptive names clearly increase usability.</p>\n\n    <p><b><i>time and factor pairs</i></b> -\n       <blockquote>\n          t<sub>1</sub>, v<sub>1</sub><br>\n          t<sub>2</sub>, v<sub>2</sub><br>\n          ï¿¼t<sub>3</sub>, v<sub>3</sub><br>\n          ...<br>\n          t<sub>Npts</sub>, v<sub>Npts</sub><br>\n       </blockquote>\n       </blockquote>\n\n    <p><b><i>amplitude</i></b> - Prescribed hydrostatic pressure level, <b>amplitude</b> (float, required).\n",e.help["heatsources.type"]="   <p><b><i>type</i></b> - The type of heat source (string, default=Heat Source). The <b>type</b> must be one of the following:\n                             <ul>\n                                 <li><b>Heat Source</b> - Specifies a volumetric heat source.\n                             </ul>",e.help["heatsources.name"]="<p><b><i>name</i></b> - A descriptive heat source name (string, default=null). <b>name</b> is not used in the derived control file. A unique id for each specific heat source is generated underneath the cover of the web interface. While providing a descriptive name is not required, these descriptive names clearly increase usability.</p>",e.help["heatsource.setids"]="<p><b><i>setids</i></b> - One (or more) node set(s) on which the heat source will be applied, <b>setId</b> (integer, required).",e.help["heatsource.load_curve"]="    <p><b><i>load_curve</i></b>\n\n    <blockquote>\n\n    <p> A load curve allows for the specification of time-dependent body forces. The load curve is defined as a list of time and factor pairs:\n        <ul>\n            <li>t<sub>i</sub> The time value\n            <li>v<sub>i</sub> The load factor\n        </ul>\n\n    <p><b><i>name</i></b> - A descriptive load curve name (string, default=null). <b>name</b> is not used in the derived control file. A unique id for each specific load curve is generated underneath the cover of the web interface. While providing a descriptive name is not required, these descriptive names clearly increase usability.</p>\n\n    <p><b><i>time and factor pairs</i></b> -\n       <blockquote>\n          t<sub>1</sub>, v<sub>1</sub><br>\n          t<sub>2</sub>, v<sub>2</sub><br>\n          ï¿¼t<sub>3</sub>, v<sub>3</sub><br>\n          ...<br>\n          t<sub>Npts</sub>, v<sub>Npts</sub><br>\n       </blockquote>\n       </blockquote>",e.help["heatsource.amplitude"]="<p><b><i>amplitude</i></b> - The volumetric heat source, <b>amplitude</b> (float, default=0.0).",e.help["heatflux.setids"]="<p><b><i>setids</i></b> - One (or more) side-set(s) on which the boundary condition will be applied, <b>setId</b> (integer, required).",e.help["heatflux.load_curve"]="<p><b><i>load_curve</i></b>\n\n    <blockquote>\n\n    <p> A load curve allows for the specification of time-dependent boundary conditions. The load curve is defined as a list of time and factor pairs:\n        <ul>\n            <li>t<sub>i</sub> The time value\n            <li>v<sub>i</sub> The load factor\n        </ul>\n\n    <p><b><i>name</i></b> - A descriptive load curve name (string, default=null). <b>name</b> is not used in the derived control file. A unique id for each specific load curve is generated underneath the cover of the web interface. While providing a descriptive name is not required, these descriptive names clearly increase usability.</p>\n\n    <p><b><i>time and factor pairs</i></b> -\n       <blockquote>\n          t<sub>1</sub>, v<sub>1</sub><br>\n          t<sub>2</sub>, v<sub>2</sub><br>\n          ï¿¼t<sub>3</sub>, v<sub>3</sub><br>\n          ...<br>\n          t<sub>Npts</sub>, v<sub>Npts</sub><br>\n       </blockquote>\n       </blockquote>",e.help["heatflux.amplitude"]="    <p><b><i>amplitude</i></b> - The scalar value of the heat flux boundary condition, <b>amplitude</b> (float, required).",e.help["heat-sources.html"]="<h2>Heat Sources</h2>\n\n	The specification of various heat sources for the momentum equations.\n\n	<p><b><i>name</i></b> - A descriptive heat source name (string, default=null). <b>name</b> is not used in the derived control file. A unique id for each specific heat source is generated underneath the cover of the web interface. While providing a descriptive name is not required, these descriptive names clearly increase usability.</p>\n\n    <p><b><i>type</i></b> - The type of heat source (string, default=Heat Source). The <b>type</b> must be one of the following:\n                             <ul>\n                                 <li><b>Heat Source</b> - Specifies a volumetric heat source.\n                             </ul>\n\n    <p><b>Note</b>: Specifies a volumetric heat source. It may be time-varying, by specifying a load curve. In addition, the heat source may be prescribed for a specific element set (element block) or all element sets in the mesh.\n\n    <h3>Heat Source</h3>\n\n    <p>Specifies a volumetric heat source. It may be time-varying, by specifying a load curve. In addition, the heat source may be prescribed for a specific element set (element block) or all element sets in the mesh.\n\n    <p><b><i>setids</i></b> - One (or more) node set(s) on which the heat source will be applied, <b>setId</b> (integer, required).\n\n    <p><b><i>load_curve</i></b>\n\n    <blockquote>\n\n    <p> A load curve allows for the specification of time-dependent body forces. The load curve is defined as a list of time and factor pairs:\n        <ul>\n            <li>t<sub>i</sub> The time value\n            <li>v<sub>i</sub> The load factor\n        </ul>\n\n	<p><b><i>name</i></b> - A descriptive load curve name (string, default=null). <b>name</b> is not used in the derived control file. A unique id for each specific load curve is generated underneath the cover of the web interface. While providing a descriptive name is not required, these descriptive names clearly increase usability.</p>\n\n    <p><b><i>time and factor pairs</i></b> -\n       <blockquote>\n          t<sub>1</sub>, v<sub>1</sub><br>\n          t<sub>2</sub>, v<sub>2</sub><br>\n          ï¿¼t<sub>3</sub>, v<sub>3</sub><br>\n          ...<br>\n          t<sub>Npts</sub>, v<sub>Npts</sub><br>\n       </blockquote>\n       </blockquote>\n\n    <p><b><i>amplitude</i></b> - The volumetric heat source, <b>amplitude</b> (float, default=0.0).\n",e.help["function.temporal"]="<p>Documentation for temporal function go here...</p>\n",e.help["executioncontrol.nsteps"]='    <p><b><i>Nstep</i></b> - Check execution control file every <b>N<sub>step</sub></b> (integer, default=0) time steps.\n\n    <p><b>Note</b>: The execution directory can be changed by invoking "<code>-e exe_cntl</code>" command line argument.',e.help["execution.html"]='<h2>Execution</h2>\n\n	<h3>Execution Control</h3>\n\n	<p>Activates interaction with the execution control file. When this option is activated, the execution control file (by default, named exe_cntl in the execution directory) is checked (read) every N<sub>step</sub> time steps. To de-active, set N<sub>step</sub> = 0.\n\n	<p><b><i>Nstep</i></b> - Check execution control file every <b>N<sub>step</sub></b> (integer, default=0) time steps.\n\n    <p><b>Note</b>: The execution directory can be changed by invoking "<code>-e exe_cntl</code>" command line argument.\n\n	<h3>Load Balance</h3>\n\n	<p>Hydra provides a number of parallel run-time load-balancing options.\n\n	<p><b><i>method</i></b> -  Specifies the type load balancing, <b>method</b> (string, default=sfc_and_hg). The value must be one of the following:\n                             <ul>\n                                 <li><b>Recursive Coordinate Bisection</b> - Use recursive coordinate bisection for domain decomposition,\n                                 <li><b>Recursive Inertial Bisection</b> - Use recursive inertial bisection for domain decomposition,\n                                 <li><b>Space-Filling Curve</b> - Use a space-filling curve for domain decomposition,\n                                 <li><b>Hypergraph</b> - Use hypergraph domain decomposition, or\n                                 <li><b>Space-Filling Curve followed by Hypergraph</b> - Use a space-filling curve for the initial domain decomposition, followed by a hypergraph partitioning algorithm.\n                             </ul>\n\n    <p><b><i>diagnostics</i></b> - Specify the verbosity of load balance output, <b>diagnostics</b> (string, default=off). Valid values are the following:\n                             <ul>\n                                 <li><b>On</b> - Activate diagnostic output from the load-balancer, or\n                                 <li><b>Off</b> - Suppress diagnostic output from the load-balancer.\n                             </ul>\n',e.help["energy.html"]="<h2>Energy</h2>\n\n	The specification of the form of the energy equation.\n\n    <p><b><i>form</i></b> - The form of the energy equation (string, default=isothermal). The <b>form</b> must be one of the following:\n                             <ul>\n                                 <li><b>Isothermal</b> - No energy equation is solved - the flow is isothermal,\n                                 <li><b>Temperature</b> - The energy equation is solved in terms of temperature,\n                                 <li><b>Enthalpy</b> - The energy equation is solved in terms of specific enthalpy, or\n                                 <li><b>Internal Energy</b> - The energy equation is solved in terms of internal energy.\n                             </ul>\n",e.help["energy.form"]="    <p><b><i>form</i></b> - The form of the energy equation (string, default=isothermal). The <b>form</b> must be one of the following:\n                             <ul>\n                                 <li><b>Isothermal</b> - No energy equation is solved - the flow is isothermal,\n                                 <li><b>Temperature</b> - The energy equation is solved in terms of temperature,\n                                 <li><b>Enthalpy</b> - The energy equation is solved in terms of specific enthalpy, or\n                                 <li><b>Internal Energy</b> - The energy equation is solved in terms of internal energy.\n                             </ul>",e.help["dump.ndump"]='<p><b><i>ndump</i></b> - Output dump files every N<sub>dump</sub> (integer, default=0) time steps.\n\n    <p><b>Note</b>: Dump activates checkpoint-restart files, where a restart file will be written every N<sub>dump</sub> time steps. In addition, a restart file will be written at the termination of the calculation. A restart file may be read on a subsequent invocation of HYDRA with the "<code>-r</code>" command-line option.',e.help["boussinesqforce.setids"]="<p><b><i>setids</i></b> - One (or more) side-set(s) on which the body force will be applied, <b>setId</b> (integer, required).",e.help["boussinesqforce.load_curve"]="   <p><b><i>load_curve</i></b>\n\n    <blockquote>\n\n    <p> A load curve allows for the specification of time-dependent body forces. The load curve is defined as a list of time and factor pairs:\n        <ul>\n            <li>t<sub>i</sub> The time value\n            <li>v<sub>i</sub> The load factor\n        </ul>\n\n    <p><b><i>name</i></b> - A descriptive load curve name (string, default=null). <b>name</b> is not used in the derived control file. A unique id for each specific load curve is generated underneath the cover of the web interface. While providing a descriptive name is not required, these descriptive names clearly increase usability.</p>\n\n    <p><b><i>time and factor pairs</i></b> -\n       <blockquote>\n          t<sub>1</sub>, v<sub>1</sub><br>\n          t<sub>2</sub>, v<sub>2</sub><br>\n          ï¿¼t<sub>3</sub>, v<sub>3</sub><br>\n          ...<br>\n          t<sub>Npts</sub>, v<sub>Npts</sub><br>\n       </blockquote>\n       </blockquote>",e.help["boussinesqforce.amplitude"]="<p><b><i>amplitude</i></b> - The vector values of the gravity force, <b>amplitude</b> (3 x float, default=0.0).",e.help["boundary.type"]="   <p><b><i>type</i></b> - The type of boundary condition (string, default=Scalar Dirichlet). The <b>type</b> must be one of the following:\n                             <ul>\n                                 <li><b>Scalar Dirichlet</b> - Use a scalar Dirichlet boundary conditions,\n                                 <li><b>Velocity Dirichlet</b> - Use a Dirichlet velocity boundary conditions,\n                                 <li><b>Symmetry Velocity</b> - Use a symmetry velocity boundary conditions,\n                                 <li><b>Heat Flux</b> - Use a heat flux boundary condition,\n                                 <li><b>Passive Outflow</b> - Use a passive advective condition for use at outflow boundaries,\n                                 <li><b>Pressure Outflow</b> - Use a pressure outflow boundary condition, or\n                                 <li><b>User-Defined Velocity</b> - Use a user-defined velocity boundary condition.\n                             </ul>",e.help["boundary.name"]="<p><b><i>name</i></b> - A descriptive boundary condition name (string, default=null). <b>name</b> is not used in the derived control file. A unique id for each specific boundary condition is generated underneath the cover of the web interface. While providing a descriptive name is not required, these descriptive names clearly increase usability.</p>",e.help["boundary-conditions.html"]="<h2>Boundary Conditions</h2>\n\n	The specification of boundary conditions for the incompressible Navier-Stokes.\n\n	<p><b><i>name</i></b> - A descriptive boundary condition name (string, default=null). <b>name</b> is not used in the derived control file. A unique id for each specific boundary condition is generated underneath the cover of the web interface. While providing a descriptive name is not required, these descriptive names clearly increase usability.</p>\n\n    <p><b><i>type</i></b> - The type of boundary condition (string, default=Scalar Dirichlet). The <b>type</b> must be one of the following:\n                             <ul>\n                                 <li><b>Scalar Dirichlet</b> - Use a scalar Dirichlet boundary conditions,\n                                 <li><b>Velocity Dirichlet</b> - Use a Dirichlet velocity boundary conditions,\n                                 <li><b>Symmetry Velocity</b> - Use a symmetry velocity boundary conditions,\n                                 <li><b>Heat Flux</b> - Use a heat flux boundary condition,\n                                 <li><b>Passive Outflow</b> - Use a passive advective condition for use at outflow boundaries,\n                                 <li><b>Pressure Outflow</b> - Use a pressure outflow boundary condition, or\n                                 <li><b>User-Defined Velocity</b> - Use a user-defined velocity boundary condition.\n                             </ul>\n\n    <p><b>Note</b>: A symmetry velocity boundary condition specifies a velocity symmetry condition in a coordinate direction on a side-set. The surface normal on the specified side-set is aligned with the coordinate direction.\n\n    <p><b>Note</b>: A passive advective condition for use at outflow boundaries provides a mechanism to suppress artificial re-entrant flow conditions when the outflow boundary is not normal to the primary flow direction.\n\n    <p><b>Note</b>: A pressure outflow boundary condition is typically applied at outflow boundaries where the variation in pressure due to vortical flow structures is large. A pressure outflow boundary condition applies an extrapolated pressure as a traction force on the momentum equations to avoid large pressure jumps at an outflow boundary.\n\n    <p><b>Note</b>: User-defined velocity boundary conditions, within Hydra-TH, use two <i>user-to-edit</i> functions: <code>setUserVel</code> and <code>setUserAcc</code> in the source code file <code>/code/src/FVM/CCIncNavierStokes/UserFunctions/UserVelBC.C</code>, which define a formula for the velocity vector and a formula for the acceleration vector respectively. The functions <code>setUserVel</code> and <code>setUserAcc</code> have access to the mesh class, the material properties, the edge ID, the edge center coordinates, and the time.\n\n    <h3>Scalar Dirichlet Boundary Conditions</h3>\n\n    <p><b><i>scalar</i></b> - The scalar (string, default=pressure). The <b>scalar</b> must be one of the following:\n\n                             <ul>\n                                 <li><b><i>Enthalpy</i></b> - a scalar Dirichlet boundary condition for enthalpy, <b>h</b> (aka enthalpybc, ebc, enthalpy).\n                                 <li><b><i>Turbulent Kinetic Energy</i></b>  - a scalar Dirichlet boundary condition for turbulent kinetic energy, <b>k</b> (aka tkebc, tke).\n                                 <li><b><i>Turbulent Dissipation</i></b>   - a scalar Dirichlet boundary condition for turbulent dissipation, <b>&epsilon;</b> (aka epsbc, eps).\n                                 <li><b><i>Distance Function</i></b>   - a scalar Dirichlet boundary condition for distance function (aka distancebc, dist, distance).\n                                 <li><b><i>Hydrodynamic Pressure</i></b>   - a scalar Dirichlet boundary condition for hydrodynamic pressure, <b>p</b> (aka pressurebc, pbc, pressure).\n                                 <li><b><i>Temperature</i></b>   - a scalar Dirichlet boundary condition for temperature, <b>T</b> (aka temperaturebc, tbc, temperature).\n                                 <li><b><i>Turbulent Viscosity</i></b>  - a scalar Dirichlet boundary condition for turbulent viscosity, <b>&upsilon;</b> (aka turbnubc, turbnu).\n                             </ul>\n\n    <p><b><i>setids</i></b> - One (or more) side-set(s) on which the boundary condition will be applied, <b>setId</b> (integer, required).\n\n    <p><b><i>load_curve</i></b>\n\n    <blockquote>\n\n    <p> A load curve allows for the specification of time-dependent boundary conditions. The load curve is defined as a list of time and factor pairs:\n        <ul>\n            <li>t<sub>i</sub> The time value\n            <li>v<sub>i</sub> The load factor\n        </ul>\n\n	<p><b><i>name</i></b> - A descriptive load curve name (string, default=null). <b>name</b> is not used in the derived control file. A unique id for each specific load curve is generated underneath the cover of the web interface. While providing a descriptive name is not required, these descriptive names clearly increase usability.</p>\n\n    <p><b><i>time and factor pairs</i></b> -\n       <blockquote>\n          t<sub>1</sub>, v<sub>1</sub><br>\n          t<sub>2</sub>, v<sub>2</sub><br>\n          ï¿¼t<sub>3</sub>, v<sub>3</sub><br>\n          ...<br>\n          t<sub>Npts</sub>, v<sub>Npts</sub><br>\n       </blockquote>\n       </blockquote>\n\n    <p><b><i>amplitude</i></b> - The scalar value of the boundary condition, <b>amplitude</b> (float, required).\n\n    <h3>Velocity Dirichlet Boundary Conditions</h3>\n\n    <p><b><i>setids</i></b> - One (or more) side-set(s) on which the boundary condition will be applied, <b>setId</b> (integer, required).\n\n    <p><b><i>load_curve</i></b>\n\n    <blockquote>\n\n    <p> A load curve allows for the specification of time-dependent boundary conditions. The load curve is defined as a list of time and factor pairs:\n        <ul>\n            <li>t<sub>i</sub> The time value\n            <li>v<sub>i</sub> The load factor\n        </ul>\n\n	<p><b><i>name</i></b> - A descriptive load curve name (string, default=null). <b>name</b> is not used in the derived control file. A unique id for each specific load curve is generated underneath the cover of the web interface. While providing a descriptive name is not required, these descriptive names clearly increase usability.</p>\n\n    <p><b><i>time and factor pairs</i></b> -\n       <blockquote>\n          t<sub>1</sub>, v<sub>1</sub><br>\n          t<sub>2</sub>, v<sub>2</sub><br>\n          ï¿¼t<sub>3</sub>, v<sub>3</sub><br>\n          ...<br>\n          t<sub>Npts</sub>, v<sub>Npts</sub><br>\n       </blockquote>\n       </blockquote>\n\n    <p><b><i>amplitude</i></b> - The vector values of the velocity boundary condition, <b>amplitude</b> (3 x float, required).\n\n    <h3>Symmetry Dirichlet Boundary Conditions</h3>\n\n    <p>A symmetry velocity boundary condition specifies a velocity symmetry condition in a coordinate direction on a side-set. The surface normal on the specified side-set is aligned with the coordinate direction.\n\n    <p><b><i>setids</i></b> - One (or more) side-set(s) on which the boundary condition will be applied, <b>setId</b> (integer, required).\n\n    <p><b><i>load_curve</i></b>\n\n    <blockquote>\n\n    <p> A load curve allows for the specification of time-dependent boundary conditions. The load curve is defined as a list of time and factor pairs:\n        <ul>\n            <li>t<sub>i</sub> The time value\n            <li>v<sub>i</sub> The load factor\n        </ul>\n\n	<p><b><i>name</i></b> - A descriptive load curve name (string, default=null). <b>name</b> is not used in the derived control file. A unique id for each specific load curve is generated underneath the cover of the web interface. While providing a descriptive name is not required, these descriptive names clearly increase usability.</p>\n\n    <p><b><i>time and factor pairs</i></b> -\n       <blockquote>\n          t<sub>1</sub>, v<sub>1</sub><br>\n          t<sub>2</sub>, v<sub>2</sub><br>\n          ï¿¼t<sub>3</sub>, v<sub>3</sub><br>\n          ...<br>\n          t<sub>Npts</sub>, v<sub>Npts</sub><br>\n       </blockquote>\n       </blockquote>\n\n    <p><b><i>amplitude</i></b> - The vector values of the symmetry velocity boundary condition, <b>amplitude</b> (3 x float, required).\n\n    <h3>Heat Flux Boundary Conditions</h3>\n\n    <p><b><i>setids</i></b> - One (or more) side-set(s) on which the boundary condition will be applied, <b>setId</b> (integer, required).\n\n    <p><b><i>load_curve</i></b>\n\n    <blockquote>\n\n    <p> A load curve allows for the specification of time-dependent boundary conditions. The load curve is defined as a list of time and factor pairs:\n        <ul>\n            <li>t<sub>i</sub> The time value\n            <li>v<sub>i</sub> The load factor\n        </ul>\n\n	<p><b><i>name</i></b> - A descriptive load curve name (string, default=null). <b>name</b> is not used in the derived control file. A unique id for each specific load curve is generated underneath the cover of the web interface. While providing a descriptive name is not required, these descriptive names clearly increase usability.</p>\n\n    <p><b><i>time and factor pairs</i></b> -\n       <blockquote>\n          t<sub>1</sub>, v<sub>1</sub><br>\n          t<sub>2</sub>, v<sub>2</sub><br>\n          ï¿¼t<sub>3</sub>, v<sub>3</sub><br>\n          ...<br>\n          t<sub>Npts</sub>, v<sub>Npts</sub><br>\n       </blockquote>\n       </blockquote>\n\n    <p><b><i>amplitude</i></b> - The scalar value of the heat flux boundary condition, <b>amplitude</b> (float, required).\n\n    <h3>Passive Outflow Boundary Conditions</h3>\n\n    <p>A passive advective condition for use at outflow boundaries provides a mechanism to suppress artificial re-entrant flow conditions when the outflow boundary is not normal to the primary flow direction.\n\n    <p><b><i>setids</i></b> - One (or more) side-set(s) on which the boundary condition will be applied, <b>setId</b> (integer, required).\n\n    <h3>Pressure Outflow Boundary Conditions</h3>\n\n    <p>A pressure outflow boundary condition is typically applied at outflow boundaries where the variation in pressure due to vortical flow structures is large. A pressure outflow boundary condition applies an extrapolated pressure as a traction force on the momentum equations to avoid large pressure jumps at an outflow boundary.\n\n    <p><b><i>setids</i></b> - One (or more) side-set(s) on which the boundary condition will be applied, <b>setId</b> (integer, required).\n\n    <h3>User-Defined Velocity Boundary Conditions</h3>\n\n    <p>User-defined velocity boundary conditions, within Hydra-TH, use two <i>user-to-edit</i> functions: <code>setUserVel</code> and <code>setUserAcc</code> in the source code file <code>/code/src/FVM/CCIncNavierStokes/UserFunctions/UserVelBC.C</code>, which define a formula for the velocity vector and a formula for the acceleration vector respectively. The functions <code>setUserVel</code> and <code>setUserAcc</code> have access to the mesh class, the material properties, the edge ID, the edge center coordinates, and the time.\n\n    <p><b><i>setids</i></b> - One (or more) side-set(s) on which the boundary condition will be applied, <b>setId</b> (integer, required).\n",e.help["bodyforces.type"]="   <p><b><i>type</i></b> - The type of body force (string, default=Body Force). The <b>type</b> must be one of the following:\n                             <ul>\n                                 <li><b>Body Force</b> - Specifies a body force for the momentum equation,\n                                 <li><b>Boussinesq Force</b> - Specifies a body force using the Boussinesq approximation to represent the buoyant forces induced by temperature, and\n                                 <li><b>Porous Drag Force</b> - Specifies the application of a porous drag force for the momentum equations.\n                             </ul>",e.help["bodyforces.name"]="<p><b><i>name</i></b> - A descriptive body force name (string, default=null). <b>name</b> is not used in the derived control file. A unique id for each specific body force is generated underneath the cover of the web interface. While providing a descriptive name is not required, these descriptive names clearly increase usability.</p>",e.help["bodyforce.setids"]="<p><b><i>setids</i></b> - One (or more) side-set(s) on which the body force will be applied, <b>setId</b> (integer, required).",e.help["bodyforce.load_curve"]="<p><b><i>load_curve</i></b>\n\n<blockquote>\n\n<p> A load curve allows for the specification of time-dependent body forces. The load curve is defined as a list of time and factor pairs:\n    <ul>\n        <li>t<sub>i</sub> The time value\n        <li>v<sub>i</sub> The load factor\n    </ul>\n\n<p><b><i>name</i></b> - A descriptive load curve name (string, default=null). <b>name</b> is not used in the derived control file. A unique id for each specific load curve is generated underneath the cover of the web interface. While providing a descriptive name is not required, these descriptive names clearly increase usability.</p>\n\n<p><b><i>time and factor pairs</i></b> -\n   <blockquote>\n      t<sub>1</sub>, v<sub>1</sub><br>\n      t<sub>2</sub>, v<sub>2</sub><br>\n      ï¿¼t<sub>3</sub>, v<sub>3</sub><br>\n      ...<br>\n      t<sub>Npts</sub>, v<sub>Npts</sub><br>\n   </blockquote>\n   </blockquote>\n",e.help["bodyforce.amplitude"]="    <p><b><i>amplitude</i></b> - The vector values of the body force, <b>amplitude</b> (3 x float, default=0.0).",e.help["body-forces.html"]="<h2>Body Forces</h2>\n\n	The specification of various body forces for the momentum equations.\n\n	<p><b><i>name</i></b> - A descriptive body force name (string, default=null). <b>name</b> is not used in the derived control file. A unique id for each specific body force is generated underneath the cover of the web interface. While providing a descriptive name is not required, these descriptive names clearly increase usability.</p>\n\n    <p><b><i>type</i></b> - The type of body force (string, default=Body Force). The <b>type</b> must be one of the following:\n                             <ul>\n                                 <li><b>Body Force</b> - Specifies a body force for the momentum equation,\n                                 <li><b>Boussinesq Force</b> - Specifies a body force using the Boussinesq approximation to represent the buoyant forces induced by temperature, and\n                                 <li><b>Porous Drag Force</b> - Specifies the application of a porous drag force for the momentum equations.\n                             </ul>\n\n    <p><b>Note</b>: Specifies a body force for the momentum equation. It may be time-varying, by specifying a load curve. In addition, the body force may be prescribed for a specific element set (element block) or all element sets in the mesh.\n\n    <p><b>Note</b>: Specifies a body force using the Boussinesq approximation to represent the buoyant forces induced by temperature. This body force is only active when the energy equation is solved in conjunction with the momentum equations. A load curve may be used to represent the effects of a time- dependent gravity field. The Boussinesq body force may be prescribed for a specific element set (element block) or all element sets in the mesh.\n\n    <p><b>Note</b>: Specifies the application of a porous drag force for the momentum equations. The drag force may be time-varying, by specifying a load curve. In addition, the drag force may be prescribed for a specific element set (element block) or all element sets in the mesh.\n\n    <h3>Body Force</h3>\n\n    <p>Specifies a body force for the momentum equation. It may be time-varying, by specifying a load curve. In addition, the body force may be prescribed for a specific element set (element block) or all element sets in the mesh.\n\n    <p><b><i>setids</i></b> - One (or more) side-set(s) on which the body force will be applied, <b>setId</b> (integer, required).\n\n    <p><b><i>load_curve</i></b>\n\n    <blockquote>\n\n    <p> A load curve allows for the specification of time-dependent body forces. The load curve is defined as a list of time and factor pairs:\n        <ul>\n            <li>t<sub>i</sub> The time value\n            <li>v<sub>i</sub> The load factor\n        </ul>\n\n	<p><b><i>name</i></b> - A descriptive load curve name (string, default=null). <b>name</b> is not used in the derived control file. A unique id for each specific load curve is generated underneath the cover of the web interface. While providing a descriptive name is not required, these descriptive names clearly increase usability.</p>\n\n    <p><b><i>time and factor pairs</i></b> -\n       <blockquote>\n          t<sub>1</sub>, v<sub>1</sub><br>\n          t<sub>2</sub>, v<sub>2</sub><br>\n          ï¿¼t<sub>3</sub>, v<sub>3</sub><br>\n          ...<br>\n          t<sub>Npts</sub>, v<sub>Npts</sub><br>\n       </blockquote>\n       </blockquote>\n\n    <p><b><i>amplitude</i></b> - The vector values of the body force, <b>amplitude</b> (3 x float, default=0.0).\n\n    <h3>Boussinesq Force</h3>\n\n    <p>Specifies a body force using the Boussinesq approximation to represent the buoyant forces induced by temperature. This body force is only active when the energy equation is solved in conjunction with the momentum equations. A load curve may be used to represent the effects of a time- dependent gravity field. The Boussinesq body force may be prescribed for a specific element set (element block) or all element sets in the mesh.\n\n    <p><b><i>setids</i></b> - One (or more) side-set(s) on which the body force will be applied, <b>setId</b> (integer, required).\n\n    <p><b><i>load_curve</i></b>\n\n    <blockquote>\n\n    <p> A load curve allows for the specification of time-dependent body forces. The load curve is defined as a list of time and factor pairs:\n        <ul>\n            <li>t<sub>i</sub> The time value\n            <li>v<sub>i</sub> The load factor\n        </ul>\n\n	<p><b><i>name</i></b> - A descriptive load curve name (string, default=null). <b>name</b> is not used in the derived control file. A unique id for each specific load curve is generated underneath the cover of the web interface. While providing a descriptive name is not required, these descriptive names clearly increase usability.</p>\n\n    <p><b><i>time and factor pairs</i></b> -\n       <blockquote>\n          t<sub>1</sub>, v<sub>1</sub><br>\n          t<sub>2</sub>, v<sub>2</sub><br>\n          ï¿¼t<sub>3</sub>, v<sub>3</sub><br>\n          ...<br>\n          t<sub>Npts</sub>, v<sub>Npts</sub><br>\n       </blockquote>\n       </blockquote>\n\n    <p><b><i>amplitude</i></b> - The vector values of the gravity force, <b>amplitude</b> (3 x float, default=0.0).\n\n    <h3>Porous Drag Force</h3>\n\n    <p>Specifies the application of a porous drag force for the momentum equations. The drag force may be time-varying, by specifying a load curve. In addition, the drag force may be prescribed for a specific element set (element block) or all element sets in the mesh.\n\n    <p><b><i>setids</i></b> - One (or more) side-set(s) on which the body force will be applied, <b>setId</b> (integer, required).\n\n    <p><b><i>load_curve</i></b>\n\n    <blockquote>\n\n    <p> A load curve allows for the specification of time-dependent body forces. The load curve is defined as a list of time and factor pairs:\n        <ul>\n            <li>t<sub>i</sub> The time value\n            <li>v<sub>i</sub> The load factor\n        </ul>\n\n	<p><b><i>name</i></b> - A descriptive load curve name (string, default=null). <b>name</b> is not used in the derived control file. A unique id for each specific load curve is generated underneath the cover of the web interface. While providing a descriptive name is not required, these descriptive names clearly increase usability.</p>\n\n    <p><b><i>time and factor pairs</i></b> -\n       <blockquote>\n          t<sub>1</sub>, v<sub>1</sub><br>\n          t<sub>2</sub>, v<sub>2</sub><br>\n          ï¿¼t<sub>3</sub>, v<sub>3</sub><br>\n          ...<br>\n          t<sub>Npts</sub>, v<sub>Npts</sub><br>\n       </blockquote>\n       </blockquote>\n\n    <p><b><i>amplitude</i></b> - The scalar value of the porous drag force, <b>amplitude</b> (float, default=1.0).\n",e.help["ascii.prtlev"]="<p><b><i>prtlev</i></b> - The amount of data to output, <b>prtlev</b> (string, default=param). Valid values are the following:\n                             <ul>\n                                 <li><b>Primary Code Options Only</b> - Suppresses all output except for a data echo of the primary code options,\n                                 <li><b>Mesh Coordinates and Topology</b> - Produces data echo of the mesh coordinates and topology, or\n                                 <li><b>Primitive Variables</b> - Produces a data echo of the primitive variables every N<sub>print</sub> time steps.\n                             </ul>\n\n    <p><b>Note</b>: Controls the amount of data written to the ASCII (human-readable) output file.",e.help["ascii.nprint"]="<p><b><i>nprint</i></b> - Output ASCII files every N<sub>print</sub> (integer, default=10) time steps.",e.extract=function(e,i){function t(t,n,a){return e.extractEnumValues(t,n,a,i.external)
}function n(e){for(var i=[],t=e.length;t--;)i=i.concat(e[t]);return i}var a={data:{},valid:!0,errors:[]},l=null,r=0,s=null;a.data.title=i.name;try{l=i.data.execution[0],a.data.load_balance={method:t("LoadBalance","loadbalance.method",l),diagnostics:t("LoadBalance","loadbalance.diagnostics",l)}}catch(o){a.errors.push("Load balancing not valid"),a.errors.push("=> "+o.message),a.valid=!1}try{for(a.data.materials=[],s=i.data.material,r=s.length;r--;)a.data.materials.push({rho:s[r].Material["material.rho"],cp:s[r].Material["material.cp"],cv:s[r].Material["material.cv"],k:s[r].Material["material.k"],mu:s[r].Material["material.mu"],tref:s[r].Material["material.tref"],beta:s[r].Material["material.beta"],rigid:t("Material","material.rigid",s[r]),vel:s[r].Material["material.vel"],blockids:n(t("Material","block.tags",s[r])),type:t("Material","material.type",s[r]),name:s[r].name})}catch(o){a.errors.push("Material section not valid"),a.errors.push("=> "+o.message),a.valid=!1}try{a.data.exe_control={nstep:i.data.execution[0].ExecutionControl["executioncontrol.nstep"]}}catch(o){a.errors.push("Execution control section not valid"),a.errors.push("=> "+o.message),a.valid=!1}try{l=i.data.output[0],a.data.output={dump:i.data.output[0].Output["dump.ndump"],plti:i.data.output[0].Output["plot.nplot"],prtlev:t("Output","ascii.prtlev",l),prti:i.data.output[0].Output["ascii.prti"],thti:i.data.output[0].Output["timehistory.nstep"],ttyi:i.data.output[0].Output["velocityminmax.nstep"],pltype:t("Plot","plot.pltype",l),filetype:t("Plot","plot.filetype",l),histvar:{TimeHistoryElem:[],TimeHistoryNode:[],TimeHistorySide:[]},plotvar:{elem:t("Plot","plot.evariables",l),node:t("Plot","plot.nvariables",l),side:[]}}}catch(o){a.errors.push("Output section not valid"),a.errors.push("=> "+o.message),a.valid=!1}try{for(s=i.data.histvar,r=s?s.length:0;r--;){var u=e.extractOrSelection(s[r])[0];a.data.output.histvar[u].push({ids:n(t(u,"timehistory.tags",s[r])),vars:[].concat(t(u,"timehistory.variables",s[r]))})}}catch(o){a.errors.push("Time History (histvar) section not valid"),a.errors.push("=> "+o.message),a.valid=!1}if(i.data.plotvar)try{for(s=i.data.plotvar,r=s.length;r--;)console.log("++++++++++++++"),console.log(s[r].PlotSide),console.log("++++++++++++++"),a.data.output.plotvar.side.push({ids:t("PlotSide","face.tags",s[r]),vars:t("PlotSide","plot.svariables",s[r])})}catch(o){a.errors.push("Plot Variable (plotvar) section not valid"),a.errors.push("=> "+o.message),a.valid=!1}try{a.data.time={nsteps:i.data.time[0].Time["time.nstep"],deltat:i.data.time[0].Time["time.deltat"],term:i.data.time[0].Time["time.term"],type:t("TimeIntegration","timeintegration.type",i.data.time[0]),CFLinit:i.data.time[0].TimeIntegration["timeintegration.CFLinit"],CFLmax:i.data.time[0].TimeIntegration["timeintegration.CFLmax"],dtmax:i.data.time[0].TimeIntegration["timeintegration.dtmax"],dtscale:i.data.time[0].TimeIntegration["timeintegration.dtscale"],thetaa:i.data.time[0].TimeIntegration["timeintegration.thetaA"],thetak:i.data.time[0].TimeIntegration["timeintegration.thetaK"],thetaf:i.data.time[0].TimeIntegration["timeintegration.thetaF"]}}catch(o){a.errors.push("Time Step and Time integration section not valid"),a.errors.push("=> "+o.message),a.valid=!1}try{if(a.data.plotstatvar={elem:[].concat(t("TurbulenceStatistics","turbulencestatistics.evariables",i.data.output[0])),node:[].concat(t("TurbulenceStatistics","turbulencestatistics.nvariables",i.data.output[0])),side:[],starttime:i.data.output[0].TurbulenceStatistics["turbulencestatistics.starttime"],endtime:i.data.output[0].TurbulenceStatistics["turbulencestatistics.endtime"],plotwinsize:i.data.output[0].TurbulenceStatistics["turbulencestatistics.plotwinsize"]},i.data.plotstatvar)for(s=i.data.plotstatvar,r=s.length;r--;)a.data.plotstatvar.side.push({ids:t("TurbulenceStatisticsSide","face.tags",s[r]),vars:t("TurbulenceStatisticsSide","turbulencestatistics.svariables",s[r])})}catch(o){a.errors.push("Turbulence Statistics section not valid"),a.errors.push("=> "+o.message),a.valid=!1}try{a.data.energy={form:t("Energy","energy.form",i.data.solvers[0])}}catch(o){a.errors.push("Energy section not valid"),a.errors.push("=> "+o.message),a.valid=!1}try{a.data.hstat=[]}catch(o){a.errors.push("Hydrostat section not valid"),a.errors.push("=> "+o.message),a.valid=!1}try{a.data.initial={vel:i.data.initial[0].Initial["initial.vel"],tke:i.data.initial[0].Initial["initial.tke"],eps:i.data.initial[0].Initial["initial.eps"],omega:i.data.initial[0].Initial["initial.omega"],turbnu:i.data.initial[0].Initial["initial.turbnu"],temperature:i.data.initial[0].Initial["initial.temperature"],enthalpy:i.data.initial[0].Initial["initial.enthalpy"],init_energy:i.data.initial[0].Initial["initial.init_energy"]}}catch(o){a.errors.push("Initial conditions section not valid"),a.errors.push("=> "+o.message),a.valid=!1}try{a.data.forces={body_force:[],boussinesqforce:[],porous_drag:[]}}catch(o){a.errors.push("Forces section not valid"),a.errors.push("=> "+o.message),a.valid=!1}try{for(a.data.boundary_conditions={},s=i.data.boundary,r=s?s.length:0;r--;){var u=e.extractOrSelection(s[r])[0];if(-1!==["ScalarDirichlet","VelocityDirichlet","SymmetryVelocity","HeatFlux"].indexOf(u)){var b=e.definition.definitions[u].value;void 0===b&&(console.log("No groupName => scalar"),console.log(u),console.log(s[r]),b=t(u,"scalar",s[r])),void 0===a.data.boundary_conditions[b]&&(a.data.boundary_conditions[b]=[]),a.data.boundary_conditions[b].push({comment:s[r].name,ids:n(t(u,"face.tags",s[r])),curveId:s[r][u].name,amplitude:s[r][u].amplitude})}else if(-1!==["PassiveOutflow","PressureOutflow","User-DefinedVelocity"].indexOf(u)){var b=e.definition.definitions[u].value;void 0===a.data.boundary_conditions[b]&&(a.data.boundary_conditions[b]=[]),a.data.boundary_conditions[b].push({comment:s[r].name,ids:n(t(u,"face.tags",s[r]))})}}}catch(o){a.errors.push("Boundary Conditions section not valid"),a.errors.push("=> "+o.message),a.valid=!1}try{a.data.heat_sources=[]}catch(o){a.errors.push("Heat sources section not valid"),a.errors.push("=> "+o.message),a.valid=!1}try{a.data.ppesolver={trunc_factor:i.data.solvers[0].HypreBoomerAMG["hypreboomeramg.trunc_factor"],pmax_elements:i.data.solvers[0].HypreBoomerAMG["hypreboomeramg.pmax_elements"],agg_num_levels:i.data.solvers[0].HypreBoomerAMG["hypreboomeramg.agg_num_levels"],agg_num_paths:i.data.solvers[0].HypreBoomerAMG["hypreboomeramg.agg_num_paths"],strong_threshold:i.data.solvers[0].HypreBoomerAMG["hypreboomeramg.strong_threshold"],max_rowsum:i.data.solvers[0].HypreBoomerAMG["hypreboomeramg.max_rowsum"],smoother:t("MLAMG","mlamg.smoother",i.data.solvers[0]),pre_smooth:i.data.solvers[0].Pressure["pressuresolver.pre_smooth"],post_smooth:i.data.solvers[0].Pressure["pressuresolver.post_smooth"],levels:i.data.solvers[0].Pressure["pressuresolver.levels"],itmax:i.data.solvers[0].Pressure["pressuresolver.itmax"],itchk:i.data.solvers[0].Pressure["pressuresolver.itchk"],eps:i.data.solvers[0].Pressure["pressuresolver.eps"],zeropivot:i.data.solvers[0].Pressure["pressuresolver.pivot"],type:t("Pressure","pressuresolver.type",i.data.solvers[0]),amgpc:t("Pressure","pressuresolver.amgpc",i.data.solvers[0]),hypre_type:t("Pressure","pressuresolver.hypre_type",i.data.solvers[0]),diagnostics:t("Pressure","pressuresolver.diagnostics",i.data.solvers[0]),convergence:t("Pressure","pressuresolver.convergence",i.data.solvers[0]),cycle:t("Pressure","pressuresolver.cycle",i.data.solvers[0]),solver:t("Pressure","pressuresolver.solver",i.data.solvers[0]),hypre_coarsen_type:t("HypreBoomerAMG","hypreboomeramg.hypre_coarsen_type",i.data.solvers[0]),hypre_smoother:t("HypreBoomerAMG","hypreboomeramg.hypre_smoother",i.data.solvers[0]),hypre_smoother_dn:t("HypreBoomerAMG","hypreboomeramg.hypre_smoother_dn",i.data.solvers[0]),hypre_smoother_up:t("HypreBoomerAMG","hypreboomeramg.hypre_smoother_up",i.data.solvers[0]),hypre_smoother_co:t("HypreBoomerAMG","hypreboomeramg.hypre_smoother_co",i.data.solvers[0]),interp_type:t("HypreBoomerAMG","hypreboomeramg.interp_type",i.data.solvers[0]),hypre_nodal:t("HypreBoomerAMG","hypreboomeramg.hypre_nodal",i.data.solvers[0])},a.data.momentumsolver={restart:i.data.solvers[0].Momentum["momentumsolver.restart"],itmax:i.data.solvers[0].Momentum["momentumsolver.itmax"],itchk:i.data.solvers[0].Momentum["momentumsolver.itchk"],eps:i.data.solvers[0].Momentum["momentumsolver.eps"],type:t("Momentum","momentumsolver.type",i.data.solvers[0]),diagnostics:t("Momentum","momentumsolver.diagnostics",i.data.solvers[0]),convergence:t("Momentum","momentumsolver.convergence",i.data.solvers[0])},a.data.transportsolver={restart:i.data.solvers[0].TransportSolver["transportsolver.restart"],itmax:i.data.solvers[0].TransportSolver["transportsolver.itmax"],itchk:i.data.solvers[0].TransportSolver["transportsolver.itchk"],eps:i.data.solvers[0].TransportSolver["transportsolver.eps"],type:t("TransportSolver","transportsolver.type",i.data.solvers[0]),diagnostics:t("TransportSolver","transportsolver.diagnostics",i.data.solvers[0]),convergence:t("TransportSolver","transportsolver.convergence",i.data.solvers[0])}}catch(o){a.errors.push("Pressure, Momentum and Transport Solvers section not valid"),a.errors.push("=> "+o.message),a.valid=!1}try{a.data.solution={itmax:i.data.solution[0].SolutionMethod["solutionmethod.nitmax"],nvec:i.data.solution[0].SolutionMethod["solutionmethod.nvec"],eps:i.data.solution[0].SolutionMethod["solutionmethod.eps"],eps_dist:i.data.solution[0].SolutionMethod["solutionmethod.eps_dist"],eps_p0:i.data.solution[0].SolutionMethod["solutionmethod.eps_p0"],drop_tol:i.data.solution[0].SolutionMethod["solutionmethod.drop_tol"],strategy:t("SolutionMethod","solutionmethod.strategy",i.data.solution[0]),error_norm:t("SolutionMethod","solutionmethod.error_norm",i.data.solution[0]),timestep_control:t("SolutionMethod","solutionmethod.timestep_control",i.data.solution[0]),convergence:t("SolutionMethod","solutionmethod.convergence",i.data.solution[0]),subcycle:t("SolutionMethod","solutionmethod.subcycle",i.data.solution[0]),diagnostics:t("SolutionMethod","solutionmethod.diagnostics",i.data.solution[0])}}catch(o){a.errors.push("Solution method section not valid"),a.errors.push("=> "+o.message),a.valid=!1}try{var c=e.extractOrSelection(i.data.turbulence[0])[0];a.data.turbulence={model:e.definition.definitions[c].value,timescale_limiter:t("RNG_ke","rgn_ke.timescale_limiter",i.data.turbulence[0]),c_s:i.data.turbulence[0].Smagorinsky["smagorinsky.c_s"],prandtl_s:i.data.turbulence[0].Smagorinsky["smagorinsky.prandtl"],schmidt_s:i.data.turbulence[0].Smagorinsky["smagorinsky.schmidt"],c_w:i.data.turbulence[0].WALE["wale.c_w"],prandtl_w:i.data.turbulence[0].WALE["wale.prandtl"],schmidt_w:i.data.turbulence[0].WALE["wale.schmidt"]}}catch(o){a.errors.push("Turbulence models section not valid"),a.errors.push("=> "+o.message),a.valid=!1}return console.log(i),console.log(a),a},e.template=function(e){var t,n=[],a=e||{};return function(e,a,l,r,s,o,u,b,c,p,d,m,h,f,v,y,g){n.push("\ntitle\n"+i.escape(null==(t=v)?"":t)+"\n \ncc_navierstokes \n \n \n  load_balance\n    method       "+i.escape(null==(t=u.method)?"":t)+"\n    diagnostics  "+i.escape(null==(t=u.diagnostics)?"":t)+"\n  end\n \n  # Materials"),function(){var e=b;if("number"==typeof e.length)for(var a=0,l=e.length;l>a;a++){var r=e[a];n.push(" \n  material # "+i.escape(null==(t=r.name)?"":t)+"\n      id     "+i.escape(null==(t=a+1)?"":t)+"\n      rho    "+i.escape(null==(t=r.rho)?"":t)+"\n      Cp     "+i.escape(null==(t=r.cp)?"":t)+"\n      Cv     "+i.escape(null==(t=r.cv)?"":t)+"\n      k11    "+i.escape(null==(t=r.k[0])?"":t)+"\n      k12    "+i.escape(null==(t=r.k[1])?"":t)+"\n      k13    "+i.escape(null==(t=r.k[2])?"":t)+"\n      k22    "+i.escape(null==(t=r.k[3])?"":t)+"\n      k23    "+i.escape(null==(t=r.k[4])?"":t)+"\n      k33    "+i.escape(null==(t=r.k[5])?"":t)+"\n      mu     "+i.escape(null==(t=r.mu)?"":t)+"\n      beta   "+i.escape(null==(t=r.beta)?"":t)+"\n      Tref   "+i.escape(null==(t=r.tref)?"":t)+"\n      rigid  "+i.escape(null==(t=r.rigid)?"":t)+"\n      velx   "+i.escape(null==(t=r.vel[0])?"":t)+"\n      vely   "+i.escape(null==(t=r.vel[1])?"":t)+"\n      velz   "+i.escape(null==(t=r.vel[2])?"":t)+"\n  end\n  \n  materialset # "+i.escape(null==(t=r.name)?"":t)+"\n      id        "+i.escape(null==(t=a+1)?"":t)+"\n      material  "+i.escape(null==(t=a+1)?"":t)+"\n      type      "+i.escape(null==(t=r.type)?"":t)+"\n "),function(){var e=r.blockids;if("number"==typeof e.length)for(var a=0,l=e.length;l>a;a++){var s=e[a];n.push("     block     "+i.escape(null==(t=s)?"":t)+"\n ")}else{var l=0;for(var a in e){l++;var s=e[a];n.push("     block     "+i.escape(null==(t=s)?"":t)+"\n ")}}}.call(this),n.push("  end\n ")}else{var l=0;for(var a in e){l++;var r=e[a];n.push(" \n  material # "+i.escape(null==(t=r.name)?"":t)+"\n      id     "+i.escape(null==(t=a+1)?"":t)+"\n      rho    "+i.escape(null==(t=r.rho)?"":t)+"\n      Cp     "+i.escape(null==(t=r.cp)?"":t)+"\n      Cv     "+i.escape(null==(t=r.cv)?"":t)+"\n      k11    "+i.escape(null==(t=r.k[0])?"":t)+"\n      k12    "+i.escape(null==(t=r.k[1])?"":t)+"\n      k13    "+i.escape(null==(t=r.k[2])?"":t)+"\n      k22    "+i.escape(null==(t=r.k[3])?"":t)+"\n      k23    "+i.escape(null==(t=r.k[4])?"":t)+"\n      k33    "+i.escape(null==(t=r.k[5])?"":t)+"\n      mu     "+i.escape(null==(t=r.mu)?"":t)+"\n      beta   "+i.escape(null==(t=r.beta)?"":t)+"\n      Tref   "+i.escape(null==(t=r.tref)?"":t)+"\n      rigid  "+i.escape(null==(t=r.rigid)?"":t)+"\n      velx   "+i.escape(null==(t=r.vel[0])?"":t)+"\n      vely   "+i.escape(null==(t=r.vel[1])?"":t)+"\n      velz   "+i.escape(null==(t=r.vel[2])?"":t)+"\n  end\n  \n  materialset # "+i.escape(null==(t=r.name)?"":t)+"\n      id        "+i.escape(null==(t=a+1)?"":t)+"\n      material  "+i.escape(null==(t=a+1)?"":t)+"\n      type      "+i.escape(null==(t=r.type)?"":t)+"\n "),function(){var e=r.blockids;if("number"==typeof e.length)for(var a=0,l=e.length;l>a;a++){var s=e[a];n.push("     block     "+i.escape(null==(t=s)?"":t)+"\n ")}else{var l=0;for(var a in e){l++;var s=e[a];n.push("     block     "+i.escape(null==(t=s)?"":t)+"\n ")}}}.call(this),n.push("  end\n ")}}}.call(this),n.push("\n \n  exe_control "+i.escape(null==(t=a.nstep)?"":t)+"\n \n \n  dump     "+i.escape(null==(t=p.dump)?"":t)+"\n  plti     "+i.escape(null==(t=p.plti)?"":t)+"\n  prtlev   "+i.escape(null==(t=p.prtlev)?"":t)+"\n  thti     "+i.escape(null==(t=p.thti)?"":t)+"\n  ttyi     "+i.escape(null==(t=p.ttyi)?"":t)+"\n  pltype   "+i.escape(null==(t=p.pltype)?"":t)+"\n  filetype "+i.escape(null==(t=p.filetype)?"":t)+"\n \n \n  histvar\n "),function(){var e=p.histvar.TimeHistoryElem;if("number"==typeof e.length)for(var a=0,l=e.length;l>a;a++){var r=e[a];(function(){var e=r.ids;if("number"==typeof e.length)for(var a=0,l=e.length;l>a;a++){var s=e[a];(function(){var e=r.vars;if("number"==typeof e.length)for(var a=0,l=e.length;l>a;a++){var o=e[a];n.push("     elem "+i.escape(null==(t=s)?"":t)+" "+i.escape(null==(t=o)?"":t)+"\n ")}else{var l=0;for(var a in e){l++;var o=e[a];n.push("     elem "+i.escape(null==(t=s)?"":t)+" "+i.escape(null==(t=o)?"":t)+"\n ")}}}).call(this)}else{var l=0;for(var a in e){l++;var s=e[a];(function(){var e=r.vars;if("number"==typeof e.length)for(var a=0,l=e.length;l>a;a++){var o=e[a];n.push("     elem "+i.escape(null==(t=s)?"":t)+" "+i.escape(null==(t=o)?"":t)+"\n ")}else{var l=0;for(var a in e){l++;var o=e[a];n.push("     elem "+i.escape(null==(t=s)?"":t)+" "+i.escape(null==(t=o)?"":t)+"\n ")}}}).call(this)}}}).call(this)}else{var l=0;for(var a in e){l++;var r=e[a];(function(){var e=r.ids;if("number"==typeof e.length)for(var a=0,l=e.length;l>a;a++){var s=e[a];(function(){var e=r.vars;if("number"==typeof e.length)for(var a=0,l=e.length;l>a;a++){var o=e[a];n.push("     elem "+i.escape(null==(t=s)?"":t)+" "+i.escape(null==(t=o)?"":t)+"\n ")}else{var l=0;for(var a in e){l++;var o=e[a];n.push("     elem "+i.escape(null==(t=s)?"":t)+" "+i.escape(null==(t=o)?"":t)+"\n ")}}}).call(this)}else{var l=0;for(var a in e){l++;var s=e[a];(function(){var e=r.vars;if("number"==typeof e.length)for(var a=0,l=e.length;l>a;a++){var o=e[a];n.push("     elem "+i.escape(null==(t=s)?"":t)+" "+i.escape(null==(t=o)?"":t)+"\n ")}else{var l=0;for(var a in e){l++;var o=e[a];n.push("     elem "+i.escape(null==(t=s)?"":t)+" "+i.escape(null==(t=o)?"":t)+"\n ")}}}).call(this)}}}).call(this)}}}.call(this),function(){var e=p.histvar.TimeHistoryNode;if("number"==typeof e.length)for(var a=0,l=e.length;l>a;a++){var r=e[a];(function(){var e=r.ids;if("number"==typeof e.length)for(var a=0,l=e.length;l>a;a++){var s=e[a];(function(){var e=r.vars;if("number"==typeof e.length)for(var a=0,l=e.length;l>a;a++){var o=e[a];n.push("     node "+i.escape(null==(t=s)?"":t)+" "+i.escape(null==(t=o)?"":t)+"\n ")}else{var l=0;for(var a in e){l++;var o=e[a];n.push("     node "+i.escape(null==(t=s)?"":t)+" "+i.escape(null==(t=o)?"":t)+"\n ")}}}).call(this)}else{var l=0;for(var a in e){l++;var s=e[a];(function(){var e=r.vars;if("number"==typeof e.length)for(var a=0,l=e.length;l>a;a++){var o=e[a];n.push("     node "+i.escape(null==(t=s)?"":t)+" "+i.escape(null==(t=o)?"":t)+"\n ")}else{var l=0;for(var a in e){l++;var o=e[a];n.push("     node "+i.escape(null==(t=s)?"":t)+" "+i.escape(null==(t=o)?"":t)+"\n ")}}}).call(this)}}}).call(this)}else{var l=0;for(var a in e){l++;var r=e[a];(function(){var e=r.ids;if("number"==typeof e.length)for(var a=0,l=e.length;l>a;a++){var s=e[a];(function(){var e=r.vars;if("number"==typeof e.length)for(var a=0,l=e.length;l>a;a++){var o=e[a];n.push("     node "+i.escape(null==(t=s)?"":t)+" "+i.escape(null==(t=o)?"":t)+"\n ")}else{var l=0;for(var a in e){l++;var o=e[a];n.push("     node "+i.escape(null==(t=s)?"":t)+" "+i.escape(null==(t=o)?"":t)+"\n ")}}}).call(this)}else{var l=0;for(var a in e){l++;var s=e[a];(function(){var e=r.vars;if("number"==typeof e.length)for(var a=0,l=e.length;l>a;a++){var o=e[a];n.push("     node "+i.escape(null==(t=s)?"":t)+" "+i.escape(null==(t=o)?"":t)+"\n ")}else{var l=0;for(var a in e){l++;var o=e[a];n.push("     node "+i.escape(null==(t=s)?"":t)+" "+i.escape(null==(t=o)?"":t)+"\n ")}}}).call(this)}}}).call(this)}}}.call(this),function(){var e=p.histvar.TimeHistorySide;if("number"==typeof e.length)for(var a=0,l=e.length;l>a;a++){var r=e[a];(function(){var e=r.ids;if("number"==typeof e.length)for(var a=0,l=e.length;l>a;a++){var s=e[a];(function(){var e=r.vars;if("number"==typeof e.length)for(var a=0,l=e.length;l>a;a++){var o=e[a];n.push("     side "+i.escape(null==(t=s)?"":t)+" "+i.escape(null==(t=o)?"":t)+"\n ")}else{var l=0;for(var a in e){l++;var o=e[a];n.push("     side "+i.escape(null==(t=s)?"":t)+" "+i.escape(null==(t=o)?"":t)+"\n ")}}}).call(this)}else{var l=0;for(var a in e){l++;var s=e[a];(function(){var e=r.vars;if("number"==typeof e.length)for(var a=0,l=e.length;l>a;a++){var o=e[a];n.push("     side "+i.escape(null==(t=s)?"":t)+" "+i.escape(null==(t=o)?"":t)+"\n ")}else{var l=0;for(var a in e){l++;var o=e[a];n.push("     side "+i.escape(null==(t=s)?"":t)+" "+i.escape(null==(t=o)?"":t)+"\n ")}}}).call(this)}}}).call(this)}else{var l=0;for(var a in e){l++;var r=e[a];(function(){var e=r.ids;if("number"==typeof e.length)for(var a=0,l=e.length;l>a;a++){var s=e[a];(function(){var e=r.vars;if("number"==typeof e.length)for(var a=0,l=e.length;l>a;a++){var o=e[a];n.push("     side "+i.escape(null==(t=s)?"":t)+" "+i.escape(null==(t=o)?"":t)+"\n ")}else{var l=0;for(var a in e){l++;var o=e[a];n.push("     side "+i.escape(null==(t=s)?"":t)+" "+i.escape(null==(t=o)?"":t)+"\n ")}}}).call(this)}else{var l=0;for(var a in e){l++;var s=e[a];(function(){var e=r.vars;if("number"==typeof e.length)for(var a=0,l=e.length;l>a;a++){var o=e[a];n.push("     side "+i.escape(null==(t=s)?"":t)+" "+i.escape(null==(t=o)?"":t)+"\n ")}else{var l=0;for(var a in e){l++;var o=e[a];n.push("     side "+i.escape(null==(t=s)?"":t)+" "+i.escape(null==(t=o)?"":t)+"\n ")}}}).call(this)}}}).call(this)}}}.call(this),n.push(" end\n \n \n  plotvar\n "),p.plotvar.elem&&function(){var e=p.plotvar.elem;if("number"==typeof e.length)for(var a=0,l=e.length;l>a;a++){var r=e[a];n.push("     elem "+i.escape(null==(t=r)?"":t)+"\n ")}else{var l=0;for(var a in e){l++;var r=e[a];n.push("     elem "+i.escape(null==(t=r)?"":t)+"\n ")}}}.call(this),p.plotvar.node&&function(){var e=p.plotvar.node;if("number"==typeof e.length)for(var a=0,l=e.length;l>a;a++){var r=e[a];n.push("     node "+i.escape(null==(t=r)?"":t)+"\n ")}else{var l=0;for(var a in e){l++;var r=e[a];n.push("     node "+i.escape(null==(t=r)?"":t)+"\n ")}}}.call(this),p.plotvar.side&&function(){var e=p.plotvar.side;if("number"==typeof e.length)for(var a=0,l=e.length;l>a;a++){var r=e[a];(function(){var e=r.ids;if("number"==typeof e.length)for(var a=0,l=e.length;l>a;a++){var s=e[a];(function(){var e=r.vars;if("number"==typeof e.length)for(var a=0,l=e.length;l>a;a++){var o=e[a];n.push("     side "+i.escape(null==(t=s)?"":t)+" "+i.escape(null==(t=o)?"":t)+"\n ")}else{var l=0;for(var a in e){l++;var o=e[a];n.push("     side "+i.escape(null==(t=s)?"":t)+" "+i.escape(null==(t=o)?"":t)+"\n ")}}}).call(this)}else{var l=0;for(var a in e){l++;var s=e[a];(function(){var e=r.vars;if("number"==typeof e.length)for(var a=0,l=e.length;l>a;a++){var o=e[a];n.push("     side "+i.escape(null==(t=s)?"":t)+" "+i.escape(null==(t=o)?"":t)+"\n ")}else{var l=0;for(var a in e){l++;var o=e[a];n.push("     side "+i.escape(null==(t=s)?"":t)+" "+i.escape(null==(t=o)?"":t)+"\n ")}}}).call(this)}}}).call(this)}else{var l=0;for(var a in e){l++;var r=e[a];(function(){var e=r.ids;if("number"==typeof e.length)for(var a=0,l=e.length;l>a;a++){var s=e[a];(function(){var e=r.vars;if("number"==typeof e.length)for(var a=0,l=e.length;l>a;a++){var o=e[a];n.push("     side "+i.escape(null==(t=s)?"":t)+" "+i.escape(null==(t=o)?"":t)+"\n ")}else{var l=0;for(var a in e){l++;var o=e[a];n.push("     side "+i.escape(null==(t=s)?"":t)+" "+i.escape(null==(t=o)?"":t)+"\n ")}}}).call(this)}else{var l=0;for(var a in e){l++;var s=e[a];(function(){var e=r.vars;if("number"==typeof e.length)for(var a=0,l=e.length;l>a;a++){var o=e[a];n.push("     side "+i.escape(null==(t=s)?"":t)+" "+i.escape(null==(t=o)?"":t)+"\n ")}else{var l=0;for(var a in e){l++;var o=e[a];n.push("     side "+i.escape(null==(t=s)?"":t)+" "+i.escape(null==(t=o)?"":t)+"\n ")}}}).call(this)}}}).call(this)}}}.call(this),n.push("  end\n \n \n  nsteps "+i.escape(null==(t=f.nsteps)?"":t)+"\n  term   "+i.escape(null==(t=f.term)?"":t)+"\n  deltat "+i.escape(null==(t=f.deltat)?"":t)+"\n \n \n   plotstatvar\n "),d.elem&&d.elem.length>0&&function(){var e=d.elem;if("number"==typeof e.length)for(var i=0,a=e.length;a>i;i++){var l=e[i];n.push("     elem "+(null==(t=l)?"":t)+"\n ")}else{var a=0;for(var i in e){a++;var l=e[i];n.push("     elem "+(null==(t=l)?"":t)+"\n ")}}}.call(this),d.node&&d.node.length>0&&function(){var e=d.node;if("number"==typeof e.length)for(var i=0,a=e.length;a>i;i++){var l=e[i];n.push("     node "+(null==(t=l)?"":t)+"\n ")}else{var a=0;for(var i in e){a++;var l=e[i];n.push("     node "+(null==(t=l)?"":t)+"\n ")}}}.call(this),function(){var e=d.side;if("number"==typeof e.length)for(var a=0,l=e.length;l>a;a++){var r=e[a];(function(){var e=r.ids;if("number"==typeof e.length)for(var a=0,l=e.length;l>a;a++){var s=e[a];(function(){var e=r.vars;if("number"==typeof e.length)for(var a=0,l=e.length;l>a;a++){var o=e[a];n.push("     side "+i.escape(null==(t=s)?"":t)+" "+(null==(t=o)?"":t)+"\n ")}else{var l=0;for(var a in e){l++;var o=e[a];n.push("     side "+i.escape(null==(t=s)?"":t)+" "+(null==(t=o)?"":t)+"\n ")}}}).call(this)}else{var l=0;for(var a in e){l++;var s=e[a];(function(){var e=r.vars;if("number"==typeof e.length)for(var a=0,l=e.length;l>a;a++){var o=e[a];n.push("     side "+i.escape(null==(t=s)?"":t)+" "+(null==(t=o)?"":t)+"\n ")}else{var l=0;for(var a in e){l++;var o=e[a];n.push("     side "+i.escape(null==(t=s)?"":t)+" "+(null==(t=o)?"":t)+"\n ")}}}).call(this)}}}).call(this)}else{var l=0;for(var a in e){l++;var r=e[a];(function(){var e=r.ids;if("number"==typeof e.length)for(var a=0,l=e.length;l>a;a++){var s=e[a];(function(){var e=r.vars;if("number"==typeof e.length)for(var a=0,l=e.length;l>a;a++){var o=e[a];n.push("     side "+i.escape(null==(t=s)?"":t)+" "+(null==(t=o)?"":t)+"\n ")}else{var l=0;for(var a in e){l++;var o=e[a];n.push("     side "+i.escape(null==(t=s)?"":t)+" "+(null==(t=o)?"":t)+"\n ")}}}).call(this)}else{var l=0;for(var a in e){l++;var s=e[a];(function(){var e=r.vars;if("number"==typeof e.length)for(var a=0,l=e.length;l>a;a++){var o=e[a];n.push("     side "+i.escape(null==(t=s)?"":t)+" "+(null==(t=o)?"":t)+"\n ")}else{var l=0;for(var a in e){l++;var o=e[a];n.push("     side "+i.escape(null==(t=s)?"":t)+" "+(null==(t=o)?"":t)+"\n ")}}}).call(this)}}}).call(this)}}}.call(this),n.push(" \n   end\n \n   statistics\n      starttime    "+i.escape(null==(t=d.starttime)?"":t)+"\n      endtime      "+i.escape(null==(t=d.endtime)?"":t)+"\n      plotwinsize  "+i.escape(null==(t=d.plotwinsize)?"":t)+"\n   end"),s.length>0&&(n.push(" \n  hydrostat\n "),function(){var e=s;if("number"==typeof e.length)for(var a=0,l=e.length;l>a;a++){var r=e[a];(function(){var e=r.ids;if("number"==typeof e.length)for(var a=0,l=e.length;l>a;a++){var s=e[a];n.push("     nodeset "+i.escape(null==(t=s)?"":t)+" "+i.escape(null==(t=r.curveId)?"":t)+" "+i.escape(null==(t=r.amplitude)?"":t)+"\n ")}else{var l=0;for(var a in e){l++;var s=e[a];n.push("     nodeset "+i.escape(null==(t=s)?"":t)+" "+i.escape(null==(t=r.curveId)?"":t)+" "+i.escape(null==(t=r.amplitude)?"":t)+"\n ")}}}).call(this)}else{var l=0;for(var a in e){l++;var r=e[a];(function(){var e=r.ids;if("number"==typeof e.length)for(var a=0,l=e.length;l>a;a++){var s=e[a];n.push("     nodeset "+i.escape(null==(t=s)?"":t)+" "+i.escape(null==(t=r.curveId)?"":t)+" "+i.escape(null==(t=r.amplitude)?"":t)+"\n ")}else{var l=0;for(var a in e){l++;var s=e[a];n.push("     nodeset "+i.escape(null==(t=s)?"":t)+" "+i.escape(null==(t=r.curveId)?"":t)+" "+i.escape(null==(t=r.amplitude)?"":t)+"\n ")}}}).call(this)}}}.call(this),n.push("  end\n ")),n.push("\n \n  initial\n     velx         "+i.escape(null==(t=o.vel[0])?"":t)+"\n     vely         "+i.escape(null==(t=o.vel[1])?"":t)+"\n     velz         "+i.escape(null==(t=o.vel[2])?"":t)+"\n     tke          "+i.escape(null==(t=o.tke)?"":t)+"\n     eps          "+i.escape(null==(t=o.eps)?"":t)+"\n     omega        "+i.escape(null==(t=o.omega)?"":t)+"\n     turbnu       "+i.escape(null==(t=o.turbnu)?"":t)+"\n     temperature  "+i.escape(null==(t=o.temperature)?"":t)+"\n     enthalpy     "+i.escape(null==(t=o.enthalpy)?"":t)+"\n  end\n "),function(){var e=l.body_force;if("number"==typeof e.length)for(var a=0,r=e.length;r>a;a++){var s=e[a];n.push(" \n  body_force # "+(null==(t=s.comment)?"":t)+"\n "),s.id&&n.push("     set "+i.escape(null==(t=s.id)?"":t)+"\n "),s.curveId&&n.push("     lcid "+i.escape(null==(t=s.curveId)?"":t)+"\n "),n.push(" \n      fx "+i.escape(null==(t=s.force[0])?"":t)+"\n      fy "+i.escape(null==(t=s.force[1])?"":t)+"\n      fz "+i.escape(null==(t=s.force[2])?"":t)+"\n  end\n ")}else{var r=0;for(var a in e){r++;var s=e[a];n.push(" \n  body_force # "+(null==(t=s.comment)?"":t)+"\n "),s.id&&n.push("     set "+i.escape(null==(t=s.id)?"":t)+"\n "),s.curveId&&n.push("     lcid "+i.escape(null==(t=s.curveId)?"":t)+"\n "),n.push(" \n      fx "+i.escape(null==(t=s.force[0])?"":t)+"\n      fy "+i.escape(null==(t=s.force[1])?"":t)+"\n      fz "+i.escape(null==(t=s.force[2])?"":t)+"\n  end\n ")}}}.call(this),n.push(""),function(){var e=l.boussinesqforce;if("number"==typeof e.length)for(var a=0,r=e.length;r>a;a++){var s=e[a];n.push(" \n  boussinesqforce # "+(null==(t=s.comment)?"":t)+"\n "),s.id&&n.push("     set "+i.escape(null==(t=s.id)?"":t)+"\n "),s.curveId&&n.push("     lcid "+i.escape(null==(t=s.curveId)?"":t)+"\n "),n.push(" \n      gx "+i.escape(null==(t=s.gravity[0])?"":t)+"\n      gy "+i.escape(null==(t=s.gravity[1])?"":t)+"\n      gz "+i.escape(null==(t=s.gravity[2])?"":t)+"\n  end\n ")}else{var r=0;for(var a in e){r++;var s=e[a];n.push(" \n  boussinesqforce # "+(null==(t=s.comment)?"":t)+"\n "),s.id&&n.push("     set "+i.escape(null==(t=s.id)?"":t)+"\n "),s.curveId&&n.push("     lcid "+i.escape(null==(t=s.curveId)?"":t)+"\n "),n.push(" \n      gx "+i.escape(null==(t=s.gravity[0])?"":t)+"\n      gy "+i.escape(null==(t=s.gravity[1])?"":t)+"\n      gz "+i.escape(null==(t=s.gravity[2])?"":t)+"\n  end\n ")}}}.call(this),n.push(""),function(){var e=l.porous_drag;if("number"==typeof e.length)for(var a=0,r=e.length;r>a;a++){var s=e[a];n.push(" \n  porous_drag # "+(null==(t=s.comment)?"":t)+"\n "),s.id&&n.push("     set "+i.escape(null==(t=s.id)?"":t)+"\n "),s.curveId&&n.push("     lcid "+i.escape(null==(t=s.curveId)?"":t)+"\n "),n.push(" \n      amp "+i.escape(null==(t=s.amplitude)?"":t)+"\n  end\n ")}else{var r=0;for(var a in e){r++;var s=e[a];n.push(" \n  porous_drag # "+(null==(t=s.comment)?"":t)+"\n "),s.id&&n.push("     set "+i.escape(null==(t=s.id)?"":t)+"\n "),s.curveId&&n.push("     lcid "+i.escape(null==(t=s.curveId)?"":t)+"\n "),n.push(" \n      amp "+i.escape(null==(t=s.amplitude)?"":t)+"\n  end\n ")}}}.call(this),n.push(""),function(){var a=["enthalpy","tke","eps","distance","pressure","temperature","turbnu","heatflux"];if("number"==typeof a.length)for(var l=0,r=a.length;r>l;l++){var s=a[l];e[s]&&e[s].length>0&&(n.push(" \n  "+i.escape(null==(t=s)?"":t)+"\n "),function(){var a=e[s];if("number"==typeof a.length)for(var l=0,r=a.length;r>l;l++){var o=a[l];n.push(" \n     # "+(null==(t=o.comment)?"":t)+"\n "),function(){var e=o.ids;if("number"==typeof e.length)for(var a=0,l=e.length;l>a;a++){var r=e[a];n.push("     sideset "+i.escape(null==(t=r)?"":t)+" "+i.escape(null==(t=o.curveId)?"":t)+" "+i.escape(null==(t=o.amplitude)?"":t)+"\n ")}else{var l=0;for(var a in e){l++;var r=e[a];n.push("     sideset "+i.escape(null==(t=r)?"":t)+" "+i.escape(null==(t=o.curveId)?"":t)+" "+i.escape(null==(t=o.amplitude)?"":t)+"\n ")}}}.call(this)}else{var r=0;for(var l in a){r++;var o=a[l];n.push(" \n     # "+(null==(t=o.comment)?"":t)+"\n "),function(){var e=o.ids;if("number"==typeof e.length)for(var a=0,l=e.length;l>a;a++){var r=e[a];n.push("     sideset "+i.escape(null==(t=r)?"":t)+" "+i.escape(null==(t=o.curveId)?"":t)+" "+i.escape(null==(t=o.amplitude)?"":t)+"\n ")}else{var l=0;for(var a in e){l++;var r=e[a];n.push("     sideset "+i.escape(null==(t=r)?"":t)+" "+i.escape(null==(t=o.curveId)?"":t)+" "+i.escape(null==(t=o.amplitude)?"":t)+"\n ")}}}.call(this)}}}.call(this),n.push(" \n  end\n "))}else{var r=0;for(var l in a){r++;var s=a[l];e[s]&&e[s].length>0&&(n.push(" \n  "+i.escape(null==(t=s)?"":t)+"\n "),function(){var a=e[s];if("number"==typeof a.length)for(var l=0,r=a.length;r>l;l++){var o=a[l];n.push(" \n     # "+(null==(t=o.comment)?"":t)+"\n "),function(){var e=o.ids;if("number"==typeof e.length)for(var a=0,l=e.length;l>a;a++){var r=e[a];n.push("     sideset "+i.escape(null==(t=r)?"":t)+" "+i.escape(null==(t=o.curveId)?"":t)+" "+i.escape(null==(t=o.amplitude)?"":t)+"\n ")}else{var l=0;for(var a in e){l++;var r=e[a];n.push("     sideset "+i.escape(null==(t=r)?"":t)+" "+i.escape(null==(t=o.curveId)?"":t)+" "+i.escape(null==(t=o.amplitude)?"":t)+"\n ")}}}.call(this)}else{var r=0;for(var l in a){r++;var o=a[l];n.push(" \n     # "+(null==(t=o.comment)?"":t)+"\n "),function(){var e=o.ids;if("number"==typeof e.length)for(var a=0,l=e.length;l>a;a++){var r=e[a];n.push("     sideset "+i.escape(null==(t=r)?"":t)+" "+i.escape(null==(t=o.curveId)?"":t)+" "+i.escape(null==(t=o.amplitude)?"":t)+"\n ")}else{var l=0;for(var a in e){l++;var r=e[a];n.push("     sideset "+i.escape(null==(t=r)?"":t)+" "+i.escape(null==(t=o.curveId)?"":t)+" "+i.escape(null==(t=o.amplitude)?"":t)+"\n ")}}}.call(this)}}}.call(this),n.push(" \n  end\n "))}}}.call(this),e.velocity&&e.velocity.length>0&&(n.push(" \n  velocity\n "),function(){var a=e.velocity;if("number"==typeof a.length)for(var l=0,r=a.length;r>l;l++){var s=a[l];
n.push(" \n     # "+(null==(t=s.comment)?"":t)+"\n "),function(){var e=s.ids;if("number"==typeof e.length)for(var a=0,l=e.length;l>a;a++){var r=e[a];n.push(" \n     velx sideset "+i.escape(null==(t=r)?"":t)+" "+i.escape(null==(t=s.curveId)?"":t)+" "+i.escape(null==(t=s.amplitude[0])?"":t)+"\n     vely sideset "+i.escape(null==(t=r)?"":t)+" "+i.escape(null==(t=s.curveId)?"":t)+" "+i.escape(null==(t=s.amplitude[1])?"":t)+"\n     velz sideset "+i.escape(null==(t=r)?"":t)+" "+i.escape(null==(t=s.curveId)?"":t)+" "+i.escape(null==(t=s.amplitude[2])?"":t)+" \n ")}else{var l=0;for(var a in e){l++;var r=e[a];n.push(" \n     velx sideset "+i.escape(null==(t=r)?"":t)+" "+i.escape(null==(t=s.curveId)?"":t)+" "+i.escape(null==(t=s.amplitude[0])?"":t)+"\n     vely sideset "+i.escape(null==(t=r)?"":t)+" "+i.escape(null==(t=s.curveId)?"":t)+" "+i.escape(null==(t=s.amplitude[1])?"":t)+"\n     velz sideset "+i.escape(null==(t=r)?"":t)+" "+i.escape(null==(t=s.curveId)?"":t)+" "+i.escape(null==(t=s.amplitude[2])?"":t)+" \n ")}}}.call(this)}else{var r=0;for(var l in a){r++;var s=a[l];n.push(" \n     # "+(null==(t=s.comment)?"":t)+"\n "),function(){var e=s.ids;if("number"==typeof e.length)for(var a=0,l=e.length;l>a;a++){var r=e[a];n.push(" \n     velx sideset "+i.escape(null==(t=r)?"":t)+" "+i.escape(null==(t=s.curveId)?"":t)+" "+i.escape(null==(t=s.amplitude[0])?"":t)+"\n     vely sideset "+i.escape(null==(t=r)?"":t)+" "+i.escape(null==(t=s.curveId)?"":t)+" "+i.escape(null==(t=s.amplitude[1])?"":t)+"\n     velz sideset "+i.escape(null==(t=r)?"":t)+" "+i.escape(null==(t=s.curveId)?"":t)+" "+i.escape(null==(t=s.amplitude[2])?"":t)+" \n ")}else{var l=0;for(var a in e){l++;var r=e[a];n.push(" \n     velx sideset "+i.escape(null==(t=r)?"":t)+" "+i.escape(null==(t=s.curveId)?"":t)+" "+i.escape(null==(t=s.amplitude[0])?"":t)+"\n     vely sideset "+i.escape(null==(t=r)?"":t)+" "+i.escape(null==(t=s.curveId)?"":t)+" "+i.escape(null==(t=s.amplitude[1])?"":t)+"\n     velz sideset "+i.escape(null==(t=r)?"":t)+" "+i.escape(null==(t=s.curveId)?"":t)+" "+i.escape(null==(t=s.amplitude[2])?"":t)+" \n ")}}}.call(this)}}}.call(this),n.push(" \n  end\n ")),e.symmetrybc&&e.symmetrybc.length>0&&(n.push(" \n  symmetrybc\n "),function(){var a=e.symmetrybc;if("number"==typeof a.length)for(var l=0,r=a.length;r>l;l++){var s=a[l];n.push(" \n     # "+(null==(t=s.comment)?"":t)),function(){var e=s.ids;if("number"==typeof e.length)for(var a=0,l=e.length;l>a;a++){var r=e[a];n.push("     velx sideset "+i.escape(null==(t=r)?"":t)+" "+i.escape(null==(t=s.curveId)?"":t)+" "+i.escape(null==(t=s.amplitude[0])?"":t)+"\n     vely sideset "+i.escape(null==(t=r)?"":t)+" "+i.escape(null==(t=s.curveId)?"":t)+" "+i.escape(null==(t=s.amplitude[1])?"":t)+"\n     velz sideset "+i.escape(null==(t=r)?"":t)+" "+i.escape(null==(t=s.curveId)?"":t)+" "+i.escape(null==(t=s.amplitude[2])?"":t)+" \n ")}else{var l=0;for(var a in e){l++;var r=e[a];n.push("     velx sideset "+i.escape(null==(t=r)?"":t)+" "+i.escape(null==(t=s.curveId)?"":t)+" "+i.escape(null==(t=s.amplitude[0])?"":t)+"\n     vely sideset "+i.escape(null==(t=r)?"":t)+" "+i.escape(null==(t=s.curveId)?"":t)+" "+i.escape(null==(t=s.amplitude[1])?"":t)+"\n     velz sideset "+i.escape(null==(t=r)?"":t)+" "+i.escape(null==(t=s.curveId)?"":t)+" "+i.escape(null==(t=s.amplitude[2])?"":t)+" \n ")}}}.call(this)}else{var r=0;for(var l in a){r++;var s=a[l];n.push(" \n     # "+(null==(t=s.comment)?"":t)),function(){var e=s.ids;if("number"==typeof e.length)for(var a=0,l=e.length;l>a;a++){var r=e[a];n.push("     velx sideset "+i.escape(null==(t=r)?"":t)+" "+i.escape(null==(t=s.curveId)?"":t)+" "+i.escape(null==(t=s.amplitude[0])?"":t)+"\n     vely sideset "+i.escape(null==(t=r)?"":t)+" "+i.escape(null==(t=s.curveId)?"":t)+" "+i.escape(null==(t=s.amplitude[1])?"":t)+"\n     velz sideset "+i.escape(null==(t=r)?"":t)+" "+i.escape(null==(t=s.curveId)?"":t)+" "+i.escape(null==(t=s.amplitude[2])?"":t)+" \n ")}else{var l=0;for(var a in e){l++;var r=e[a];n.push("     velx sideset "+i.escape(null==(t=r)?"":t)+" "+i.escape(null==(t=s.curveId)?"":t)+" "+i.escape(null==(t=s.amplitude[0])?"":t)+"\n     vely sideset "+i.escape(null==(t=r)?"":t)+" "+i.escape(null==(t=s.curveId)?"":t)+" "+i.escape(null==(t=s.amplitude[1])?"":t)+"\n     velz sideset "+i.escape(null==(t=r)?"":t)+" "+i.escape(null==(t=s.curveId)?"":t)+" "+i.escape(null==(t=s.amplitude[2])?"":t)+" \n ")}}}.call(this)}}}.call(this),n.push(" \n  end\n ")),function(){var a=["pressureoutflow","passiveoutflow"];if("number"==typeof a.length)for(var l=0,r=a.length;r>l;l++){var s=a[l];e[s]&&e[s].length&&(n.push(" \n  "+i.escape(null==(t=s)?"":t)+"\n "),function(){var a=e[s];if("number"==typeof a.length)for(var l=0,r=a.length;r>l;l++){var o=a[l];n.push(" \n     # "+i.escape(null==(t=o.comment)?"":t)+"\n     sideset "+i.escape(null==(t=o.id)?"":t)+"\n ")}else{var r=0;for(var l in a){r++;var o=a[l];n.push(" \n     # "+i.escape(null==(t=o.comment)?"":t)+"\n     sideset "+i.escape(null==(t=o.id)?"":t)+"\n ")}}}.call(this),n.push(" \n  end\n "))}else{var r=0;for(var l in a){r++;var s=a[l];e[s]&&e[s].length&&(n.push(" \n  "+i.escape(null==(t=s)?"":t)+"\n "),function(){var a=e[s];if("number"==typeof a.length)for(var l=0,r=a.length;r>l;l++){var o=a[l];n.push(" \n     # "+i.escape(null==(t=o.comment)?"":t)+"\n     sideset "+i.escape(null==(t=o.id)?"":t)+"\n ")}else{var r=0;for(var l in a){r++;var o=a[l];n.push(" \n     # "+i.escape(null==(t=o.comment)?"":t)+"\n     sideset "+i.escape(null==(t=o.id)?"":t)+"\n ")}}}.call(this),n.push(" \n  end\n "))}}}.call(this),n.push(""),function(){var e=r;if("number"==typeof e.length)for(var a=0,l=e.length;l>a;a++){var s=e[a];n.push(" \n  # "+(null==(t=s.comment)?"":t)+"\n  heat_source\n "),s.id&&n.push("     set   "+i.escape(null==(t=s.id)?"":t)+"\n "),s.curveId&&n.push("     lcid  "+i.escape(null==(t=s.curveId)?"":t)+"\n "),n.push("     Q     "+i.escape(null==(t=s.amplitude)?"":t)+"\n  end\n ")}else{var l=0;for(var a in e){l++;var s=e[a];n.push(" \n  # "+(null==(t=s.comment)?"":t)+"\n  heat_source\n "),s.id&&n.push("     set   "+i.escape(null==(t=s.id)?"":t)+"\n "),s.curveId&&n.push("     lcid  "+i.escape(null==(t=s.curveId)?"":t)+"\n "),n.push("     Q     "+i.escape(null==(t=s.amplitude)?"":t)+"\n  end\n ")}}}.call(this),n.push("\n \n  ppesolver\n     type                 "+i.escape(null==(t=m.type)?"":t)+"\n     amgpc                "+i.escape(null==(t=m.amgpc)?"":t)+"\n     hypre_type           "+i.escape(null==(t=m.hypre_type)?"":t)+"\n     hypre_coarsen_type   "+i.escape(null==(t=m.hypre_coarsen_type)?"":t)+"\n     hypre_smoother       "+i.escape(null==(t=m.hypre_smoother)?"":t)+"\n     hypre_smoother_dn    "+i.escape(null==(t=m.hypre_smoother_dn)?"":t)+"\n     hypre_smoother_up    "+i.escape(null==(t=m.hypre_smoother_up)?"":t)+"\n     hypre_smoother_co    "+i.escape(null==(t=m.hypre_smoother_co)?"":t)+"\n     hypre_smoother       "+i.escape(null==(t=m.hypre_smoother)?"":t)+"\n     interp_type          "+i.escape(null==(t=m.interp_type)?"":t)+"\n     hypre_nodal          "+i.escape(null==(t=m.hypre_nodal)?"":t)+"\n     trunc_factor         "+i.escape(null==(t=m.trunc_factor)?"":t)+"\n     pmax_elements        "+i.escape(null==(t=m.pmax_elements)?"":t)+"\n     agg_num_levels       "+i.escape(null==(t=m.agg_num_levels)?"":t)+"\n     agg_num_paths        "+i.escape(null==(t=m.agg_num_paths)?"":t)+"\n     strong_threshold     "+i.escape(null==(t=m.strong_threshold)?"":t)+"\n     max_rowsum           "+i.escape(null==(t=m.max_rowsum)?"":t)+"\n     smoother             "+i.escape(null==(t=m.smoother)?"":t)+"\n     cycle                "+i.escape(null==(t=m.cycle)?"":t)+"\n     solver               "+i.escape(null==(t=m.solver)?"":t)+"\n     pre_smooth           "+i.escape(null==(t=m.pre_smooth)?"":t)+"\n     post_smooth          "+i.escape(null==(t=m.post_smooth)?"":t)+"\n     levels               "+i.escape(null==(t=m.levels)?"":t)+"\n     itmax                "+i.escape(null==(t=m.itmax)?"":t)+"\n     itchk                "+i.escape(null==(t=m.itchk)?"":t)+"\n     eps                  "+i.escape(null==(t=m.eps)?"":t)+"\n     zeropivot            "+i.escape(null==(t=m.zeropivot)?"":t)+"\n  end\n \n  momentumsolver\n    type          "+i.escape(null==(t=c.type)?"":t)+"\n    restart       "+i.escape(null==(t=c.restart)?"":t)+"\n    itmax         "+i.escape(null==(t=c.itmax)?"":t)+"\n    itchk         "+i.escape(null==(t=c.itchk)?"":t)+"\n    diagnostics   "+i.escape(null==(t=c.diagnostics)?"":t)+"\n    convergence   "+i.escape(null==(t=c.convergence)?"":t)+"\n    eps           "+i.escape(null==(t=c.eps)?"":t)+"\n  end\n \n  transportsolver\n    type          "+i.escape(null==(t=y.type)?"":t)+"\n    restart       "+i.escape(null==(t=y.restart)?"":t)+"\n    itmax         "+i.escape(null==(t=y.itmax)?"":t)+"\n    itchk         "+i.escape(null==(t=y.itchk)?"":t)+"\n    diagnostics   "+i.escape(null==(t=y.diagnostics)?"":t)+"\n    convergence   "+i.escape(null==(t=y.convergence)?"":t)+"\n    eps           "+i.escape(null==(t=y.eps)?"":t)+"\n  end\n \n \n  solution_method\n    strategy           "+i.escape(null==(t=h.strategy)?"":t)+"\n    itmax              "+i.escape(null==(t=h.itmax)?"":t)+"\n    nvec               "+i.escape(null==(t=h.nvec)?"":t)+"\n    eps                "+i.escape(null==(t=h.eps)?"":t)+"\n    eps_dist           "+i.escape(null==(t=h.eps_dist)?"":t)+"\n    eps_p0             "+i.escape(null==(t=h.eps_p0)?"":t)+"\n    drop_tol           "+i.escape(null==(t=h.drop_tol)?"":t)+"\n    error_norm         "+i.escape(null==(t=h.error_norm)?"":t)+"\n    timestep_control   "+i.escape(null==(t=h.timestep_control)?"":t)+"\n    convergence        "+i.escape(null==(t=h.convergence)?"":t)+"\n    subcycle           "+i.escape(null==(t=h.subcycle)?"":t)+"\n    diagnostics        "+i.escape(null==(t=h.diagnostics)?"":t)+"\n  end\n \n \n  time_integration\n    type      "+i.escape(null==(t=f.type)?"":t)+"\n    CFLinit   "+i.escape(null==(t=f.CFLinit)?"":t)+"\n    CFLmax    "+i.escape(null==(t=f.CFLmax)?"":t)+"\n    dtmax     "+i.escape(null==(t=f.dtmax)?"":t)+"\n    dtscale   "+i.escape(null==(t=f.dtscale)?"":t)+"\n    thetaa    "+i.escape(null==(t=f.thetaa)?"":t)+"\n    thetak    "+i.escape(null==(t=f.thetak)?"":t)+"\n    thetaf    "+i.escape(null==(t=f.thetaf)?"":t)+"\n  end\n \n \n  tmodel "+i.escape(null==(t=g.model)?"":t)+"\n "),"rng_ke"===g.model&&n.push(" \n  turbulence rng_ke\n     timescale_limiter   "+i.escape(null==(t=g.timescale_limiter)?"":t)+"\n  end\n "),"smagorinsky"===g.model&&n.push(" \n  turbulence smagorinsky\n     c_s      "+i.escape(null==(t=g.c_s)?"":t)+"\n     prandtl  "+i.escape(null==(t=g.prandtl_s)?"":t)+"\n     schmidt  "+i.escape(null==(t=g.schmidt_s)?"":t)+"\n  end\n "),"wale"===g.model&&n.push(" \n  turbulence wale\n     c_w      "+i.escape(null==(t=g.c_w)?"":t)+"\n     prandtl  "+i.escape(null==(t=g.prandtl_w)?"":t)+"\n     schmidt  "+i.escape(null==(t=g.schmidt_w)?"":t)+"\n  end\n "),n.push("\n \nend\n \nexit")}.call(this,"boundary_conditions"in a?a.boundary_conditions:"undefined"!=typeof boundary_conditions?boundary_conditions:void 0,"exe_control"in a?a.exe_control:"undefined"!=typeof exe_control?exe_control:void 0,"forces"in a?a.forces:"undefined"!=typeof forces?forces:void 0,"heat_sources"in a?a.heat_sources:"undefined"!=typeof heat_sources?heat_sources:void 0,"hstat"in a?a.hstat:"undefined"!=typeof hstat?hstat:void 0,"initial"in a?a.initial:"undefined"!=typeof initial?initial:void 0,"load_balance"in a?a.load_balance:"undefined"!=typeof load_balance?load_balance:void 0,"materials"in a?a.materials:"undefined"!=typeof materials?materials:void 0,"momentumsolver"in a?a.momentumsolver:"undefined"!=typeof momentumsolver?momentumsolver:void 0,"output"in a?a.output:"undefined"!=typeof output?output:void 0,"plotstatvar"in a?a.plotstatvar:"undefined"!=typeof plotstatvar?plotstatvar:void 0,"ppesolver"in a?a.ppesolver:"undefined"!=typeof ppesolver?ppesolver:void 0,"solution"in a?a.solution:"undefined"!=typeof solution?solution:void 0,"time"in a?a.time:"undefined"!=typeof time?time:void 0,"title"in a?a.title:"undefined"!=typeof title?title:void 0,"transportsolver"in a?a.transportsolver:"undefined"!=typeof transportsolver?transportsolver:void 0,"turbulence"in a?a.turbulence:"undefined"!=typeof turbulence?turbulence:void 0,"undefined"in a?a.undefined:void 0),n.join("")},e.definition={order:["material","initial","boundary","forces","sources","hydrostatic","turbulence","solution","solvers","time","execution","output","functions"],views:{material:{id:"material",label:"Materials",attributes:["Material"],size:1,names:["Material"]},initial:{id:"initial",label:"Initial Conditions",attributes:["Initial"]},boundary:{id:"boundary",label:"Boundary Conditions",attributes:[["ScalarDirichlet","VelocityDirichlet","SymmetryVelocity","HeatFlux","PassiveOutflow","PressureOutflow"]],size:-1},forces:{id:"forces",label:"Body Forces",attributes:[["BodyForce","BoussinesqForce","PorousDragForce"]],size:-1},sources:{id:"sources",label:"Sources",attributes:[["None","HeatSource"]],size:-1},hydrostatic:{id:"hydrostatic",label:"Hydrostatic Pressure",attributes:["HydrostaticPressure"]},turbulence:{id:"turbulence",label:"Turbulence",attributes:[["None","spalart_allmaras","spalart_allmaras_des","smagorinsky","wale","rng_ke","sst_kw","ksgs","ldkm_ksgs","RNG_ke","Smagorinsky","WALE"]]},solution:{id:"solution",label:"Solution Method",attributes:["SolutionMethod"]},solvers:{id:"solvers",label:"Solvers",attributes:["Energy","Pressure","HypreBoomerAMG","MLAMG","Momentum","TransportSolver"]},time:{id:"time",label:"Time",attributes:["Time","TimeIntegration"]},execution:{id:"execution",label:"Execution",attributes:["ExecutionControl","LoadBalance"]},output:{id:"output",label:"Output",attributes:["Output","Plot","TurbulenceStatistics"],children:["histvar","plotvar","plotstatvar"]},histvar:{id:"histvar",label:"Time history",attributes:[["TimeHistoryElem","TimeHistoryNode","TimeHistorySide"]],size:-1},plotvar:{id:"plotvar",label:"Plot side variable",attributes:["PlotSide"],size:-1},plotstatvar:{id:"plotstatvar",label:"Turbulence side statistics",attributes:["TurbulenceStatisticsSide"],size:-1},functions:{id:"functions",label:"Time functions",attributes:["TimeFunction"],size:-1}},definitions:{None:{label:"No definition"},TimeFunction:{label:"Time function",parameters:[{id:"function.temporal",label:"Time function",type:"function","default":"",size:1}]},Energy:{label:"Energy",parameters:[{id:"energy.form",label:"Form of the Energy Equation",type:"enum","default":0,size:1,"enum":{labels:["Isothermal","Temperature","Enthalpy","Internal Energy"],values:["isothermal","temperature","enthalpy","int_energy"]}}]},Material:{label:"Material",parameters:[{id:"material.rho",label:"Mass Density",type:"double",size:1,"default":1,min:0},{id:"material.cp",label:"Constant Pressure Specific Heat",size:1,"default":1,type:"double",min:1},{id:"material.cv",label:"Constant Volume Specific Heat",size:1,"default":1,type:"double",min:0},{id:"material.k",label:"Thermal Conductivity",components:["k11","k12","k13","k22","k23","k33"],type:"double",size:6,"default":[1,1,1,1,1,1],layout:"half-matrix"},{id:"material.mu",label:"Molecular Viscosity",size:1,type:"double","default":1,min:0},{id:"material.tref",label:"Material Reference Temperature",size:1,type:"double","default":0},{id:"material.beta",label:"Coefficient of Thermal Expansion",size:1,type:"double","default":0},{id:"material.rigid",label:"Rigid Body Type",type:"enum","default":1,size:1,"enum":{labels:["Fluid or Deformable Body","Rigid Body"],values:["on","off"]}},{id:"material.vel",label:"Rigid Body Velocity",components:["X","Y","Z"],size:3,type:"double","default":[0,0,0]},{id:"block.tags",label:"Block Tags",size:-1,type:"enum","enum":{external:"block-tags"}},{id:"material.type",label:"Type of Material",type:"enum","default":0,size:1,"enum":{labels:["Eulerian","Lagrangian","Arbitrary Lagrangian-Eulerian"],values:["Eulerian","Lagrangian","ALE"]}}]},Initial:{label:"Initial Conditions",parameters:[{id:"initial.vel",label:"Velocity",type:"double",size:3,"default":[0,0,0]},{id:"initial.tke",label:"Turbulent Kinetic Energy",type:"double",size:1,"default":0},{id:"initial.eps",label:"Turbulent Dissipation Rate",type:"double",size:1,"default":0},{id:"initial.omega",label:"Inverse Dissipation Time Scale",size:1,"default":0,type:"double"},{id:"initial.turbnu",label:"Turbulent Viscosity",size:1,"default":0,type:"double"},{id:"initial.temperature",label:"Temperature",type:"double",size:1,"default":0},{id:"initial.enthalpy",label:"Enthalpy",size:1,type:"double","default":0,min:0},{id:"initial.init_energy",label:"Internal Energy",size:1,type:"double","default":0}]},ScalarDirichlet:{label:"Scalar Dirichlet",parameters:[{id:"scalar",label:"Scalar",type:"enum","default":0,size:1,"enum":{labels:["Enthalpy","Turbulent Kinetic Energy","Turbulent Dissipation","Distance Function","Hydrodynamic Pressure","Temperature","Turbulent Viscosity"],values:["enthalpy","tke","eps","distance","pressure","temperature","turbnu"]}},{id:"face.tags",label:"Face tags",size:-1,type:"enum","enum":{external:"face-tags"}},{id:"name",label:"Load Curve Name",type:"string","default":-1,size:1},{id:"amplitude",label:"Amplitude",size:1,type:"double","default":0}]},VelocityDirichlet:{label:"Velocity Dirichlet",value:"velocity",parameters:[{id:"face.tags",label:"Face tags",size:-1,type:"enum","enum":{external:"face-tags"}},{id:"name",label:"Load Curve Name",type:"string","default":-1,size:1},{id:"amplitude",label:"Amplitude",size:3,type:"double","default":[0,0,0]}]},SymmetryVelocity:{label:"Symmetry Dirichlet",value:"symmetry",parameters:[{id:"face.tags",label:"Face tags",size:-1,type:"enum","enum":{external:"face-tags"}},{id:"name",label:"Load Curve Name",type:"string","default":-1,size:1},{id:"amplitude",label:"Amplitude",size:3,type:"double","default":[0,0,0]}]},HeatFlux:{label:"Heat Flux",value:"heatflux",parameters:[{id:"face.tags",label:"Face tags",size:-1,type:"enum","enum":{external:"face-tags"}},{id:"name",label:"Load Curve Name",type:"string","default":-1,size:1},{id:"amplitude",label:"Amplitude",size:1,type:"double","default":0}]},PassiveOutflow:{label:"Passive Outflow",value:"passiveoutflow",parameters:[{id:"face.tags",label:"Face tags",size:-1,type:"enum","enum":{external:"face-tags"}}]},PressureOutflow:{label:"Pressure Outflow",value:"pressureoutflow",parameters:[{id:"face.tags",label:"Face tags",size:-1,type:"enum","enum":{external:"face-tags"}}]},"User-DefinedVelocity":{label:"User-Defined Velocity",parameters:[{id:"face.tags",label:"Face tags",size:-1,type:"enum","enum":{external:"face-tags"}}]},BodyForce:{label:"Body Force",parameters:[{id:"bodyforce.face.tags",label:"Face tags",size:-1,type:"enum","enum":{external:"face-tags"}},{id:"bodyforce.name",label:"Load Curve Name",type:"string",size:1,"default":-1},{id:"bodyforce.amplitude",label:"Force Amplitude",size:3,type:"double","default":[0,0,0]}]},BoussinesqForce:{label:"Boussinesq Force",parameters:[{id:"boussinesqforce.face.tags",label:"Face tags",size:-1,type:"enum","enum":{external:"face-tags"}},{id:"boussinesqforce.name",label:"Load Curve Name",type:"string",size:1,"default":-1},{id:"boussinesqforce.amplitude",label:"Gravity Amplitude",size:3,type:"double","default":[0,0,0]}]},PorousDragForce:{label:"Porous Drag Force",parameters:[{id:"porousdragforce.face.tags",label:"Face tags",size:-1,type:"enum","enum":{external:"face-tags"}},{id:"porousdragforce.name",label:"Load Curve Name",type:"string",size:1,"default":-1},{id:"porousdragforce.amplitude",label:"Porous Drag Amplitude",size:1,type:"double","default":0}]},HeatSources:{label:"Heat Sources",parameters:[{id:"heatsources.type",label:"Type of Heat Source",type:"enum","default":0,size:1,"enum":{labels:["Heat Source"],values:["heatsource"]}}]},HeatSource:{label:"Heat Source",parameters:[{id:"heatsource.face.tags",label:"Face tags",size:-1,type:"enum","enum":{external:"face-tags"}},{id:"heatsource.name",label:"Load Curve Name",type:"string",size:1,"default":-1},{id:"heatsource.amplitude",label:"Volumetric Amplitude",size:1,type:"double","default":0}]},HydrostaticPressure:{label:"Hydrostatic Pressure",parameters:[{id:"hydrostatic.face.tags",label:"Face tags",size:-1,type:"enum","enum":{external:"face-tags"}},{id:"hydrostatic.name",label:"Load Curve Name",type:"string",size:1,"default":-1},{id:"hydrostatic.amplitude",label:"Hydrostatic Pressure Amplitude",size:1,type:"double","default":0}]},spalart_allmaras:{label:"Spalart-Allmaras Model",value:"spalart_allmaras"},spalart_allmaras_des:{label:"Detached-Eddy Spalart-Allmaras Model",value:"spalart_allmaras_des"},smagorinsky:{label:"Smagorinsky Subgrid-Scale Model",value:"smagorinsky"},wale:{label:"Wall-Adapted Large Eddy Subgrid-Scale Model",value:"wale"},rng_ke:{label:"RNG k-e Model",value:"rng_ke"},sst_kw:{label:"SST k-w Model (under development)",value:"sst_kw"},ksgs:{label:"ksgs Subgrid-Scale Model (under development)",value:"ksgs"},ldkm_ksgs:{label:"LDKM ksgs Subgrid-Scale Model (under development)",value:"ldkm_ksgs"},RNG_ke:{label:"Custom RNG k-e",parameters:[{id:"rgn_ke.timescale_limiter",label:"Timescale Limiter",type:"enum","default":1,size:1,"enum":{labels:["On","Off"],values:["on","off"]}}]},Smagorinsky:{label:"Custom Smagorinsky",parameters:[{id:"smagorinsky.c_s",label:"Smagorinsky Model Constant",size:1,type:"double","default":.18},{id:"smagorinsky.prandtl",label:"Turbulent Prandtl Number",type:"double","default":.8889,size:1},{id:"smagorinsky.schmidt",label:"Turbulent Schmidt Number",type:"double","default":1,size:1}]},WALE:{label:"Custom WALE",parameters:[{id:"wale.c_w",label:"Smagorinsky Model Constant",size:1,type:"double","default":.5},{id:"wale.prandtl",label:"Turbulent Prandtl Number",type:"double","default":.8889,size:1},{id:"wale.schmidt",label:"Turbulent Schmidt Number",type:"double","default":1,size:1}]},SolutionMethod:{label:"Solution Method",parameters:[{id:"solutionmethod.strategy",label:"Solution Method",type:"enum","default":0,size:1,"enum":{labels:["Semi-Implicit Projection Algorithm","Fully-Implicit, Projection-Preconditioned, Picard Algorithm"],values:["projection","picard"]}},{id:"solutionmethod.nitmax",label:"Maximum Non-Linear Iterations",size:1,type:"integer","default":5},{id:"solutionmethod.nvec",label:"Maximum Vectors for Non-Linear Krylov Acceleration",size:1,type:"integer","default":0},{id:"solutionmethod.error_norm",label:"Error Norm",type:"enum","default":0,size:1,"enum":{labels:["Composite RMS Norm","Largest Dependent Variable Maximum Norm"],values:["composite","max"]}},{id:"solutionmethod.eps",label:"Non-Linear Solver Convergence Criteria",type:"double","default":1e-4,size:1},{id:"solutionmethod.eps_dist",label:"Normal-Distance Function Convergence Criteria",type:"double","default":1e-5,size:1},{id:"solutionmethod.eps_p0",label:"Initial Projection/Pressure Convergence Criteria",type:"double","default":1e-5,size:1},{id:"solutionmethod.drop_tol",label:"Drop tolerance",type:"double","default":.01,size:1},{id:"solutionmethod.timestep_control",label:"Automatic Time-Step Growth/Reduction",type:"enum","default":1,size:1,"enum":{labels:["On","Off"],values:["on","off"]}},{id:"solutionmethod.convergence",label:"Write Non-Linear Convergence History",type:"enum","default":1,size:1,"enum":{labels:["On","Off"],values:["on","off"]}},{id:"solutionmethod.subcycle",label:"Subcycle Pressure Solves",type:"enum","default":1,size:1,"enum":{labels:["On","Off"],values:["on","off"]}},{id:"solutionmethod.diagnostics",label:"Screen Non-Linear Convergence History",type:"enum","default":1,size:1,"enum":{labels:["On","Off"],values:["on","off"]}}]},Pressure:{label:"Pressure Solver",parameters:[{id:"pressuresolver.type",label:"Preconditioner - Krylov Solver",type:"enum","default":0,size:1,"enum":{labels:["Algebraic Multigrid - Conjugate Gradient Method","Successive Over-Relaxation - Conjugate Gradient Method","Jacobi - Conjugate Gradient Method"],values:["AMG","SSORCG","JPCG"]}},{id:"pressuresolver.amgpc",label:"Preconditioner Package for the AMG solver",type:"enum","default":0,size:1,"enum":{labels:["Multilevel Preconditioner Package","Hypre Preconditioner Package"],values:["ML","HYPRE"]}},{id:"pressuresolver.hypre_type",label:"Preconditioner Sub-Package Hypre/AMG",type:"enum","default":0,size:1,"enum":{labels:["BoomerAMG preconditioner"],values:["BOOMERAMG"]}},{id:"pressuresolver.cycle",label:"Type of AMG cycle",type:"enum","default":0,size:1,"enum":{labels:["Use a V-Cycle","Use a W-Cycle"],values:["V","W"]}},{id:"pressuresolver.solver",label:"Underlying AMG Krylov Solver",type:"enum","default":0,size:1,"enum":{labels:["Conjugate Gradient Method","Stabilized Bi-Conjugate Gradient Squared Method","Flexible Generalized Minimum Residual Method"],values:["CG","BCGS","FGMRES"]}},{id:"pressuresolver.pre_smooth",label:"Pre-Smoothing Sweeps for AMG",size:1,type:"integer","default":1},{id:"pressuresolver.post_smooth",label:"Post-Smoothing Sweeps for AMG",size:1,type:"integer","default":1},{id:"pressuresolver.levels",label:"Maximum AMG Levels",size:1,type:"integer","default":20},{id:"pressuresolver.itmax",label:"Maximum Linear Iterations",size:1,type:"integer","default":500},{id:"pressuresolver.itchk",label:"Check Convergence Every",size:1,type:"integer","default":2},{id:"pressuresolver.eps",label:"Linear Solver Convergence Criteria",type:"double","default":1e-5,size:1},{id:"pressuresolver.pivot",label:"Value of a Zero Pivot",type:"double","default":1e-16,size:1},{id:"pressuresolver.convergence",label:"Write Non-Linear Convergence Information",type:"enum","default":1,size:1,"enum":{labels:["On","Off"],values:["on","off"]}},{id:"pressuresolver.diagnostics",label:"Write Linear Convergence Diagnostics",type:"enum","default":1,size:1,"enum":{labels:["On","Off"],values:["on","off"]}}]},HypreBoomerAMG:{label:"Hypre/BoomerAMG",parameters:[{id:"hypreboomeramg.hypre_coarsen_type",label:"Parallel Coarsening Algorithm",type:"enum","default":3,size:1,"enum":{labels:["Cleary-Luby-Jones-Plassman","Classical Ruge-Steuben","Modified Classical Ruge-Steuben","Falgout Coarsening","PMIS Coarsening","HMIS Coarsening"],values:["CLJP","RUGE_STEUBEN","MODIFIED_RUGE_STEUBEN","FALGOUT","PMIS","HMIS"]}},{id:"hypreboomeramg.hypre_smoother",label:"Smoother Algorithm",type:"enum","default":4,size:1,"enum":{labels:["Jacobi","Gauss-Seidel, Sequential","Hybrid Gauss-Seidel or SOR, Forward Solve","Hybrid Gauss-Seidel or SOR, Backward Solve","Hybrid Symmetric Gauss-Seidel or SSOR","Gaussian Elimination"],values:["JACOBI","SEQ_SGS","HYB_GS","BACK_HYB_GS","HYB_SGS","GE"]}},{id:"hypreboomeramg.hypre_smoother_up",label:"Up Smoother Algorithm",type:"enum","default":4,size:1,"enum":{labels:["Jacobi","Gauss-Seidel, Sequential","Hybrid Gauss-Seidel or SOR, Forward Solve","Hybrid Gauss-Seidel or SOR, Backward Solve","Hybrid Symmetric Gauss-Seidel or SSOR","Gaussian Elimination"],values:["JACOBI","SEQ_SGS","HYB_GS","BACK_HYB_GS","HYB_SGS","GE"]}},{id:"hypreboomeramg.hypre_smoother_dn",label:"Down Smoother Algorithm",type:"enum","default":4,size:1,"enum":{labels:["Jacobi","Gauss-Seidel, Sequential","Hybrid Gauss-Seidel or SOR, Forward Solve","Hybrid Gauss-Seidel or SOR, Backward Solve","Hybrid Symmetric Gauss-Seidel or SSOR","Gaussian Elimination"],values:["JACOBI","SEQ_SGS","HYB_GS","BACK_HYB_GS","HYB_SGS","GE"]}},{id:"hypreboomeramg.hypre_smoother_co",label:"Coarsest Smoother Algorithm",type:"enum","default":5,size:1,"enum":{labels:["Jacobi","Gauss-Seidel, Sequential","Hybrid Gauss-Seidel or SOR, Forward Solve","Hybrid Gauss-Seidel or SOR, Backward Solve","Hybrid Symmetric Gauss-Seidel or SSOR","Gaussian Elimination"],values:["JACOBI","SEQ_SGS","HYB_GS","BACK_HYB_GS","HYB_SGS","GE"]}},{id:"hypreboomeramg.interp_type",label:"Parallel Interpolation Operator",type:"enum","default":0,size:1,"enum":{labels:["Classical Modified Interpolation","Direct Interpolation with Separation of Weights","Multipass Interpolation","Multipass Interpolation with Separation of Weights","Extended+i Interpolation","Extended+i, If No Common C Neighbor, Interpolation","Standard Interpolation","Standard Interpolation with Separation of Weights","FF Interpolation","FF1 Interpolation"],values:["CLASSICAL","DIRECT","MULTIPASS","MULTIPASS_WTS","EXT+I","EXT+I-CC","STANDARD","STANDARD_WTS","FF","FF1"]}},{id:"hypreboomeramg.hypre_nodal",label:"Nodal Systems Coarsening",type:"enum","default":1,size:1,"enum":{labels:["On","Off"],values:["on","off"]}},{id:"hypreboomeramg.trunc_factor",label:"Truncation Factor",type:"double","default":0,size:1},{id:"hypreboomeramg.pmax_elements",label:"Maximum Elements",size:1,type:"integer","default":0},{id:"hypreboomeramg.agg_num_levels",label:"Aggressive Coarsening Levels",size:1,type:"integer","default":0},{id:"hypreboomeramg.agg_num_paths",label:"Aggressive Coarsening Paths",size:1,type:"integer","default":1},{id:"hypreboomeramg.strong_threshold",label:"Strength Threshold",type:"double","default":.85,size:1},{id:"hypreboomeramg.max_rowsum",label:"Diagonally Dominant Strength",type:"double","default":.9,size:1}]},MLAMG:{label:"ML AMG",parameters:[{id:"mlamg.smoother",label:"Smoother Algorithm",type:"enum","default":0,size:1,"enum":{labels:["Incomplete Cholesky Factorization with No-Fill","Incomplete LU Factorization with No-Fill","Successive Over-Relaxation","Chebychev Polynomial Smoother"],values:["ICC","ILU","SSOR","CHEBYCHEV"]}}]},Momentum:{label:"Momentum Solver",parameters:[{id:"momentumsolver.type",label:"Solution Method",type:"enum","default":0,size:1,"enum":{labels:["Flexible Generalized Minimum Residual Method","ILU-Preconditioned Flexible Generalized Minimum Residual Method","Generalized Minimum Residual Method","ILU-Preconditioned Generalized Minimum Residual Method"],values:["FGMRES","ILUFGMRES","GMRES","ILUGMRES"]}},{id:"momentumsolver.restart",label:"Number of Restart Vectors",size:1,type:"integer","default":30},{id:"momentumsolver.itmax",label:"Maximum Linear Iterations",size:1,type:"integer","default":500},{id:"momentumsolver.itchk",label:"Check Convergence Every",size:1,type:"integer","default":2},{id:"momentumsolver.eps",label:"Linear Solver Convergence Criteria",type:"double","default":1e-5,size:1},{id:"momentumsolver.convergence",label:"Write Non-Linear Convergence Information",type:"enum","default":1,size:1,"enum":{labels:["On","Off"],values:["on","off"]}},{id:"momentumsolver.diagnostics",label:"Write Linear Convergence Diagnostics",type:"enum","default":1,size:1,"enum":{labels:["On","Off"],values:["on","off"]}}]},TransportSolver:{label:"Transport Solver",parameters:[{id:"transportsolver.type",label:"Solution Method",type:"enum","default":0,size:1,"enum":{labels:["Flexible Generalized Minimum Residual Method","ILU-Preconditioned Flexible Generalized Minimum Residual Method","Generalized Minimum Residual Method","ILU-Preconditioned Generalized Minimum Residual Method"],values:["FGMRES","ILU-FGMRES","GMRES","ILU-GMRES"]}},{id:"transportsolver.restart",label:"Number of Restart Vectors",size:1,type:"integer","default":30},{id:"transportsolver.itmax",label:"Maximum Linear Iterations",size:1,type:"integer","default":500},{id:"transportsolver.itchk",label:"Check Convergence Every",size:1,type:"integer","default":2},{id:"transportsolver.eps",label:"Linear Solver Convergence Criteria",type:"double","default":1e-5,size:1},{id:"transportsolver.convergence",label:"Write Non-Linear Convergence Information",type:"enum","default":1,size:1,"enum":{labels:["On","Off"],values:["on","off"]}},{id:"transportsolver.diagnostics",label:"Write Linear Convergence Diagnostics",type:"enum","default":1,size:1,"enum":{labels:["On","Off"],values:["on","off"]}}]},Time:{label:"Time",parameters:[{id:"time.nstep",label:"Maximum Time Steps",size:1,type:"integer","default":10},{id:"time.term",label:"Termination Time",type:"double","default":1,size:1},{id:"time.deltat",label:"Time Step Size",type:"double","default":.01,size:1}]},TimeIntegration:{label:"Time Integration",parameters:[{id:"timeintegration.type",label:"Time-Step Control Method",type:"enum","default":0,size:1,"enum":{labels:["Time-Step Based on a Fixed Maximum CFL","Time-Step Based on a Fixed Maximum deltat"],values:["fixed_cfl","fixed_dt"]}},{id:"timeintegration.CFLinit",label:"Initial CFL Number",size:1,type:"double","default":1},{id:"timeintegration.CFLmax",label:"Maximum CFL Number",size:1,type:"double","default":2},{id:"timeintegration.dtmax",label:"Maximum Time-Step",type:"double","default":1,size:1},{id:"timeintegration.dtscale",label:"Time-Step Growth Factor",type:"double","default":1.025,size:1},{id:"timeintegration.thetaA",label:"Advective Time-Weight",type:"double","default":.5,size:1},{id:"timeintegration.thetaK",label:"Viscous/Diffusive Time-Weight",type:"double","default":.5,size:1},{id:"timeintegration.thetaF",label:"Source Time-Weight",type:"double","default":"0.5",size:1},{id:"timeintegration.trimlast",label:"Exact Termination Time",type:"enum","default":1,size:1,"enum":{labels:["On","Off"],values:["on","off"]}}]},ExecutionControl:{label:"Execution Control",parameters:[{id:"executioncontrol.nstep",label:"Execution Control",size:1,type:"integer","default":0}]},LoadBalance:{label:"Load Balance",parameters:[{id:"loadbalance.method",label:"Type of Load Balancing",type:"enum","default":4,size:1,"enum":{labels:["Recursive Coordinate Bisection","Recursive Inertial Bisection","Space-Filling Curve","Hypergraph","Space-Filling Curve followed by Hypergraph"],values:["rcb","rib","sfc","hg","sfc_and_hg"]}},{id:"loadbalance.diagnostics",label:"Load Balance Diagnostic Output",type:"enum","default":1,size:1,"enum":{labels:["On","Off"],values:["on","off"]}}]},Output:{label:"Output parameters",parameters:[{id:"timehistory.nstep",label:"Time History Frequency",size:1,type:"integer","default":1},{id:"plot.nplot",label:"Plot Frequency",size:1,type:"integer","default":20},{id:"dump.ndump",label:"Dump Frequency",size:1,type:"integer","default":0},{id:"ascii.prti",label:"Primitive variable Frequency",size:1,type:"integer","default":10},{id:"ascii.prtlev",label:"Level of verbosity",type:"enum","default":0,size:1,"enum":{labels:["Primary Code Options Only","Mesh Coordinates and Topology","Primitive Variables"],values:["param","results","verbose"]}},{id:"velocityminmax.nstep",label:"Velocity Min/Max Frequency",size:1,type:"integer","default":1}]},Plot:{label:"Plot File",parameters:[{id:"plot.filetype",label:"File type",type:"enum","default":0,size:1,"enum":{labels:["serial","distributed"],values:["serial","distributed"]}},{id:"plot.pltype",label:"Format",type:"enum","default":2,size:1,"enum":{labels:["ASCII GMV","Exodus-II (CDF)","Exodus-II (CDF) 64bit","Exodus-II (CDF) HDF5","Exodus-II (CDF) HDF5 64bit","ASCII VTK"],values:["gmv_ascii","exodusii","exodusii64","exodusii_hdf5","exodusii64_hdf5","vtk_ascii"]}},{id:"plot.evariables",label:"Element Variables",type:"enum","default":[0],size:-1,"enum":{labels:["Courant-Friedrichs-Levy Number","Fluid Density","Normal Distance from No-Slip/No-Penetration Surfaces","Velocity Divergence (nabla sdot v)","Fluid Specific Enthalpy","Enstrophy, (omega sdot omega/2)","Helicity, (v sdot omega)","Fluid Pressure","Processor Id (MPI Rank)","Fluid temperature","Turbulent Dissipation Rate (epsilon)","Turbulent Kinetic Energy (k)","Turbulent Eddy Viscosity","Nodal Displacement Vector for ALE Computations","Fluid Velocity Vector","Q-Criteria, i.e., 2nd Invariant of Velocity Gradient","Vorticity, i.e., Curl of Velocity (nabla x v)","y^* Non-Dimensional Distance","Element Volume"],values:["cfl","density","dist","div","enthalpy","enstrophy","helicity","pressure","procid","temp","turbeps","turbke","turbnu","u","vel","vginv2","vorticity","ystar","volume"]}},{id:"plot.nvariables",label:"Node Variables",type:"enum","default":[0],size:-1,"enum":{labels:["Fluid Density","Normal Distance from No-Slip/No-Penetration Surfaces","Fluid Specific Enthalpy","Enstrophy, (omega sdot omega/2)","Helicity, (v sdot omega)","Fluid Pressure","Processor Id (MPI Rank)","Fluid temperature","Turbulent Dissipation Rate (epsilon)","Turbulent Kinetic Energy (k)","Turbulent Eddy Viscosity","Nodal Displacement Vector for ALE Computations","Fluid Velocity Vector","Q-Criteria, i.e., 2nd Invariant of Velocity Gradient","Vorticity, i.e., Curl of Velocity (nabla x v)"],values:["density","dist","enthalpy","enstrophy","helicity","pressure","procid","temp","turbeps","turbke","turbnu","u","vel","vginv2","vorticity"]}}]},PlotSide:{label:"Plot side variables",parameters:[{id:"face.tags",label:"Face tags",size:-1,type:"enum","enum":{external:"face-tags"}},{id:"plot.svariables",label:"Face Variables",type:"enum","default":[0],size:-1,"enum":{labels:["None","Traction Force Vector","Shear Traction Force Vector","Normal Traction Force Vector","Wall Shear Force","y<sup>+</sup>","y<sup>*</sup>","Spatial Variation of y<sup>+</sup>","Heat Flux Vector","Normal Heat Flux","Surface Area (of each Cell)"],values:["none","traction","straction","ntraction","wallshear","yplus","ystar","varyplus","heatflux","nheatflux","surfarea"]}}]},TimeHistoryElem:{label:"Time-History on Elements",parameters:[{id:"timehistory.tags",label:"Element tags",type:"enum",size:-1,"enum":{external:"element-tags"}},{id:"timehistory.variables",label:"Element Variables",type:"enum","default":0,size:1,"enum":{labels:["None","Mean Density","Fluid Density","Velocity Divergence (&nabla; &sdot; v)","Enstrophy, i.e., Square of Vorticity","Fluid Specific Enthalpy","Helicity, i.e., Dot Product of Velocity and Vorticity","Fluid Pressure","Fluid temperature","Turbulent Dissipation Rate (&epsilon;)","Turbulent Kinetic Energy (k)","Turbulent Eddy Viscosity","Fluid Velocity Vector","Vorticity, i.e., Curl of Velocity (&nabla; x v)"],values:["none","<density>","density","div","enstrophy","enthalpy","helicity","pressure","temp","turbeps","turbke","turbnu","vel","vorticity"]}}]},TimeHistoryNode:{label:"Time-History on Nodes"},TimeHistorySide:{label:"Time-History on Side",parameters:[{id:"timehistory.tags",label:"Face tags",size:-1,type:"enum","enum":{external:"face-tags"}},{id:"timehistory.variables",label:"Surface Variables",type:"enum","default":0,size:1,"enum":{labels:["None","Average Pressure","Average Temperature","Average Velocity Vector","Integral Force","Integrated Volume of Fluid","Heat Flow","Mass Flow","Integral Pressure Force","Surface Area","Integral Viscous Shear Force","Volume Flow"],values:["none","avgpress","avgtemp","avgvel","force","fvol","heatflow","massflow","pressforce","surfarea","viscforce","volumeflow"]}}]},TurbulenceStatistics:{label:"Turbulence Statistics",parameters:[{id:"turbulencestatistics.evariables",label:"Element Variables",type:"enum","default":0,size:-1,"enum":{labels:["Mean Density","Mean Pressure","Mean Velocity Vector","Mean Temperature","Mean Enstrophy","Mean Helicity","Mean Vorticity","Mean Turbulent Viscosity","Pressure Variance","Temperature Variance","Density-Pressure Covariance","Pressure-Velocity Covariance","Root-Mean-Square Pressure","Root-Mean-Square Temperature","Turbulent Kinetic Energy","Reynolds Stress Tensor"],values:["<density>","<pressure>","<velocity>","<temperature>","<enstrophy>","<helicity>","<vorticity>","<turbnu>","<pressure', pressure'>","<temp', temp'>","<density', pressure'>","<pressure', velocity'>","rms-pressure","rms-temp","tke","reynoldsstress"]}},{id:"turbulencestatistics.nvariables",label:"Node Variables",type:"enum","default":0,size:-1,"enum":{labels:["Mean Density","Mean Pressure","Mean Velocity Vector","Mean Temperature","Mean Enstrophy","Mean Helicity","Mean Vorticity","Pressure Variance","Temperature Variance","Density-Pressure Covariance","Pressure-Velocity Covariance","Root-Mean-Square Pressure","Root-Mean-Square Temperature","Turbulent Kinetic Energy","Reynolds Stress Tensor"],values:["<density>","<pressure>","<velocity>","<temperature>","<enstrophy>","<helicity>","<vorticity>","<pressure', pressure'>","<temp', temp'>","<density', pressure'>","<pressure', velocity'>","rms-pressure","rms-temp","tke","reynoldsstress"]}},{id:"turbulencestatistics.starttime",label:"Start Time",size:1,type:"double","default":0},{id:"turbulencestatistics.endtime",label:"End Time",size:1,type:"double","default":1},{id:"turbulencestatistics.plotwinsize",label:"Time Window Size",size:1,type:"double","default":.1}]},TurbulenceStatisticsSide:{label:"Turbulence Statistics - Side",parameters:[{id:"face.tags",label:"Face tags",type:"enum",size:-1,"enum":{external:"face-tags"}},{id:"turbulencestatistics.svariables",label:"Face Variables",type:"enum","default":0,size:-1,"enum":{labels:["None","Mean Density","Mean Pressure","Mean Velocity Vector","Mean Temperature","Mean Heat Flux Vector","Mean Shear Traction Force Vector","Mean Normal Traction Force Vector","Mean Traction Force Vector","Mean Wall Shear Force","Pressure Variance","Temperature Variance","Density-Pressure Covariance","Root-Mean-Square Pressure","Root-Mean-Square Temperature"],values:["none","<density>","<pressure>","<velocity>","<temperature>","<heatflux>","<straction>","<ntraction>","<traction>","<wallshear>","<pressure', pressure'>","<temp', temp'>","<density', pressure'>","rms-pressure","rms-temp"]}}]}}},SimPut.registerTemplateLibrary("hydra-th",e)
}();